// Generated by jextract

package com.virustotal.yara;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class YR_AC_MATCH {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.unionLayout(
            Constants$root.C_POINTER$LAYOUT.withName("string"),
            MemoryLayout.structLayout(
                Constants$root.C_INT$LAYOUT.withName("buffer_id"),
                Constants$root.C_INT$LAYOUT.withName("offset")
            ).withName("string_")
        ).withName("$anon$0"),
        MemoryLayout.unionLayout(
            Constants$root.C_POINTER$LAYOUT.withName("forward_code"),
            MemoryLayout.structLayout(
                Constants$root.C_INT$LAYOUT.withName("buffer_id"),
                Constants$root.C_INT$LAYOUT.withName("offset")
            ).withName("forward_code_")
        ).withName("$anon$1"),
        MemoryLayout.unionLayout(
            Constants$root.C_POINTER$LAYOUT.withName("backward_code"),
            MemoryLayout.structLayout(
                Constants$root.C_INT$LAYOUT.withName("buffer_id"),
                Constants$root.C_INT$LAYOUT.withName("offset")
            ).withName("backward_code_")
        ).withName("$anon$2"),
        MemoryLayout.unionLayout(
            Constants$root.C_POINTER$LAYOUT.withName("next"),
            MemoryLayout.structLayout(
                Constants$root.C_INT$LAYOUT.withName("buffer_id"),
                Constants$root.C_INT$LAYOUT.withName("offset")
            ).withName("next_")
        ).withName("$anon$3"),
        Constants$root.C_SHORT$LAYOUT.withName("backtrack"),
        MemoryLayout.paddingLayout(48)
    ).withName("YR_AC_MATCH");
    public static MemoryLayout $LAYOUT() {
        return YR_AC_MATCH.$struct$LAYOUT;
    }
    static final VarHandle string$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("$anon$0"), MemoryLayout.PathElement.groupElement("string"));
    public static VarHandle string$VH() {
        return YR_AC_MATCH.string$VH;
    }
    public static MemoryAddress string$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)YR_AC_MATCH.string$VH.get(seg);
    }
    public static void string$set( MemorySegment seg, MemoryAddress x) {
        YR_AC_MATCH.string$VH.set(seg, x);
    }
    public static MemoryAddress string$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)YR_AC_MATCH.string$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void string$set(MemorySegment seg, long index, MemoryAddress x) {
        YR_AC_MATCH.string$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment string_$slice(MemorySegment seg) {
        return seg.asSlice(0, 8);
    }
    static final VarHandle forward_code$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("$anon$1"), MemoryLayout.PathElement.groupElement("forward_code"));
    public static VarHandle forward_code$VH() {
        return YR_AC_MATCH.forward_code$VH;
    }
    public static MemoryAddress forward_code$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)YR_AC_MATCH.forward_code$VH.get(seg);
    }
    public static void forward_code$set( MemorySegment seg, MemoryAddress x) {
        YR_AC_MATCH.forward_code$VH.set(seg, x);
    }
    public static MemoryAddress forward_code$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)YR_AC_MATCH.forward_code$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void forward_code$set(MemorySegment seg, long index, MemoryAddress x) {
        YR_AC_MATCH.forward_code$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment forward_code_$slice(MemorySegment seg) {
        return seg.asSlice(8, 8);
    }
    static final VarHandle backward_code$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("$anon$2"), MemoryLayout.PathElement.groupElement("backward_code"));
    public static VarHandle backward_code$VH() {
        return YR_AC_MATCH.backward_code$VH;
    }
    public static MemoryAddress backward_code$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)YR_AC_MATCH.backward_code$VH.get(seg);
    }
    public static void backward_code$set( MemorySegment seg, MemoryAddress x) {
        YR_AC_MATCH.backward_code$VH.set(seg, x);
    }
    public static MemoryAddress backward_code$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)YR_AC_MATCH.backward_code$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void backward_code$set(MemorySegment seg, long index, MemoryAddress x) {
        YR_AC_MATCH.backward_code$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment backward_code_$slice(MemorySegment seg) {
        return seg.asSlice(16, 8);
    }
    static final VarHandle next$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("$anon$3"), MemoryLayout.PathElement.groupElement("next"));
    public static VarHandle next$VH() {
        return YR_AC_MATCH.next$VH;
    }
    public static MemoryAddress next$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)YR_AC_MATCH.next$VH.get(seg);
    }
    public static void next$set( MemorySegment seg, MemoryAddress x) {
        YR_AC_MATCH.next$VH.set(seg, x);
    }
    public static MemoryAddress next$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)YR_AC_MATCH.next$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void next$set(MemorySegment seg, long index, MemoryAddress x) {
        YR_AC_MATCH.next$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment next_$slice(MemorySegment seg) {
        return seg.asSlice(24, 8);
    }
    static final VarHandle backtrack$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("backtrack"));
    public static VarHandle backtrack$VH() {
        return YR_AC_MATCH.backtrack$VH;
    }
    public static short backtrack$get(MemorySegment seg) {
        return (short)YR_AC_MATCH.backtrack$VH.get(seg);
    }
    public static void backtrack$set( MemorySegment seg, short x) {
        YR_AC_MATCH.backtrack$VH.set(seg, x);
    }
    public static short backtrack$get(MemorySegment seg, long index) {
        return (short)YR_AC_MATCH.backtrack$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void backtrack$set(MemorySegment seg, long index, short x) {
        YR_AC_MATCH.backtrack$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


