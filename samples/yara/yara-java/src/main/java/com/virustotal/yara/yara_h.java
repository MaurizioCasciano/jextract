// Generated by jextract

package com.virustotal.yara;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class yara_h extends yara_h_1 {

    /* package-private */ yara_h() {}
    public static OfByte C_CHAR = Constants$root.C_CHAR$LAYOUT;
    public static OfShort C_SHORT = Constants$root.C_SHORT$LAYOUT;
    public static OfInt C_INT = Constants$root.C_INT$LAYOUT;
    public static OfLong C_LONG = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong C_LONG_LONG = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfFloat C_FLOAT = Constants$root.C_FLOAT$LAYOUT;
    public static OfDouble C_DOUBLE = Constants$root.C_DOUBLE$LAYOUT;
    public static OfAddress C_POINTER = Constants$root.C_POINTER$LAYOUT;
    public static int _SETJMP_H() {
        return (int)1L;
    }
    public static int _FEATURES_H() {
        return (int)1L;
    }
    public static int _DEFAULT_SOURCE() {
        return (int)1L;
    }
    public static int __GLIBC_USE_ISOC2X() {
        return (int)0L;
    }
    public static int __USE_ISOC11() {
        return (int)1L;
    }
    public static int __USE_ISOC99() {
        return (int)1L;
    }
    public static int __USE_ISOC95() {
        return (int)1L;
    }
    public static int __USE_POSIX_IMPLICITLY() {
        return (int)1L;
    }
    public static int _POSIX_SOURCE() {
        return (int)1L;
    }
    public static int __USE_POSIX() {
        return (int)1L;
    }
    public static int __USE_POSIX2() {
        return (int)1L;
    }
    public static int __USE_POSIX199309() {
        return (int)1L;
    }
    public static int __USE_POSIX199506() {
        return (int)1L;
    }
    public static int __USE_XOPEN2K() {
        return (int)1L;
    }
    public static int __USE_XOPEN2K8() {
        return (int)1L;
    }
    public static int _ATFILE_SOURCE() {
        return (int)1L;
    }
    public static int __WORDSIZE() {
        return (int)64L;
    }
    public static int __WORDSIZE_TIME64_COMPAT32() {
        return (int)1L;
    }
    public static int __SYSCALL_WORDSIZE() {
        return (int)64L;
    }
    public static int __USE_MISC() {
        return (int)1L;
    }
    public static int __USE_ATFILE() {
        return (int)1L;
    }
    public static int __USE_FORTIFY_LEVEL() {
        return (int)0L;
    }
    public static int __GLIBC_USE_DEPRECATED_GETS() {
        return (int)0L;
    }
    public static int __GLIBC_USE_DEPRECATED_SCANF() {
        return (int)0L;
    }
    public static int _STDC_PREDEF_H() {
        return (int)1L;
    }
    public static int __STDC_IEC_559__() {
        return (int)1L;
    }
    public static int __STDC_IEC_559_COMPLEX__() {
        return (int)1L;
    }
    public static int __GNU_LIBRARY__() {
        return (int)6L;
    }
    public static int __GLIBC__() {
        return (int)2L;
    }
    public static int __GLIBC_MINOR__() {
        return (int)35L;
    }
    public static int _SYS_CDEFS_H() {
        return (int)1L;
    }
    public static int __glibc_c99_flexarr_available() {
        return (int)1L;
    }
    public static int __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI() {
        return (int)0L;
    }
    public static int __HAVE_GENERIC_SELECTION() {
        return (int)1L;
    }
    public static int _BITS_SETJMP_H() {
        return (int)1L;
    }
    public static int __jmp_buf_tag_defined() {
        return (int)1L;
    }
    public static int _STDIO_H() {
        return (int)1L;
    }
    public static int __GLIBC_USE_LIB_EXT2() {
        return (int)0L;
    }
    public static int __GLIBC_USE_IEC_60559_BFP_EXT() {
        return (int)0L;
    }
    public static int __GLIBC_USE_IEC_60559_BFP_EXT_C2X() {
        return (int)0L;
    }
    public static int __GLIBC_USE_IEC_60559_EXT() {
        return (int)0L;
    }
    public static int __GLIBC_USE_IEC_60559_FUNCS_EXT() {
        return (int)0L;
    }
    public static int __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X() {
        return (int)0L;
    }
    public static int __GLIBC_USE_IEC_60559_TYPES_EXT() {
        return (int)0L;
    }
    public static int __GNUC_VA_LIST() {
        return (int)1L;
    }
    public static int _BITS_TYPES_H() {
        return (int)1L;
    }
    public static int _BITS_TYPESIZES_H() {
        return (int)1L;
    }
    public static int __OFF_T_MATCHES_OFF64_T() {
        return (int)1L;
    }
    public static int __INO_T_MATCHES_INO64_T() {
        return (int)1L;
    }
    public static int __RLIM_T_MATCHES_RLIM64_T() {
        return (int)1L;
    }
    public static int __STATFS_MATCHES_STATFS64() {
        return (int)1L;
    }
    public static int __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64() {
        return (int)1L;
    }
    public static int __FD_SETSIZE() {
        return (int)1024L;
    }
    public static int _BITS_TIME64_H() {
        return (int)1L;
    }
    public static int _____fpos_t_defined() {
        return (int)1L;
    }
    public static int ____mbstate_t_defined() {
        return (int)1L;
    }
    public static int _____fpos64_t_defined() {
        return (int)1L;
    }
    public static int ____FILE_defined() {
        return (int)1L;
    }
    public static int __FILE_defined() {
        return (int)1L;
    }
    public static int __struct_FILE_defined() {
        return (int)1L;
    }
    public static int _IO_EOF_SEEN() {
        return (int)16L;
    }
    public static int _IO_ERR_SEEN() {
        return (int)32L;
    }
    public static int _IO_USER_LOCK() {
        return (int)32768L;
    }
    public static int _IOFBF() {
        return (int)0L;
    }
    public static int _IOLBF() {
        return (int)1L;
    }
    public static int _IONBF() {
        return (int)2L;
    }
    public static int BUFSIZ() {
        return (int)8192L;
    }
    public static int SEEK_SET() {
        return (int)0L;
    }
    public static int SEEK_CUR() {
        return (int)1L;
    }
    public static int SEEK_END() {
        return (int)2L;
    }
    public static int _BITS_STDIO_LIM_H() {
        return (int)1L;
    }
    public static int L_tmpnam() {
        return (int)20L;
    }
    public static int TMP_MAX() {
        return (int)238328L;
    }
    public static int FILENAME_MAX() {
        return (int)4096L;
    }
    public static int L_ctermid() {
        return (int)9L;
    }
    public static int FOPEN_MAX() {
        return (int)16L;
    }
    public static int __HAVE_FLOAT128() {
        return (int)0L;
    }
    public static int __HAVE_DISTINCT_FLOAT128() {
        return (int)0L;
    }
    public static int __HAVE_FLOAT64X() {
        return (int)1L;
    }
    public static int __HAVE_FLOAT64X_LONG_DOUBLE() {
        return (int)1L;
    }
    public static int __HAVE_FLOAT16() {
        return (int)0L;
    }
    public static int __HAVE_FLOAT32() {
        return (int)1L;
    }
    public static int __HAVE_FLOAT64() {
        return (int)1L;
    }
    public static int __HAVE_FLOAT32X() {
        return (int)1L;
    }
    public static int __HAVE_FLOAT128X() {
        return (int)0L;
    }
    public static int __HAVE_DISTINCT_FLOAT32() {
        return (int)0L;
    }
    public static int __HAVE_DISTINCT_FLOAT64() {
        return (int)0L;
    }
    public static int __HAVE_DISTINCT_FLOAT32X() {
        return (int)0L;
    }
    public static int __HAVE_DISTINCT_FLOAT64X() {
        return (int)0L;
    }
    public static int __HAVE_FLOATN_NOT_TYPEDEF() {
        return (int)0L;
    }
    public static int _LIBC_LIMITS_H_() {
        return (int)1L;
    }
    public static int MB_LEN_MAX() {
        return (int)16L;
    }
    public static int _BITS_POSIX1_LIM_H() {
        return (int)1L;
    }
    public static int _POSIX_AIO_LISTIO_MAX() {
        return (int)2L;
    }
    public static int _POSIX_AIO_MAX() {
        return (int)1L;
    }
    public static int _POSIX_ARG_MAX() {
        return (int)4096L;
    }
    public static int _POSIX_CHILD_MAX() {
        return (int)25L;
    }
    public static int _POSIX_DELAYTIMER_MAX() {
        return (int)32L;
    }
    public static int _POSIX_HOST_NAME_MAX() {
        return (int)255L;
    }
    public static int _POSIX_LINK_MAX() {
        return (int)8L;
    }
    public static int _POSIX_LOGIN_NAME_MAX() {
        return (int)9L;
    }
    public static int _POSIX_MAX_CANON() {
        return (int)255L;
    }
    public static int _POSIX_MAX_INPUT() {
        return (int)255L;
    }
    public static int _POSIX_MQ_OPEN_MAX() {
        return (int)8L;
    }
    public static int _POSIX_MQ_PRIO_MAX() {
        return (int)32L;
    }
    public static int _POSIX_NAME_MAX() {
        return (int)14L;
    }
    public static int _POSIX_NGROUPS_MAX() {
        return (int)8L;
    }
    public static int _POSIX_OPEN_MAX() {
        return (int)20L;
    }
    public static int _POSIX_PATH_MAX() {
        return (int)256L;
    }
    public static int _POSIX_PIPE_BUF() {
        return (int)512L;
    }
    public static int _POSIX_RE_DUP_MAX() {
        return (int)255L;
    }
    public static int _POSIX_RTSIG_MAX() {
        return (int)8L;
    }
    public static int _POSIX_SEM_NSEMS_MAX() {
        return (int)256L;
    }
    public static int _POSIX_SEM_VALUE_MAX() {
        return (int)32767L;
    }
    public static int _POSIX_SIGQUEUE_MAX() {
        return (int)32L;
    }
    public static int _POSIX_SSIZE_MAX() {
        return (int)32767L;
    }
    public static int _POSIX_STREAM_MAX() {
        return (int)8L;
    }
    public static int _POSIX_SYMLINK_MAX() {
        return (int)255L;
    }
    public static int _POSIX_SYMLOOP_MAX() {
        return (int)8L;
    }
    public static int _POSIX_TIMER_MAX() {
        return (int)32L;
    }
    public static int _POSIX_TTY_NAME_MAX() {
        return (int)9L;
    }
    public static int _POSIX_TZNAME_MAX() {
        return (int)6L;
    }
    public static int _POSIX_CLOCKRES_MIN() {
        return (int)20000000L;
    }
    public static int NR_OPEN() {
        return (int)1024L;
    }
    public static int NGROUPS_MAX() {
        return (int)65536L;
    }
    public static int ARG_MAX() {
        return (int)131072L;
    }
    public static int LINK_MAX() {
        return (int)127L;
    }
    public static int MAX_CANON() {
        return (int)255L;
    }
    public static int MAX_INPUT() {
        return (int)255L;
    }
    public static int NAME_MAX() {
        return (int)255L;
    }
    public static int PATH_MAX() {
        return (int)4096L;
    }
    public static int PIPE_BUF() {
        return (int)4096L;
    }
    public static int XATTR_NAME_MAX() {
        return (int)255L;
    }
    public static int XATTR_SIZE_MAX() {
        return (int)65536L;
    }
    public static int XATTR_LIST_MAX() {
        return (int)65536L;
    }
    public static int RTSIG_MAX() {
        return (int)32L;
    }
    public static int _POSIX_THREAD_KEYS_MAX() {
        return (int)128L;
    }
    public static int PTHREAD_KEYS_MAX() {
        return (int)1024L;
    }
    public static int _POSIX_THREAD_DESTRUCTOR_ITERATIONS() {
        return (int)4L;
    }
    public static int _POSIX_THREAD_THREADS_MAX() {
        return (int)64L;
    }
    public static int AIO_PRIO_DELTA_MAX() {
        return (int)20L;
    }
    public static int PTHREAD_STACK_MIN() {
        return (int)16384L;
    }
    public static int DELAYTIMER_MAX() {
        return (int)2147483647L;
    }
    public static int TTY_NAME_MAX() {
        return (int)32L;
    }
    public static int LOGIN_NAME_MAX() {
        return (int)256L;
    }
    public static int HOST_NAME_MAX() {
        return (int)64L;
    }
    public static int MQ_PRIO_MAX() {
        return (int)32768L;
    }
    public static int _BITS_POSIX2_LIM_H() {
        return (int)1L;
    }
    public static int _POSIX2_BC_BASE_MAX() {
        return (int)99L;
    }
    public static int _POSIX2_BC_DIM_MAX() {
        return (int)2048L;
    }
    public static int _POSIX2_BC_SCALE_MAX() {
        return (int)99L;
    }
    public static int _POSIX2_BC_STRING_MAX() {
        return (int)1000L;
    }
    public static int _POSIX2_COLL_WEIGHTS_MAX() {
        return (int)2L;
    }
    public static int _POSIX2_EXPR_NEST_MAX() {
        return (int)32L;
    }
    public static int _POSIX2_LINE_MAX() {
        return (int)2048L;
    }
    public static int _POSIX2_RE_DUP_MAX() {
        return (int)255L;
    }
    public static int _POSIX2_CHARCLASS_NAME_MAX() {
        return (int)14L;
    }
    public static int COLL_WEIGHTS_MAX() {
        return (int)255L;
    }
    public static int CHARCLASS_NAME_MAX() {
        return (int)2048L;
    }
    public static int _ASSERT_H() {
        return (int)1L;
    }
    public static int _STDLIB_H() {
        return (int)1L;
    }
    public static int WNOHANG() {
        return (int)1L;
    }
    public static int WUNTRACED() {
        return (int)2L;
    }
    public static int WSTOPPED() {
        return (int)2L;
    }
    public static int WEXITED() {
        return (int)4L;
    }
    public static int WCONTINUED() {
        return (int)8L;
    }
    public static int WNOWAIT() {
        return (int)16777216L;
    }
    public static int __WNOTHREAD() {
        return (int)536870912L;
    }
    public static int __WALL() {
        return (int)1073741824L;
    }
    public static int __W_CONTINUED() {
        return (int)65535L;
    }
    public static int __WCOREFLAG() {
        return (int)128L;
    }
    public static int __ldiv_t_defined() {
        return (int)1L;
    }
    public static int __lldiv_t_defined() {
        return (int)1L;
    }
    public static int RAND_MAX() {
        return (int)2147483647L;
    }
    public static int EXIT_FAILURE() {
        return (int)1L;
    }
    public static int EXIT_SUCCESS() {
        return (int)0L;
    }
    public static int _SYS_TYPES_H() {
        return (int)1L;
    }
    public static int __clock_t_defined() {
        return (int)1L;
    }
    public static int __clockid_t_defined() {
        return (int)1L;
    }
    public static int __time_t_defined() {
        return (int)1L;
    }
    public static int __timer_t_defined() {
        return (int)1L;
    }
    public static int _BITS_STDINT_INTN_H() {
        return (int)1L;
    }
    public static int __BIT_TYPES_DEFINED__() {
        return (int)1L;
    }
    public static int _ENDIAN_H() {
        return (int)1L;
    }
    public static int _BITS_ENDIAN_H() {
        return (int)1L;
    }
    public static int __LITTLE_ENDIAN() {
        return (int)1234L;
    }
    public static int __BIG_ENDIAN() {
        return (int)4321L;
    }
    public static int __PDP_ENDIAN() {
        return (int)3412L;
    }
    public static int _BITS_ENDIANNESS_H() {
        return (int)1L;
    }
    public static int _BITS_BYTESWAP_H() {
        return (int)1L;
    }
    public static int _BITS_UINTN_IDENTITY_H() {
        return (int)1L;
    }
    public static int _SYS_SELECT_H() {
        return (int)1L;
    }
    public static int __sigset_t_defined() {
        return (int)1L;
    }
    public static int __timeval_defined() {
        return (int)1L;
    }
    public static int _STRUCT_TIMESPEC() {
        return (int)1L;
    }
    public static int _BITS_PTHREADTYPES_COMMON_H() {
        return (int)1L;
    }
    public static int _THREAD_SHARED_TYPES_H() {
        return (int)1L;
    }
    public static int _BITS_PTHREADTYPES_ARCH_H() {
        return (int)1L;
    }
    public static int __SIZEOF_PTHREAD_MUTEX_T() {
        return (int)40L;
    }
    public static int __SIZEOF_PTHREAD_ATTR_T() {
        return (int)56L;
    }
    public static int __SIZEOF_PTHREAD_RWLOCK_T() {
        return (int)56L;
    }
    public static int __SIZEOF_PTHREAD_BARRIER_T() {
        return (int)32L;
    }
    public static int __SIZEOF_PTHREAD_MUTEXATTR_T() {
        return (int)4L;
    }
    public static int __SIZEOF_PTHREAD_COND_T() {
        return (int)48L;
    }
    public static int __SIZEOF_PTHREAD_CONDATTR_T() {
        return (int)4L;
    }
    public static int __SIZEOF_PTHREAD_RWLOCKATTR_T() {
        return (int)8L;
    }
    public static int __SIZEOF_PTHREAD_BARRIERATTR_T() {
        return (int)4L;
    }
    public static int _THREAD_MUTEX_INTERNAL_H() {
        return (int)1L;
    }
    public static int __PTHREAD_MUTEX_HAVE_PREV() {
        return (int)1L;
    }
    public static int __have_pthread_attr_t() {
        return (int)1L;
    }
    public static int _ALLOCA_H() {
        return (int)1L;
    }
    public static int _STRING_H() {
        return (int)1L;
    }
    public static int _BITS_TYPES_LOCALE_T_H() {
        return (int)1L;
    }
    public static int _BITS_TYPES___LOCALE_T_H() {
        return (int)1L;
    }
    public static int _STRINGS_H() {
        return (int)1L;
    }
    public static int _STDINT_H() {
        return (int)1L;
    }
    public static int _BITS_WCHAR_H() {
        return (int)1L;
    }
    public static int _BITS_STDINT_UINTN_H() {
        return (int)1L;
    }
    public static int _INTTYPES_H() {
        return (int)1L;
    }
    public static int ____gwchar_t_defined() {
        return (int)1L;
    }
    public static int true_() {
        return (int)1L;
    }
    public static int false_() {
        return (int)0L;
    }
    public static int MAX_PATH() {
        return (int)1024L;
    }
    public static int YR_MAX_THREADS() {
        return (int)32L;
    }
    public static int YR_MAX_ARENA_BUFFERS() {
        return (int)16L;
    }
    public static int YR_MAX_COMPILER_ERROR_EXTRA_INFO() {
        return (int)256L;
    }
    public static int YR_MAX_ATOM_LENGTH() {
        return (int)4L;
    }
    public static int YR_MAX_ATOM_QUALITY() {
        return (int)255L;
    }
    public static int YR_MIN_ATOM_QUALITY() {
        return (int)0L;
    }
    public static int YR_ATOMS_PER_RULE_WARNING_THRESHOLD() {
        return (int)10000L;
    }
    public static int YR_MAX_LOOP_NESTING() {
        return (int)4L;
    }
    public static int YR_MAX_LOOP_VARS() {
        return (int)2L;
    }
    public static int YR_MAX_INCLUDE_DEPTH() {
        return (int)16L;
    }
    public static int YR_MAX_STRING_MATCHES() {
        return (int)1000000L;
    }
    public static int YR_MAX_FUNCTION_ARGS() {
        return (int)128L;
    }
    public static int YR_MAX_OVERLOADED_FUNCTIONS() {
        return (int)10L;
    }
    public static int YR_MAX_FAST_RE_STACK() {
        return (int)300L;
    }
    public static int YR_STRING_CHAINING_THRESHOLD() {
        return (int)200L;
    }
    public static int YR_LEX_BUF_SIZE() {
        return (int)8192L;
    }
    public static int YR_MATCH_VERIFICATION_PROFILING_RATE() {
        return (int)1024L;
    }
    public static int RE_MAX_SPLIT_ID() {
        return (int)128L;
    }
    public static int RE_MAX_STACK() {
        return (int)1024L;
    }
    public static int YR_RE_SCAN_LIMIT() {
        return (int)4096L;
    }
    public static int RE_MAX_FIBERS() {
        return (int)1024L;
    }
    public static int _CTYPE_H() {
        return (int)1L;
    }
    public static int YR_ARENA_FILE_VERSION() {
        return (int)18L;
    }
    public static int SIZED_STRING_FLAGS_NO_CASE() {
        return (int)1L;
    }
    public static int SIZED_STRING_FLAGS_DOT_ALL() {
        return (int)2L;
    }
    public static int _TIME_H() {
        return (int)1L;
    }
    public static int _BITS_TIME_H() {
        return (int)1L;
    }
    public static int CLOCK_REALTIME() {
        return (int)0L;
    }
    public static int CLOCK_MONOTONIC() {
        return (int)1L;
    }
    public static int CLOCK_PROCESS_CPUTIME_ID() {
        return (int)2L;
    }
    public static int CLOCK_THREAD_CPUTIME_ID() {
        return (int)3L;
    }
    public static int CLOCK_MONOTONIC_RAW() {
        return (int)4L;
    }
    public static int CLOCK_REALTIME_COARSE() {
        return (int)5L;
    }
    public static int CLOCK_MONOTONIC_COARSE() {
        return (int)6L;
    }
    public static int CLOCK_BOOTTIME() {
        return (int)7L;
    }
    public static int CLOCK_REALTIME_ALARM() {
        return (int)8L;
    }
    public static int CLOCK_BOOTTIME_ALARM() {
        return (int)9L;
    }
    public static int CLOCK_TAI() {
        return (int)11L;
    }
    public static int TIMER_ABSTIME() {
        return (int)1L;
    }
    public static int __struct_tm_defined() {
        return (int)1L;
    }
    public static int __itimerspec_defined() {
        return (int)1L;
    }
    public static int TIME_UTC() {
        return (int)1L;
    }
    public static int _SYS_TIME_H() {
        return (int)1L;
    }
    public static int _PTHREAD_H() {
        return (int)1L;
    }
    public static int _SCHED_H() {
        return (int)1L;
    }
    public static int _BITS_SCHED_H() {
        return (int)1L;
    }
    public static int SCHED_OTHER() {
        return (int)0L;
    }
    public static int SCHED_FIFO() {
        return (int)1L;
    }
    public static int SCHED_RR() {
        return (int)2L;
    }
    public static int _BITS_TYPES_STRUCT_SCHED_PARAM() {
        return (int)1L;
    }
    public static int _BITS_CPU_SET_H() {
        return (int)1L;
    }
    public static int __CPU_SETSIZE() {
        return (int)1024L;
    }
    public static int PTHREAD_ONCE_INIT() {
        return (int)0L;
    }
    public static int RULE_FLAGS_PRIVATE() {
        return (int)1L;
    }
    public static int RULE_FLAGS_GLOBAL() {
        return (int)2L;
    }
    public static int RULE_FLAGS_NULL() {
        return (int)4L;
    }
    public static int RULE_FLAGS_DISABLED() {
        return (int)8L;
    }
    public static int STRING_FLAGS_REFERENCED() {
        return (int)1L;
    }
    public static int STRING_FLAGS_HEXADECIMAL() {
        return (int)2L;
    }
    public static int STRING_FLAGS_NO_CASE() {
        return (int)4L;
    }
    public static int STRING_FLAGS_ASCII() {
        return (int)8L;
    }
    public static int STRING_FLAGS_WIDE() {
        return (int)16L;
    }
    public static int STRING_FLAGS_REGEXP() {
        return (int)32L;
    }
    public static int STRING_FLAGS_FAST_REGEXP() {
        return (int)64L;
    }
    public static int STRING_FLAGS_FULL_WORD() {
        return (int)128L;
    }
    public static int STRING_FLAGS_ANONYMOUS() {
        return (int)256L;
    }
    public static int STRING_FLAGS_SINGLE_MATCH() {
        return (int)512L;
    }
    public static int STRING_FLAGS_LITERAL() {
        return (int)1024L;
    }
    public static int STRING_FLAGS_FITS_IN_ATOM() {
        return (int)2048L;
    }
    public static int STRING_FLAGS_LAST_IN_RULE() {
        return (int)4096L;
    }
    public static int STRING_FLAGS_CHAIN_PART() {
        return (int)8192L;
    }
    public static int STRING_FLAGS_CHAIN_TAIL() {
        return (int)16384L;
    }
    public static int STRING_FLAGS_FIXED_OFFSET() {
        return (int)32768L;
    }
    public static int STRING_FLAGS_GREEDY_REGEXP() {
        return (int)65536L;
    }
    public static int STRING_FLAGS_DOT_ALL() {
        return (int)131072L;
    }
    public static int STRING_FLAGS_DISABLED() {
        return (int)262144L;
    }
    public static int STRING_FLAGS_XOR() {
        return (int)524288L;
    }
    public static int STRING_FLAGS_PRIVATE() {
        return (int)1048576L;
    }
    public static int STRING_FLAGS_BASE64() {
        return (int)2097152L;
    }
    public static int STRING_FLAGS_BASE64_WIDE() {
        return (int)4194304L;
    }
    public static int META_TYPE_INTEGER() {
        return (int)1L;
    }
    public static int META_TYPE_STRING() {
        return (int)2L;
    }
    public static int META_TYPE_BOOLEAN() {
        return (int)3L;
    }
    public static int META_FLAGS_LAST_IN_RULE() {
        return (int)1L;
    }
    public static int EXTERNAL_VARIABLE_TYPE_NULL() {
        return (int)0L;
    }
    public static int EXTERNAL_VARIABLE_TYPE_FLOAT() {
        return (int)1L;
    }
    public static int EXTERNAL_VARIABLE_TYPE_INTEGER() {
        return (int)2L;
    }
    public static int EXTERNAL_VARIABLE_TYPE_BOOLEAN() {
        return (int)3L;
    }
    public static int EXTERNAL_VARIABLE_TYPE_STRING() {
        return (int)4L;
    }
    public static int EXTERNAL_VARIABLE_TYPE_MALLOC_STRING() {
        return (int)5L;
    }
    public static int RE_NODE_LITERAL() {
        return (int)1L;
    }
    public static int RE_NODE_MASKED_LITERAL() {
        return (int)2L;
    }
    public static int RE_NODE_ANY() {
        return (int)3L;
    }
    public static int RE_NODE_CONCAT() {
        return (int)4L;
    }
    public static int RE_NODE_ALT() {
        return (int)5L;
    }
    public static int RE_NODE_RANGE() {
        return (int)6L;
    }
    public static int RE_NODE_STAR() {
        return (int)7L;
    }
    public static int RE_NODE_PLUS() {
        return (int)8L;
    }
    public static int RE_NODE_CLASS() {
        return (int)9L;
    }
    public static int RE_NODE_WORD_CHAR() {
        return (int)10L;
    }
    public static int RE_NODE_NON_WORD_CHAR() {
        return (int)11L;
    }
    public static int RE_NODE_SPACE() {
        return (int)12L;
    }
    public static int RE_NODE_NON_SPACE() {
        return (int)13L;
    }
    public static int RE_NODE_DIGIT() {
        return (int)14L;
    }
    public static int RE_NODE_NON_DIGIT() {
        return (int)15L;
    }
    public static int RE_NODE_EMPTY() {
        return (int)16L;
    }
    public static int RE_NODE_ANCHOR_START() {
        return (int)17L;
    }
    public static int RE_NODE_ANCHOR_END() {
        return (int)18L;
    }
    public static int RE_NODE_WORD_BOUNDARY() {
        return (int)19L;
    }
    public static int RE_NODE_NON_WORD_BOUNDARY() {
        return (int)20L;
    }
    public static int RE_NODE_RANGE_ANY() {
        return (int)21L;
    }
    public static int RE_OPCODE_ANY() {
        return (int)160L;
    }
    public static int RE_OPCODE_LITERAL() {
        return (int)162L;
    }
    public static int RE_OPCODE_MASKED_LITERAL() {
        return (int)164L;
    }
    public static int RE_OPCODE_CLASS() {
        return (int)165L;
    }
    public static int RE_OPCODE_WORD_CHAR() {
        return (int)167L;
    }
    public static int RE_OPCODE_NON_WORD_CHAR() {
        return (int)168L;
    }
    public static int RE_OPCODE_SPACE() {
        return (int)169L;
    }
    public static int RE_OPCODE_NON_SPACE() {
        return (int)170L;
    }
    public static int RE_OPCODE_DIGIT() {
        return (int)171L;
    }
    public static int RE_OPCODE_NON_DIGIT() {
        return (int)172L;
    }
    public static int RE_OPCODE_MATCH() {
        return (int)173L;
    }
    public static int RE_OPCODE_MATCH_AT_END() {
        return (int)176L;
    }
    public static int RE_OPCODE_MATCH_AT_START() {
        return (int)177L;
    }
    public static int RE_OPCODE_WORD_BOUNDARY() {
        return (int)178L;
    }
    public static int RE_OPCODE_NON_WORD_BOUNDARY() {
        return (int)179L;
    }
    public static int RE_OPCODE_REPEAT_ANY_GREEDY() {
        return (int)180L;
    }
    public static int RE_OPCODE_REPEAT_ANY_UNGREEDY() {
        return (int)181L;
    }
    public static int RE_OPCODE_SPLIT_A() {
        return (int)192L;
    }
    public static int RE_OPCODE_SPLIT_B() {
        return (int)193L;
    }
    public static int RE_OPCODE_JUMP() {
        return (int)194L;
    }
    public static int RE_OPCODE_REPEAT_START_GREEDY() {
        return (int)195L;
    }
    public static int RE_OPCODE_REPEAT_END_GREEDY() {
        return (int)196L;
    }
    public static int RE_OPCODE_REPEAT_START_UNGREEDY() {
        return (int)197L;
    }
    public static int RE_OPCODE_REPEAT_END_UNGREEDY() {
        return (int)198L;
    }
    public static int RE_FLAGS_FAST_REGEXP() {
        return (int)2L;
    }
    public static int RE_FLAGS_BACKWARDS() {
        return (int)4L;
    }
    public static int RE_FLAGS_EXHAUSTIVE() {
        return (int)8L;
    }
    public static int RE_FLAGS_WIDE() {
        return (int)16L;
    }
    public static int RE_FLAGS_NO_CASE() {
        return (int)32L;
    }
    public static int RE_FLAGS_SCAN() {
        return (int)64L;
    }
    public static int RE_FLAGS_DOT_ALL() {
        return (int)128L;
    }
    public static int RE_FLAGS_GREEDY() {
        return (int)1024L;
    }
    public static int RE_FLAGS_UNGREEDY() {
        return (int)2048L;
    }
    public static int ATOM_TREE_LEAF() {
        return (int)1L;
    }
    public static int ATOM_TREE_AND() {
        return (int)2L;
    }
    public static int ATOM_TREE_OR() {
        return (int)3L;
    }
    public static int YR_AC_SLOT_OFFSET_BITS() {
        return (int)9L;
    }
    public static int YR_AC_MAX_TRANSITION_TABLE_SIZE() {
        return (int)8388608L;
    }
    public static int YR_AC_ROOT_STATE() {
        return (int)0L;
    }
    public static int YARA_ERROR_LEVEL_ERROR() {
        return (int)0L;
    }
    public static int YARA_ERROR_LEVEL_WARNING() {
        return (int)1L;
    }
    public static int EXPRESSION_TYPE_UNKNOWN() {
        return (int)0L;
    }
    public static int EXPRESSION_TYPE_BOOLEAN() {
        return (int)1L;
    }
    public static int EXPRESSION_TYPE_INTEGER() {
        return (int)2L;
    }
    public static int EXPRESSION_TYPE_STRING() {
        return (int)4L;
    }
    public static int EXPRESSION_TYPE_REGEXP() {
        return (int)8L;
    }
    public static int EXPRESSION_TYPE_OBJECT() {
        return (int)16L;
    }
    public static int EXPRESSION_TYPE_FLOAT() {
        return (int)32L;
    }
    public static int YR_NAMESPACES_TABLE() {
        return (int)0L;
    }
    public static int YR_RULES_TABLE() {
        return (int)1L;
    }
    public static int YR_METAS_TABLE() {
        return (int)2L;
    }
    public static int YR_STRINGS_TABLE() {
        return (int)3L;
    }
    public static int YR_EXTERNAL_VARIABLES_TABLE() {
        return (int)4L;
    }
    public static int YR_SZ_POOL() {
        return (int)5L;
    }
    public static int YR_CODE_SECTION() {
        return (int)6L;
    }
    public static int YR_RE_CODE_SECTION() {
        return (int)7L;
    }
    public static int YR_AC_TRANSITION_TABLE() {
        return (int)8L;
    }
    public static int YR_AC_STATE_MATCHES_TABLE() {
        return (int)9L;
    }
    public static int YR_AC_STATE_MATCHES_POOL() {
        return (int)10L;
    }
    public static int YR_SUMMARY_SECTION() {
        return (int)11L;
    }
    public static int YR_NUM_SECTIONS() {
        return (int)12L;
    }
    public static int YR_INTERNAL_LOOP_VARS() {
        return (int)3L;
    }
    public static int ERROR_SUCCESS() {
        return (int)0L;
    }
    public static int ERROR_INSUFICIENT_MEMORY() {
        return (int)1L;
    }
    public static int ERROR_INSUFFICIENT_MEMORY() {
        return (int)1L;
    }
    public static int ERROR_COULD_NOT_ATTACH_TO_PROCESS() {
        return (int)2L;
    }
    public static int ERROR_COULD_NOT_OPEN_FILE() {
        return (int)3L;
    }
    public static int ERROR_COULD_NOT_MAP_FILE() {
        return (int)4L;
    }
    public static int ERROR_INVALID_FILE() {
        return (int)6L;
    }
    public static int ERROR_CORRUPT_FILE() {
        return (int)7L;
    }
    public static int ERROR_UNSUPPORTED_FILE_VERSION() {
        return (int)8L;
    }
    public static int ERROR_INVALID_REGULAR_EXPRESSION() {
        return (int)9L;
    }
    public static int ERROR_INVALID_HEX_STRING() {
        return (int)10L;
    }
    public static int ERROR_SYNTAX_ERROR() {
        return (int)11L;
    }
    public static int ERROR_LOOP_NESTING_LIMIT_EXCEEDED() {
        return (int)12L;
    }
    public static int ERROR_DUPLICATED_LOOP_IDENTIFIER() {
        return (int)13L;
    }
    public static int ERROR_DUPLICATED_IDENTIFIER() {
        return (int)14L;
    }
    public static int ERROR_DUPLICATED_TAG_IDENTIFIER() {
        return (int)15L;
    }
    public static int ERROR_DUPLICATED_META_IDENTIFIER() {
        return (int)16L;
    }
    public static int ERROR_DUPLICATED_STRING_IDENTIFIER() {
        return (int)17L;
    }
    public static int ERROR_UNREFERENCED_STRING() {
        return (int)18L;
    }
    public static int ERROR_UNDEFINED_STRING() {
        return (int)19L;
    }
    public static int ERROR_UNDEFINED_IDENTIFIER() {
        return (int)20L;
    }
    public static int ERROR_MISPLACED_ANONYMOUS_STRING() {
        return (int)21L;
    }
    public static int ERROR_INCLUDES_CIRCULAR_REFERENCE() {
        return (int)22L;
    }
    public static int ERROR_INCLUDE_DEPTH_EXCEEDED() {
        return (int)23L;
    }
    public static int ERROR_WRONG_TYPE() {
        return (int)24L;
    }
    public static int ERROR_EXEC_STACK_OVERFLOW() {
        return (int)25L;
    }
    public static int ERROR_SCAN_TIMEOUT() {
        return (int)26L;
    }
    public static int ERROR_TOO_MANY_SCAN_THREADS() {
        return (int)27L;
    }
    public static int ERROR_CALLBACK_ERROR() {
        return (int)28L;
    }
    public static int ERROR_INVALID_ARGUMENT() {
        return (int)29L;
    }
    public static int ERROR_TOO_MANY_MATCHES() {
        return (int)30L;
    }
    public static int ERROR_INTERNAL_FATAL_ERROR() {
        return (int)31L;
    }
    public static int ERROR_NESTED_FOR_OF_LOOP() {
        return (int)32L;
    }
    public static int ERROR_INVALID_FIELD_NAME() {
        return (int)33L;
    }
    public static int ERROR_UNKNOWN_MODULE() {
        return (int)34L;
    }
    public static int ERROR_NOT_A_STRUCTURE() {
        return (int)35L;
    }
    public static int ERROR_NOT_INDEXABLE() {
        return (int)36L;
    }
    public static int ERROR_NOT_A_FUNCTION() {
        return (int)37L;
    }
    public static int ERROR_INVALID_FORMAT() {
        return (int)38L;
    }
    public static int ERROR_TOO_MANY_ARGUMENTS() {
        return (int)39L;
    }
    public static int ERROR_WRONG_ARGUMENTS() {
        return (int)40L;
    }
    public static int ERROR_WRONG_RETURN_TYPE() {
        return (int)41L;
    }
    public static int ERROR_DUPLICATED_STRUCTURE_MEMBER() {
        return (int)42L;
    }
    public static int ERROR_EMPTY_STRING() {
        return (int)43L;
    }
    public static int ERROR_DIVISION_BY_ZERO() {
        return (int)44L;
    }
    public static int ERROR_REGULAR_EXPRESSION_TOO_LARGE() {
        return (int)45L;
    }
    public static int ERROR_TOO_MANY_RE_FIBERS() {
        return (int)46L;
    }
    public static int ERROR_COULD_NOT_READ_PROCESS_MEMORY() {
        return (int)47L;
    }
    public static int ERROR_INVALID_EXTERNAL_VARIABLE_TYPE() {
        return (int)48L;
    }
    public static int ERROR_REGULAR_EXPRESSION_TOO_COMPLEX() {
        return (int)49L;
    }
    public static int ERROR_INVALID_MODULE_NAME() {
        return (int)50L;
    }
    public static int ERROR_TOO_MANY_STRINGS() {
        return (int)51L;
    }
    public static int ERROR_INTEGER_OVERFLOW() {
        return (int)52L;
    }
    public static int ERROR_CALLBACK_REQUIRED() {
        return (int)53L;
    }
    public static int ERROR_INVALID_OPERAND() {
        return (int)54L;
    }
    public static int ERROR_COULD_NOT_READ_FILE() {
        return (int)55L;
    }
    public static int ERROR_DUPLICATED_EXTERNAL_VARIABLE() {
        return (int)56L;
    }
    public static int ERROR_INVALID_MODULE_DATA() {
        return (int)57L;
    }
    public static int ERROR_WRITING_FILE() {
        return (int)58L;
    }
    public static int ERROR_INVALID_MODIFIER() {
        return (int)59L;
    }
    public static int ERROR_DUPLICATED_MODIFIER() {
        return (int)60L;
    }
    public static int ERROR_BLOCK_NOT_READY() {
        return (int)61L;
    }
    public static int YR_MAJOR_VERSION() {
        return (int)4L;
    }
    public static int YR_MINOR_VERSION() {
        return (int)1L;
    }
    public static int YR_MICRO_VERSION() {
        return (int)3L;
    }
    public static int YR_PARANOID_EXEC() {
        return (int)1L;
    }
    public static int DEFAULT_STACK_SIZE() {
        return (int)16384L;
    }
    public static int DEFAULT_MAX_STRINGS_PER_RULE() {
        return (int)10000L;
    }
    public static int DEFAULT_MAX_MATCH_DATA() {
        return (int)512L;
    }
    public static int _MATH_H() {
        return (int)1L;
    }
    public static int _BITS_LIBM_SIMD_DECL_STUBS_H() {
        return (int)1L;
    }
    public static int __FP_LOGB0_IS_MIN() {
        return (int)1L;
    }
    public static int __FP_LOGBNAN_IS_MIN() {
        return (int)1L;
    }
    public static int __MATH_DECLARING_DOUBLE() {
        return (int)1L;
    }
    public static int __MATH_DECLARING_FLOATN() {
        return (int)0L;
    }
    public static int __MATH_DECLARE_LDOUBLE() {
        return (int)1L;
    }
    public static int FP_NAN() {
        return (int)0L;
    }
    public static int FP_INFINITE() {
        return (int)1L;
    }
    public static int FP_ZERO() {
        return (int)2L;
    }
    public static int FP_SUBNORMAL() {
        return (int)3L;
    }
    public static int FP_NORMAL() {
        return (int)4L;
    }
    public static int MATH_ERRNO() {
        return (int)1L;
    }
    public static int MATH_ERREXCEPT() {
        return (int)2L;
    }
    public static int CALLBACK_MSG_RULE_MATCHING() {
        return (int)1L;
    }
    public static int CALLBACK_MSG_RULE_NOT_MATCHING() {
        return (int)2L;
    }
    public static int CALLBACK_MSG_SCAN_FINISHED() {
        return (int)3L;
    }
    public static int CALLBACK_MSG_IMPORT_MODULE() {
        return (int)4L;
    }
    public static int CALLBACK_MSG_MODULE_IMPORTED() {
        return (int)5L;
    }
    public static int CALLBACK_MSG_TOO_MANY_MATCHES() {
        return (int)6L;
    }
    public static int CALLBACK_CONTINUE() {
        return (int)0L;
    }
    public static int CALLBACK_ABORT() {
        return (int)1L;
    }
    public static int CALLBACK_ERROR() {
        return (int)2L;
    }
    public static int SCAN_FLAGS_FAST_MODE() {
        return (int)1L;
    }
    public static int SCAN_FLAGS_PROCESS_MEMORY() {
        return (int)2L;
    }
    public static int SCAN_FLAGS_NO_TRYCATCH() {
        return (int)4L;
    }
    public static int SCAN_FLAGS_REPORT_RULES_MATCHING() {
        return (int)8L;
    }
    public static int SCAN_FLAGS_REPORT_RULES_NOT_MATCHING() {
        return (int)16L;
    }
    public static int OP_ERROR() {
        return (int)0L;
    }
    public static int OP_HALT() {
        return (int)255L;
    }
    public static int OP_NOP() {
        return (int)254L;
    }
    public static int OP_AND() {
        return (int)1L;
    }
    public static int OP_OR() {
        return (int)2L;
    }
    public static int OP_NOT() {
        return (int)3L;
    }
    public static int OP_BITWISE_NOT() {
        return (int)4L;
    }
    public static int OP_BITWISE_AND() {
        return (int)5L;
    }
    public static int OP_BITWISE_OR() {
        return (int)6L;
    }
    public static int OP_BITWISE_XOR() {
        return (int)7L;
    }
    public static int OP_SHL() {
        return (int)8L;
    }
    public static int OP_SHR() {
        return (int)9L;
    }
    public static int OP_MOD() {
        return (int)10L;
    }
    public static int OP_INT_TO_DBL() {
        return (int)11L;
    }
    public static int OP_STR_TO_BOOL() {
        return (int)12L;
    }
    public static int OP_PUSH() {
        return (int)13L;
    }
    public static int OP_POP() {
        return (int)14L;
    }
    public static int OP_CALL() {
        return (int)15L;
    }
    public static int OP_OBJ_LOAD() {
        return (int)16L;
    }
    public static int OP_OBJ_VALUE() {
        return (int)17L;
    }
    public static int OP_OBJ_FIELD() {
        return (int)18L;
    }
    public static int OP_INDEX_ARRAY() {
        return (int)19L;
    }
    public static int OP_COUNT() {
        return (int)20L;
    }
    public static int OP_LENGTH() {
        return (int)21L;
    }
    public static int OP_FOUND() {
        return (int)22L;
    }
    public static int OP_FOUND_AT() {
        return (int)23L;
    }
    public static int OP_FOUND_IN() {
        return (int)24L;
    }
    public static int OP_OFFSET() {
        return (int)25L;
    }
    public static int OP_OF() {
        return (int)26L;
    }
    public static int OP_PUSH_RULE() {
        return (int)27L;
    }
    public static int OP_INIT_RULE() {
        return (int)28L;
    }
    public static int OP_MATCH_RULE() {
        return (int)29L;
    }
    public static int OP_INCR_M() {
        return (int)30L;
    }
    public static int OP_CLEAR_M() {
        return (int)31L;
    }
    public static int OP_ADD_M() {
        return (int)32L;
    }
    public static int OP_POP_M() {
        return (int)33L;
    }
    public static int OP_PUSH_M() {
        return (int)34L;
    }
    public static int OP_SET_M() {
        return (int)35L;
    }
    public static int OP_SWAPUNDEF() {
        return (int)36L;
    }
    public static int OP_FILESIZE() {
        return (int)37L;
    }
    public static int OP_ENTRYPOINT() {
        return (int)38L;
    }
    public static int OP_UNUSED() {
        return (int)39L;
    }
    public static int OP_MATCHES() {
        return (int)40L;
    }
    public static int OP_IMPORT() {
        return (int)41L;
    }
    public static int OP_LOOKUP_DICT() {
        return (int)42L;
    }
    public static int OP_JUNDEF() {
        return (int)43L;
    }
    public static int OP_JUNDEF_P() {
        return (int)44L;
    }
    public static int OP_JNUNDEF() {
        return (int)45L;
    }
    public static int OP_JNUNDEF_P() {
        return (int)46L;
    }
    public static int OP_JFALSE() {
        return (int)47L;
    }
    public static int OP_JFALSE_P() {
        return (int)48L;
    }
    public static int OP_JTRUE() {
        return (int)49L;
    }
    public static int OP_JTRUE_P() {
        return (int)50L;
    }
    public static int OP_JL_P() {
        return (int)51L;
    }
    public static int OP_JLE_P() {
        return (int)52L;
    }
    public static int OP_ITER_NEXT() {
        return (int)53L;
    }
    public static int OP_ITER_START_ARRAY() {
        return (int)54L;
    }
    public static int OP_ITER_START_DICT() {
        return (int)55L;
    }
    public static int OP_ITER_START_INT_RANGE() {
        return (int)56L;
    }
    public static int OP_ITER_START_INT_ENUM() {
        return (int)57L;
    }
    public static int OP_JZ() {
        return (int)58L;
    }
    public static int OP_JZ_P() {
        return (int)59L;
    }
    public static int OP_PUSH_8() {
        return (int)60L;
    }
    public static int OP_PUSH_16() {
        return (int)61L;
    }
    public static int OP_PUSH_32() {
        return (int)62L;
    }
    public static int OP_PUSH_U() {
        return (int)63L;
    }
    public static int OP_CONTAINS() {
        return (int)64L;
    }
    public static int OP_STARTSWITH() {
        return (int)65L;
    }
    public static int OP_ENDSWITH() {
        return (int)66L;
    }
    public static int OP_ICONTAINS() {
        return (int)67L;
    }
    public static int OP_ISTARTSWITH() {
        return (int)68L;
    }
    public static int OP_IENDSWITH() {
        return (int)69L;
    }
    public static int _OP_EQ() {
        return (int)0L;
    }
    public static int _OP_NEQ() {
        return (int)1L;
    }
    public static int _OP_LT() {
        return (int)2L;
    }
    public static int _OP_GT() {
        return (int)3L;
    }
    public static int _OP_LE() {
        return (int)4L;
    }
    public static int _OP_GE() {
        return (int)5L;
    }
    public static int _OP_ADD() {
        return (int)6L;
    }
    public static int _OP_SUB() {
        return (int)7L;
    }
    public static int _OP_MUL() {
        return (int)8L;
    }
    public static int _OP_DIV() {
        return (int)9L;
    }
    public static int _OP_MINUS() {
        return (int)10L;
    }
    public static int OP_INT_BEGIN() {
        return (int)100L;
    }
    public static int OP_DBL_BEGIN() {
        return (int)120L;
    }
    public static int OP_STR_BEGIN() {
        return (int)140L;
    }
    public static int OP_READ_INT() {
        return (int)240L;
    }
    public static int OBJECT_CREATE() {
        return (int)1L;
    }
    public static int OBJECT_TYPE_INTEGER() {
        return (int)1L;
    }
    public static int OBJECT_TYPE_STRING() {
        return (int)2L;
    }
    public static int OBJECT_TYPE_STRUCTURE() {
        return (int)3L;
    }
    public static int OBJECT_TYPE_ARRAY() {
        return (int)4L;
    }
    public static int OBJECT_TYPE_FUNCTION() {
        return (int)5L;
    }
    public static int OBJECT_TYPE_DICTIONARY() {
        return (int)6L;
    }
    public static int OBJECT_TYPE_FLOAT() {
        return (int)7L;
    }
    public static MethodHandle setjmp$MH() {
        return RuntimeHelper.requireNonNull(constants$0.setjmp$MH,"setjmp");
    }
    public static int setjmp ( Addressable __env) {
        var mh$ = setjmp$MH();
        try {
            return (int)mh$.invokeExact(__env);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __sigsetjmp$MH() {
        return RuntimeHelper.requireNonNull(constants$0.__sigsetjmp$MH,"__sigsetjmp");
    }
    public static int __sigsetjmp ( Addressable __env,  int __savemask) {
        var mh$ = __sigsetjmp$MH();
        try {
            return (int)mh$.invokeExact(__env, __savemask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _setjmp$MH() {
        return RuntimeHelper.requireNonNull(constants$0._setjmp$MH,"_setjmp");
    }
    public static int _setjmp ( Addressable __env) {
        var mh$ = _setjmp$MH();
        try {
            return (int)mh$.invokeExact(__env);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle longjmp$MH() {
        return RuntimeHelper.requireNonNull(constants$0.longjmp$MH,"longjmp");
    }
    public static void longjmp ( Addressable __env,  int __val) {
        var mh$ = longjmp$MH();
        try {
            mh$.invokeExact(__env, __val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _longjmp$MH() {
        return RuntimeHelper.requireNonNull(constants$0._longjmp$MH,"_longjmp");
    }
    public static void _longjmp ( Addressable __env,  int __val) {
        var mh$ = _longjmp$MH();
        try {
            mh$.invokeExact(__env, __val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle siglongjmp$MH() {
        return RuntimeHelper.requireNonNull(constants$0.siglongjmp$MH,"siglongjmp");
    }
    public static void siglongjmp ( Addressable __env,  int __val) {
        var mh$ = siglongjmp$MH();
        try {
            mh$.invokeExact(__env, __val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfShort __int16_t = Constants$root.C_SHORT$LAYOUT;
    public static OfInt __int32_t = Constants$root.C_INT$LAYOUT;
    public static OfLong __int64_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfShort __int_least16_t = Constants$root.C_SHORT$LAYOUT;
    public static OfInt __int_least32_t = Constants$root.C_INT$LAYOUT;
    public static OfLong __int_least64_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __quad_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __intmax_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __off_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __off64_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfInt __pid_t = Constants$root.C_INT$LAYOUT;
    public static OfLong __clock_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __time_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __suseconds_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __suseconds64_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfInt __daddr_t = Constants$root.C_INT$LAYOUT;
    public static OfInt __key_t = Constants$root.C_INT$LAYOUT;
    public static OfInt __clockid_t = Constants$root.C_INT$LAYOUT;
    public static OfAddress __timer_t = Constants$root.C_POINTER$LAYOUT;
    public static OfLong __blksize_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __blkcnt_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __blkcnt64_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __fsword_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __ssize_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __syscall_slong_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __loff_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfAddress __caddr_t = Constants$root.C_POINTER$LAYOUT;
    public static OfLong __intptr_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfInt __sig_atomic_t = Constants$root.C_INT$LAYOUT;
    public static OfLong off_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong ssize_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static MemoryLayout stdin$LAYOUT() {
        return constants$1.stdin$LAYOUT;
    }
    public static VarHandle stdin$VH() {
        return constants$1.stdin$VH;
    }
    public static MemorySegment stdin$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$1.stdin$SEGMENT,"stdin");
    }
    public static MemoryAddress stdin$get() {
        return (java.lang.foreign.MemoryAddress) constants$1.stdin$VH.get(RuntimeHelper.requireNonNull(constants$1.stdin$SEGMENT, "stdin"));
    }
    public static void stdin$set( MemoryAddress x) {
        constants$1.stdin$VH.set(RuntimeHelper.requireNonNull(constants$1.stdin$SEGMENT, "stdin"), x);
    }
    public static MemoryLayout stdout$LAYOUT() {
        return constants$1.stdout$LAYOUT;
    }
    public static VarHandle stdout$VH() {
        return constants$1.stdout$VH;
    }
    public static MemorySegment stdout$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$1.stdout$SEGMENT,"stdout");
    }
    public static MemoryAddress stdout$get() {
        return (java.lang.foreign.MemoryAddress) constants$1.stdout$VH.get(RuntimeHelper.requireNonNull(constants$1.stdout$SEGMENT, "stdout"));
    }
    public static void stdout$set( MemoryAddress x) {
        constants$1.stdout$VH.set(RuntimeHelper.requireNonNull(constants$1.stdout$SEGMENT, "stdout"), x);
    }
    public static MemoryLayout stderr$LAYOUT() {
        return constants$1.stderr$LAYOUT;
    }
    public static VarHandle stderr$VH() {
        return constants$1.stderr$VH;
    }
    public static MemorySegment stderr$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$1.stderr$SEGMENT,"stderr");
    }
    public static MemoryAddress stderr$get() {
        return (java.lang.foreign.MemoryAddress) constants$1.stderr$VH.get(RuntimeHelper.requireNonNull(constants$1.stderr$SEGMENT, "stderr"));
    }
    public static void stderr$set( MemoryAddress x) {
        constants$1.stderr$VH.set(RuntimeHelper.requireNonNull(constants$1.stderr$SEGMENT, "stderr"), x);
    }
    public static MethodHandle remove$MH() {
        return RuntimeHelper.requireNonNull(constants$1.remove$MH,"remove");
    }
    public static int remove ( Addressable __filename) {
        var mh$ = remove$MH();
        try {
            return (int)mh$.invokeExact(__filename);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rename$MH() {
        return RuntimeHelper.requireNonNull(constants$1.rename$MH,"rename");
    }
    public static int rename ( Addressable __old,  Addressable __new) {
        var mh$ = rename$MH();
        try {
            return (int)mh$.invokeExact(__old, __new);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle renameat$MH() {
        return RuntimeHelper.requireNonNull(constants$1.renameat$MH,"renameat");
    }
    public static int renameat ( int __oldfd,  Addressable __old,  int __newfd,  Addressable __new) {
        var mh$ = renameat$MH();
        try {
            return (int)mh$.invokeExact(__oldfd, __old, __newfd, __new);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fclose$MH() {
        return RuntimeHelper.requireNonNull(constants$2.fclose$MH,"fclose");
    }
    public static int fclose ( Addressable __stream) {
        var mh$ = fclose$MH();
        try {
            return (int)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle tmpfile$MH() {
        return RuntimeHelper.requireNonNull(constants$2.tmpfile$MH,"tmpfile");
    }
    public static MemoryAddress tmpfile () {
        var mh$ = tmpfile$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle tmpnam$MH() {
        return RuntimeHelper.requireNonNull(constants$2.tmpnam$MH,"tmpnam");
    }
    public static MemoryAddress tmpnam ( Addressable x0) {
        var mh$ = tmpnam$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle tmpnam_r$MH() {
        return RuntimeHelper.requireNonNull(constants$2.tmpnam_r$MH,"tmpnam_r");
    }
    public static MemoryAddress tmpnam_r ( Addressable __s) {
        var mh$ = tmpnam_r$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle tempnam$MH() {
        return RuntimeHelper.requireNonNull(constants$2.tempnam$MH,"tempnam");
    }
    public static MemoryAddress tempnam ( Addressable __dir,  Addressable __pfx) {
        var mh$ = tempnam$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__dir, __pfx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fflush$MH() {
        return RuntimeHelper.requireNonNull(constants$2.fflush$MH,"fflush");
    }
    public static int fflush ( Addressable __stream) {
        var mh$ = fflush$MH();
        try {
            return (int)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fflush_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$3.fflush_unlocked$MH,"fflush_unlocked");
    }
    public static int fflush_unlocked ( Addressable __stream) {
        var mh$ = fflush_unlocked$MH();
        try {
            return (int)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fopen$MH() {
        return RuntimeHelper.requireNonNull(constants$3.fopen$MH,"fopen");
    }
    public static MemoryAddress fopen ( Addressable __filename,  Addressable __modes) {
        var mh$ = fopen$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__filename, __modes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle freopen$MH() {
        return RuntimeHelper.requireNonNull(constants$3.freopen$MH,"freopen");
    }
    public static MemoryAddress freopen ( Addressable __filename,  Addressable __modes,  Addressable __stream) {
        var mh$ = freopen$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__filename, __modes, __stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fdopen$MH() {
        return RuntimeHelper.requireNonNull(constants$3.fdopen$MH,"fdopen");
    }
    public static MemoryAddress fdopen ( int __fd,  Addressable __modes) {
        var mh$ = fdopen$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__fd, __modes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fmemopen$MH() {
        return RuntimeHelper.requireNonNull(constants$3.fmemopen$MH,"fmemopen");
    }
    public static MemoryAddress fmemopen ( Addressable __s,  long __len,  Addressable __modes) {
        var mh$ = fmemopen$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__s, __len, __modes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle open_memstream$MH() {
        return RuntimeHelper.requireNonNull(constants$3.open_memstream$MH,"open_memstream");
    }
    public static MemoryAddress open_memstream ( Addressable __bufloc,  Addressable __sizeloc) {
        var mh$ = open_memstream$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__bufloc, __sizeloc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setbuf$MH() {
        return RuntimeHelper.requireNonNull(constants$4.setbuf$MH,"setbuf");
    }
    public static void setbuf ( Addressable __stream,  Addressable __buf) {
        var mh$ = setbuf$MH();
        try {
            mh$.invokeExact(__stream, __buf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setvbuf$MH() {
        return RuntimeHelper.requireNonNull(constants$4.setvbuf$MH,"setvbuf");
    }
    public static int setvbuf ( Addressable __stream,  Addressable __buf,  int __modes,  long __n) {
        var mh$ = setvbuf$MH();
        try {
            return (int)mh$.invokeExact(__stream, __buf, __modes, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setbuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$4.setbuffer$MH,"setbuffer");
    }
    public static void setbuffer ( Addressable __stream,  Addressable __buf,  long __size) {
        var mh$ = setbuffer$MH();
        try {
            mh$.invokeExact(__stream, __buf, __size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setlinebuf$MH() {
        return RuntimeHelper.requireNonNull(constants$4.setlinebuf$MH,"setlinebuf");
    }
    public static void setlinebuf ( Addressable __stream) {
        var mh$ = setlinebuf$MH();
        try {
            mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$4.fprintf$MH,"fprintf");
    }
    public static int fprintf ( Addressable __stream,  Addressable __format, Object... x2) {
        var mh$ = fprintf$MH();
        try {
            return (int)mh$.invokeExact(__stream, __format, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle printf$MH() {
        return RuntimeHelper.requireNonNull(constants$4.printf$MH,"printf");
    }
    public static int printf ( Addressable __format, Object... x1) {
        var mh$ = printf$MH();
        try {
            return (int)mh$.invokeExact(__format, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$5.sprintf$MH,"sprintf");
    }
    public static int sprintf ( Addressable __s,  Addressable __format, Object... x2) {
        var mh$ = sprintf$MH();
        try {
            return (int)mh$.invokeExact(__s, __format, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vfprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$5.vfprintf$MH,"vfprintf");
    }
    public static int vfprintf ( Addressable __s,  Addressable __format,  Addressable __arg) {
        var mh$ = vfprintf$MH();
        try {
            return (int)mh$.invokeExact(__s, __format, __arg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$5.vprintf$MH,"vprintf");
    }
    public static int vprintf ( Addressable __format,  Addressable __arg) {
        var mh$ = vprintf$MH();
        try {
            return (int)mh$.invokeExact(__format, __arg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vsprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$5.vsprintf$MH,"vsprintf");
    }
    public static int vsprintf ( Addressable __s,  Addressable __format,  Addressable __arg) {
        var mh$ = vsprintf$MH();
        try {
            return (int)mh$.invokeExact(__s, __format, __arg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle snprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$5.snprintf$MH,"snprintf");
    }
    public static int snprintf ( Addressable __s,  long __maxlen,  Addressable __format, Object... x3) {
        var mh$ = snprintf$MH();
        try {
            return (int)mh$.invokeExact(__s, __maxlen, __format, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vsnprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$5.vsnprintf$MH,"vsnprintf");
    }
    public static int vsnprintf ( Addressable __s,  long __maxlen,  Addressable __format,  Addressable __arg) {
        var mh$ = vsnprintf$MH();
        try {
            return (int)mh$.invokeExact(__s, __maxlen, __format, __arg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vdprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$6.vdprintf$MH,"vdprintf");
    }
    public static int vdprintf ( int __fd,  Addressable __fmt,  Addressable __arg) {
        var mh$ = vdprintf$MH();
        try {
            return (int)mh$.invokeExact(__fd, __fmt, __arg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle dprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$6.dprintf$MH,"dprintf");
    }
    public static int dprintf ( int __fd,  Addressable __fmt, Object... x2) {
        var mh$ = dprintf$MH();
        try {
            return (int)mh$.invokeExact(__fd, __fmt, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fscanf$MH() {
        return RuntimeHelper.requireNonNull(constants$6.fscanf$MH,"fscanf");
    }
    public static int fscanf ( Addressable __stream,  Addressable __format, Object... x2) {
        var mh$ = fscanf$MH();
        try {
            return (int)mh$.invokeExact(__stream, __format, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle scanf$MH() {
        return RuntimeHelper.requireNonNull(constants$6.scanf$MH,"scanf");
    }
    public static int scanf ( Addressable __format, Object... x1) {
        var mh$ = scanf$MH();
        try {
            return (int)mh$.invokeExact(__format, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sscanf$MH() {
        return RuntimeHelper.requireNonNull(constants$6.sscanf$MH,"sscanf");
    }
    public static int sscanf ( Addressable __s,  Addressable __format, Object... x2) {
        var mh$ = sscanf$MH();
        try {
            return (int)mh$.invokeExact(__s, __format, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfFloat _Float32 = Constants$root.C_FLOAT$LAYOUT;
    public static OfDouble _Float64 = Constants$root.C_DOUBLE$LAYOUT;
    public static OfDouble _Float32x = Constants$root.C_DOUBLE$LAYOUT;
    public static MethodHandle vfscanf$MH() {
        return RuntimeHelper.requireNonNull(constants$6.vfscanf$MH,"vfscanf");
    }
    public static int vfscanf ( Addressable __s,  Addressable __format,  Addressable __arg) {
        var mh$ = vfscanf$MH();
        try {
            return (int)mh$.invokeExact(__s, __format, __arg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vscanf$MH() {
        return RuntimeHelper.requireNonNull(constants$7.vscanf$MH,"vscanf");
    }
    public static int vscanf ( Addressable __format,  Addressable __arg) {
        var mh$ = vscanf$MH();
        try {
            return (int)mh$.invokeExact(__format, __arg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vsscanf$MH() {
        return RuntimeHelper.requireNonNull(constants$7.vsscanf$MH,"vsscanf");
    }
    public static int vsscanf ( Addressable __s,  Addressable __format,  Addressable __arg) {
        var mh$ = vsscanf$MH();
        try {
            return (int)mh$.invokeExact(__s, __format, __arg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fgetc$MH() {
        return RuntimeHelper.requireNonNull(constants$7.fgetc$MH,"fgetc");
    }
    public static int fgetc ( Addressable __stream) {
        var mh$ = fgetc$MH();
        try {
            return (int)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getc$MH() {
        return RuntimeHelper.requireNonNull(constants$7.getc$MH,"getc");
    }
    public static int getc ( Addressable __stream) {
        var mh$ = getc$MH();
        try {
            return (int)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getchar$MH() {
        return RuntimeHelper.requireNonNull(constants$7.getchar$MH,"getchar");
    }
    public static int getchar () {
        var mh$ = getchar$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getc_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$7.getc_unlocked$MH,"getc_unlocked");
    }
    public static int getc_unlocked ( Addressable __stream) {
        var mh$ = getc_unlocked$MH();
        try {
            return (int)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getchar_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$8.getchar_unlocked$MH,"getchar_unlocked");
    }
    public static int getchar_unlocked () {
        var mh$ = getchar_unlocked$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fgetc_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$8.fgetc_unlocked$MH,"fgetc_unlocked");
    }
    public static int fgetc_unlocked ( Addressable __stream) {
        var mh$ = fgetc_unlocked$MH();
        try {
            return (int)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fputc$MH() {
        return RuntimeHelper.requireNonNull(constants$8.fputc$MH,"fputc");
    }
    public static int fputc ( int __c,  Addressable __stream) {
        var mh$ = fputc$MH();
        try {
            return (int)mh$.invokeExact(__c, __stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle putc$MH() {
        return RuntimeHelper.requireNonNull(constants$8.putc$MH,"putc");
    }
    public static int putc ( int __c,  Addressable __stream) {
        var mh$ = putc$MH();
        try {
            return (int)mh$.invokeExact(__c, __stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle putchar$MH() {
        return RuntimeHelper.requireNonNull(constants$8.putchar$MH,"putchar");
    }
    public static int putchar ( int __c) {
        var mh$ = putchar$MH();
        try {
            return (int)mh$.invokeExact(__c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fputc_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$8.fputc_unlocked$MH,"fputc_unlocked");
    }
    public static int fputc_unlocked ( int __c,  Addressable __stream) {
        var mh$ = fputc_unlocked$MH();
        try {
            return (int)mh$.invokeExact(__c, __stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle putc_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$9.putc_unlocked$MH,"putc_unlocked");
    }
    public static int putc_unlocked ( int __c,  Addressable __stream) {
        var mh$ = putc_unlocked$MH();
        try {
            return (int)mh$.invokeExact(__c, __stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle putchar_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$9.putchar_unlocked$MH,"putchar_unlocked");
    }
    public static int putchar_unlocked ( int __c) {
        var mh$ = putchar_unlocked$MH();
        try {
            return (int)mh$.invokeExact(__c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getw$MH() {
        return RuntimeHelper.requireNonNull(constants$9.getw$MH,"getw");
    }
    public static int getw ( Addressable __stream) {
        var mh$ = getw$MH();
        try {
            return (int)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle putw$MH() {
        return RuntimeHelper.requireNonNull(constants$9.putw$MH,"putw");
    }
    public static int putw ( int __w,  Addressable __stream) {
        var mh$ = putw$MH();
        try {
            return (int)mh$.invokeExact(__w, __stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fgets$MH() {
        return RuntimeHelper.requireNonNull(constants$9.fgets$MH,"fgets");
    }
    public static MemoryAddress fgets ( Addressable __s,  int __n,  Addressable __stream) {
        var mh$ = fgets$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__s, __n, __stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __getdelim$MH() {
        return RuntimeHelper.requireNonNull(constants$9.__getdelim$MH,"__getdelim");
    }
    public static long __getdelim ( Addressable __lineptr,  Addressable __n,  int __delimiter,  Addressable __stream) {
        var mh$ = __getdelim$MH();
        try {
            return (long)mh$.invokeExact(__lineptr, __n, __delimiter, __stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getdelim$MH() {
        return RuntimeHelper.requireNonNull(constants$10.getdelim$MH,"getdelim");
    }
    public static long getdelim ( Addressable __lineptr,  Addressable __n,  int __delimiter,  Addressable __stream) {
        var mh$ = getdelim$MH();
        try {
            return (long)mh$.invokeExact(__lineptr, __n, __delimiter, __stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getline$MH() {
        return RuntimeHelper.requireNonNull(constants$10.getline$MH,"getline");
    }
    public static long getline ( Addressable __lineptr,  Addressable __n,  Addressable __stream) {
        var mh$ = getline$MH();
        try {
            return (long)mh$.invokeExact(__lineptr, __n, __stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fputs$MH() {
        return RuntimeHelper.requireNonNull(constants$10.fputs$MH,"fputs");
    }
    public static int fputs ( Addressable __s,  Addressable __stream) {
        var mh$ = fputs$MH();
        try {
            return (int)mh$.invokeExact(__s, __stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle puts$MH() {
        return RuntimeHelper.requireNonNull(constants$10.puts$MH,"puts");
    }
    public static int puts ( Addressable __s) {
        var mh$ = puts$MH();
        try {
            return (int)mh$.invokeExact(__s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ungetc$MH() {
        return RuntimeHelper.requireNonNull(constants$10.ungetc$MH,"ungetc");
    }
    public static int ungetc ( int __c,  Addressable __stream) {
        var mh$ = ungetc$MH();
        try {
            return (int)mh$.invokeExact(__c, __stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fread$MH() {
        return RuntimeHelper.requireNonNull(constants$10.fread$MH,"fread");
    }
    public static long fread ( Addressable __ptr,  long __size,  long __n,  Addressable __stream) {
        var mh$ = fread$MH();
        try {
            return (long)mh$.invokeExact(__ptr, __size, __n, __stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fwrite$MH() {
        return RuntimeHelper.requireNonNull(constants$11.fwrite$MH,"fwrite");
    }
    public static long fwrite ( Addressable __ptr,  long __size,  long __n,  Addressable __s) {
        var mh$ = fwrite$MH();
        try {
            return (long)mh$.invokeExact(__ptr, __size, __n, __s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fread_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$11.fread_unlocked$MH,"fread_unlocked");
    }
    public static long fread_unlocked ( Addressable __ptr,  long __size,  long __n,  Addressable __stream) {
        var mh$ = fread_unlocked$MH();
        try {
            return (long)mh$.invokeExact(__ptr, __size, __n, __stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fwrite_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$11.fwrite_unlocked$MH,"fwrite_unlocked");
    }
    public static long fwrite_unlocked ( Addressable __ptr,  long __size,  long __n,  Addressable __stream) {
        var mh$ = fwrite_unlocked$MH();
        try {
            return (long)mh$.invokeExact(__ptr, __size, __n, __stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fseek$MH() {
        return RuntimeHelper.requireNonNull(constants$11.fseek$MH,"fseek");
    }
    public static int fseek ( Addressable __stream,  long __off,  int __whence) {
        var mh$ = fseek$MH();
        try {
            return (int)mh$.invokeExact(__stream, __off, __whence);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ftell$MH() {
        return RuntimeHelper.requireNonNull(constants$11.ftell$MH,"ftell");
    }
    public static long ftell ( Addressable __stream) {
        var mh$ = ftell$MH();
        try {
            return (long)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rewind$MH() {
        return RuntimeHelper.requireNonNull(constants$11.rewind$MH,"rewind");
    }
    public static void rewind ( Addressable __stream) {
        var mh$ = rewind$MH();
        try {
            mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fseeko$MH() {
        return RuntimeHelper.requireNonNull(constants$12.fseeko$MH,"fseeko");
    }
    public static int fseeko ( Addressable __stream,  long __off,  int __whence) {
        var mh$ = fseeko$MH();
        try {
            return (int)mh$.invokeExact(__stream, __off, __whence);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ftello$MH() {
        return RuntimeHelper.requireNonNull(constants$12.ftello$MH,"ftello");
    }
    public static long ftello ( Addressable __stream) {
        var mh$ = ftello$MH();
        try {
            return (long)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fgetpos$MH() {
        return RuntimeHelper.requireNonNull(constants$12.fgetpos$MH,"fgetpos");
    }
    public static int fgetpos ( Addressable __stream,  Addressable __pos) {
        var mh$ = fgetpos$MH();
        try {
            return (int)mh$.invokeExact(__stream, __pos);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fsetpos$MH() {
        return RuntimeHelper.requireNonNull(constants$12.fsetpos$MH,"fsetpos");
    }
    public static int fsetpos ( Addressable __stream,  Addressable __pos) {
        var mh$ = fsetpos$MH();
        try {
            return (int)mh$.invokeExact(__stream, __pos);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clearerr$MH() {
        return RuntimeHelper.requireNonNull(constants$12.clearerr$MH,"clearerr");
    }
    public static void clearerr ( Addressable __stream) {
        var mh$ = clearerr$MH();
        try {
            mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle feof$MH() {
        return RuntimeHelper.requireNonNull(constants$12.feof$MH,"feof");
    }
    public static int feof ( Addressable __stream) {
        var mh$ = feof$MH();
        try {
            return (int)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ferror$MH() {
        return RuntimeHelper.requireNonNull(constants$13.ferror$MH,"ferror");
    }
    public static int ferror ( Addressable __stream) {
        var mh$ = ferror$MH();
        try {
            return (int)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clearerr_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$13.clearerr_unlocked$MH,"clearerr_unlocked");
    }
    public static void clearerr_unlocked ( Addressable __stream) {
        var mh$ = clearerr_unlocked$MH();
        try {
            mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle feof_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$13.feof_unlocked$MH,"feof_unlocked");
    }
    public static int feof_unlocked ( Addressable __stream) {
        var mh$ = feof_unlocked$MH();
        try {
            return (int)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ferror_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$13.ferror_unlocked$MH,"ferror_unlocked");
    }
    public static int ferror_unlocked ( Addressable __stream) {
        var mh$ = ferror_unlocked$MH();
        try {
            return (int)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle perror$MH() {
        return RuntimeHelper.requireNonNull(constants$13.perror$MH,"perror");
    }
    public static void perror ( Addressable __s) {
        var mh$ = perror$MH();
        try {
            mh$.invokeExact(__s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fileno$MH() {
        return RuntimeHelper.requireNonNull(constants$13.fileno$MH,"fileno");
    }
    public static int fileno ( Addressable __stream) {
        var mh$ = fileno$MH();
        try {
            return (int)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fileno_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$14.fileno_unlocked$MH,"fileno_unlocked");
    }
    public static int fileno_unlocked ( Addressable __stream) {
        var mh$ = fileno_unlocked$MH();
        try {
            return (int)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pclose$MH() {
        return RuntimeHelper.requireNonNull(constants$14.pclose$MH,"pclose");
    }
    public static int pclose ( Addressable __stream) {
        var mh$ = pclose$MH();
        try {
            return (int)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle popen$MH() {
        return RuntimeHelper.requireNonNull(constants$14.popen$MH,"popen");
    }
    public static MemoryAddress popen ( Addressable __command,  Addressable __modes) {
        var mh$ = popen$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__command, __modes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ctermid$MH() {
        return RuntimeHelper.requireNonNull(constants$14.ctermid$MH,"ctermid");
    }
    public static MemoryAddress ctermid ( Addressable __s) {
        var mh$ = ctermid$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle flockfile$MH() {
        return RuntimeHelper.requireNonNull(constants$14.flockfile$MH,"flockfile");
    }
    public static void flockfile ( Addressable __stream) {
        var mh$ = flockfile$MH();
        try {
            mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ftrylockfile$MH() {
        return RuntimeHelper.requireNonNull(constants$14.ftrylockfile$MH,"ftrylockfile");
    }
    public static int ftrylockfile ( Addressable __stream) {
        var mh$ = ftrylockfile$MH();
        try {
            return (int)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle funlockfile$MH() {
        return RuntimeHelper.requireNonNull(constants$15.funlockfile$MH,"funlockfile");
    }
    public static void funlockfile ( Addressable __stream) {
        var mh$ = funlockfile$MH();
        try {
            mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __uflow$MH() {
        return RuntimeHelper.requireNonNull(constants$15.__uflow$MH,"__uflow");
    }
    public static int __uflow ( Addressable x0) {
        var mh$ = __uflow$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __overflow$MH() {
        return RuntimeHelper.requireNonNull(constants$15.__overflow$MH,"__overflow");
    }
    public static int __overflow ( Addressable x0,  int x1) {
        var mh$ = __overflow$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __assert_fail$MH() {
        return RuntimeHelper.requireNonNull(constants$15.__assert_fail$MH,"__assert_fail");
    }
    public static void __assert_fail ( Addressable __assertion,  Addressable __file,  int __line,  Addressable __function) {
        var mh$ = __assert_fail$MH();
        try {
            mh$.invokeExact(__assertion, __file, __line, __function);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __assert_perror_fail$MH() {
        return RuntimeHelper.requireNonNull(constants$15.__assert_perror_fail$MH,"__assert_perror_fail");
    }
    public static void __assert_perror_fail ( int __errnum,  Addressable __file,  int __line,  Addressable __function) {
        var mh$ = __assert_perror_fail$MH();
        try {
            mh$.invokeExact(__errnum, __file, __line, __function);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __assert$MH() {
        return RuntimeHelper.requireNonNull(constants$15.__assert$MH,"__assert");
    }
    public static void __assert ( Addressable __assertion,  Addressable __file,  int __line) {
        var mh$ = __assert$MH();
        try {
            mh$.invokeExact(__assertion, __file, __line);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfInt wchar_t = Constants$root.C_INT$LAYOUT;
    public static MethodHandle __ctype_get_mb_cur_max$MH() {
        return RuntimeHelper.requireNonNull(constants$16.__ctype_get_mb_cur_max$MH,"__ctype_get_mb_cur_max");
    }
    public static long __ctype_get_mb_cur_max () {
        var mh$ = __ctype_get_mb_cur_max$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle atof$MH() {
        return RuntimeHelper.requireNonNull(constants$16.atof$MH,"atof");
    }
    public static double atof ( Addressable __nptr) {
        var mh$ = atof$MH();
        try {
            return (double)mh$.invokeExact(__nptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle atoi$MH() {
        return RuntimeHelper.requireNonNull(constants$16.atoi$MH,"atoi");
    }
    public static int atoi ( Addressable __nptr) {
        var mh$ = atoi$MH();
        try {
            return (int)mh$.invokeExact(__nptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle atol$MH() {
        return RuntimeHelper.requireNonNull(constants$16.atol$MH,"atol");
    }
    public static long atol ( Addressable __nptr) {
        var mh$ = atol$MH();
        try {
            return (long)mh$.invokeExact(__nptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle atoll$MH() {
        return RuntimeHelper.requireNonNull(constants$16.atoll$MH,"atoll");
    }
    public static long atoll ( Addressable __nptr) {
        var mh$ = atoll$MH();
        try {
            return (long)mh$.invokeExact(__nptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtod$MH() {
        return RuntimeHelper.requireNonNull(constants$16.strtod$MH,"strtod");
    }
    public static double strtod ( Addressable __nptr,  Addressable __endptr) {
        var mh$ = strtod$MH();
        try {
            return (double)mh$.invokeExact(__nptr, __endptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtof$MH() {
        return RuntimeHelper.requireNonNull(constants$17.strtof$MH,"strtof");
    }
    public static float strtof ( Addressable __nptr,  Addressable __endptr) {
        var mh$ = strtof$MH();
        try {
            return (float)mh$.invokeExact(__nptr, __endptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtol$MH() {
        return RuntimeHelper.requireNonNull(constants$17.strtol$MH,"strtol");
    }
    public static long strtol ( Addressable __nptr,  Addressable __endptr,  int __base) {
        var mh$ = strtol$MH();
        try {
            return (long)mh$.invokeExact(__nptr, __endptr, __base);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtoul$MH() {
        return RuntimeHelper.requireNonNull(constants$17.strtoul$MH,"strtoul");
    }
    public static long strtoul ( Addressable __nptr,  Addressable __endptr,  int __base) {
        var mh$ = strtoul$MH();
        try {
            return (long)mh$.invokeExact(__nptr, __endptr, __base);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtoq$MH() {
        return RuntimeHelper.requireNonNull(constants$17.strtoq$MH,"strtoq");
    }
    public static long strtoq ( Addressable __nptr,  Addressable __endptr,  int __base) {
        var mh$ = strtoq$MH();
        try {
            return (long)mh$.invokeExact(__nptr, __endptr, __base);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtouq$MH() {
        return RuntimeHelper.requireNonNull(constants$17.strtouq$MH,"strtouq");
    }
    public static long strtouq ( Addressable __nptr,  Addressable __endptr,  int __base) {
        var mh$ = strtouq$MH();
        try {
            return (long)mh$.invokeExact(__nptr, __endptr, __base);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtoll$MH() {
        return RuntimeHelper.requireNonNull(constants$17.strtoll$MH,"strtoll");
    }
    public static long strtoll ( Addressable __nptr,  Addressable __endptr,  int __base) {
        var mh$ = strtoll$MH();
        try {
            return (long)mh$.invokeExact(__nptr, __endptr, __base);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtoull$MH() {
        return RuntimeHelper.requireNonNull(constants$18.strtoull$MH,"strtoull");
    }
    public static long strtoull ( Addressable __nptr,  Addressable __endptr,  int __base) {
        var mh$ = strtoull$MH();
        try {
            return (long)mh$.invokeExact(__nptr, __endptr, __base);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle l64a$MH() {
        return RuntimeHelper.requireNonNull(constants$18.l64a$MH,"l64a");
    }
    public static MemoryAddress l64a ( long __n) {
        var mh$ = l64a$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle a64l$MH() {
        return RuntimeHelper.requireNonNull(constants$18.a64l$MH,"a64l");
    }
    public static long a64l ( Addressable __s) {
        var mh$ = a64l$MH();
        try {
            return (long)mh$.invokeExact(__s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfLong quad_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong loff_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfInt pid_t = Constants$root.C_INT$LAYOUT;
    public static OfInt daddr_t = Constants$root.C_INT$LAYOUT;
    public static OfAddress caddr_t = Constants$root.C_POINTER$LAYOUT;
    public static OfInt key_t = Constants$root.C_INT$LAYOUT;
    public static OfLong clock_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfInt clockid_t = Constants$root.C_INT$LAYOUT;
    public static OfLong time_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfAddress timer_t = Constants$root.C_POINTER$LAYOUT;
    public static OfShort int16_t = Constants$root.C_SHORT$LAYOUT;
    public static OfInt int32_t = Constants$root.C_INT$LAYOUT;
    public static OfLong int64_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong register_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static MethodHandle __bswap_16$MH() {
        return RuntimeHelper.requireNonNull(constants$18.__bswap_16$MH,"__bswap_16");
    }
    public static short __bswap_16 ( short __bsx) {
        var mh$ = __bswap_16$MH();
        try {
            return (short)mh$.invokeExact(__bsx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __bswap_32$MH() {
        return RuntimeHelper.requireNonNull(constants$18.__bswap_32$MH,"__bswap_32");
    }
    public static int __bswap_32 ( int __bsx) {
        var mh$ = __bswap_32$MH();
        try {
            return (int)mh$.invokeExact(__bsx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __bswap_64$MH() {
        return RuntimeHelper.requireNonNull(constants$18.__bswap_64$MH,"__bswap_64");
    }
    public static long __bswap_64 ( long __bsx) {
        var mh$ = __bswap_64$MH();
        try {
            return (long)mh$.invokeExact(__bsx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __uint16_identity$MH() {
        return RuntimeHelper.requireNonNull(constants$19.__uint16_identity$MH,"__uint16_identity");
    }
    public static short __uint16_identity ( short __x) {
        var mh$ = __uint16_identity$MH();
        try {
            return (short)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __uint32_identity$MH() {
        return RuntimeHelper.requireNonNull(constants$19.__uint32_identity$MH,"__uint32_identity");
    }
    public static int __uint32_identity ( int __x) {
        var mh$ = __uint32_identity$MH();
        try {
            return (int)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __uint64_identity$MH() {
        return RuntimeHelper.requireNonNull(constants$19.__uint64_identity$MH,"__uint64_identity");
    }
    public static long __uint64_identity ( long __x) {
        var mh$ = __uint64_identity$MH();
        try {
            return (long)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfLong suseconds_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __fd_mask = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong fd_mask = Constants$root.C_LONG_LONG$LAYOUT;
    public static MethodHandle select$MH() {
        return RuntimeHelper.requireNonNull(constants$19.select$MH,"select");
    }
    public static int select ( int __nfds,  Addressable __readfds,  Addressable __writefds,  Addressable __exceptfds,  Addressable __timeout) {
        var mh$ = select$MH();
        try {
            return (int)mh$.invokeExact(__nfds, __readfds, __writefds, __exceptfds, __timeout);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pselect$MH() {
        return RuntimeHelper.requireNonNull(constants$19.pselect$MH,"pselect");
    }
    public static int pselect ( int __nfds,  Addressable __readfds,  Addressable __writefds,  Addressable __exceptfds,  Addressable __timeout,  Addressable __sigmask) {
        var mh$ = pselect$MH();
        try {
            return (int)mh$.invokeExact(__nfds, __readfds, __writefds, __exceptfds, __timeout, __sigmask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfLong blksize_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong blkcnt_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfInt pthread_once_t = Constants$root.C_INT$LAYOUT;
    public static OfInt pthread_spinlock_t = Constants$root.C_INT$LAYOUT;
    public static MethodHandle random$MH() {
        return RuntimeHelper.requireNonNull(constants$19.random$MH,"random");
    }
    public static long random () {
        var mh$ = random$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle srandom$MH() {
        return RuntimeHelper.requireNonNull(constants$20.srandom$MH,"srandom");
    }
    public static void srandom ( int __seed) {
        var mh$ = srandom$MH();
        try {
            mh$.invokeExact(__seed);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle initstate$MH() {
        return RuntimeHelper.requireNonNull(constants$20.initstate$MH,"initstate");
    }
    public static MemoryAddress initstate ( int __seed,  Addressable __statebuf,  long __statelen) {
        var mh$ = initstate$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__seed, __statebuf, __statelen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setstate$MH() {
        return RuntimeHelper.requireNonNull(constants$20.setstate$MH,"setstate");
    }
    public static MemoryAddress setstate ( Addressable __statebuf) {
        var mh$ = setstate$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__statebuf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle random_r$MH() {
        return RuntimeHelper.requireNonNull(constants$20.random_r$MH,"random_r");
    }
    public static int random_r ( Addressable __buf,  Addressable __result) {
        var mh$ = random_r$MH();
        try {
            return (int)mh$.invokeExact(__buf, __result);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle srandom_r$MH() {
        return RuntimeHelper.requireNonNull(constants$20.srandom_r$MH,"srandom_r");
    }
    public static int srandom_r ( int __seed,  Addressable __buf) {
        var mh$ = srandom_r$MH();
        try {
            return (int)mh$.invokeExact(__seed, __buf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle initstate_r$MH() {
        return RuntimeHelper.requireNonNull(constants$20.initstate_r$MH,"initstate_r");
    }
    public static int initstate_r ( int __seed,  Addressable __statebuf,  long __statelen,  Addressable __buf) {
        var mh$ = initstate_r$MH();
        try {
            return (int)mh$.invokeExact(__seed, __statebuf, __statelen, __buf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setstate_r$MH() {
        return RuntimeHelper.requireNonNull(constants$21.setstate_r$MH,"setstate_r");
    }
    public static int setstate_r ( Addressable __statebuf,  Addressable __buf) {
        var mh$ = setstate_r$MH();
        try {
            return (int)mh$.invokeExact(__statebuf, __buf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rand$MH() {
        return RuntimeHelper.requireNonNull(constants$21.rand$MH,"rand");
    }
    public static int rand () {
        var mh$ = rand$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle srand$MH() {
        return RuntimeHelper.requireNonNull(constants$21.srand$MH,"srand");
    }
    public static void srand ( int __seed) {
        var mh$ = srand$MH();
        try {
            mh$.invokeExact(__seed);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rand_r$MH() {
        return RuntimeHelper.requireNonNull(constants$21.rand_r$MH,"rand_r");
    }
    public static int rand_r ( Addressable __seed) {
        var mh$ = rand_r$MH();
        try {
            return (int)mh$.invokeExact(__seed);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle drand48$MH() {
        return RuntimeHelper.requireNonNull(constants$21.drand48$MH,"drand48");
    }
    public static double drand48 () {
        var mh$ = drand48$MH();
        try {
            return (double)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle erand48$MH() {
        return RuntimeHelper.requireNonNull(constants$21.erand48$MH,"erand48");
    }
    public static double erand48 ( Addressable __xsubi) {
        var mh$ = erand48$MH();
        try {
            return (double)mh$.invokeExact(__xsubi);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lrand48$MH() {
        return RuntimeHelper.requireNonNull(constants$22.lrand48$MH,"lrand48");
    }
    public static long lrand48 () {
        var mh$ = lrand48$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nrand48$MH() {
        return RuntimeHelper.requireNonNull(constants$22.nrand48$MH,"nrand48");
    }
    public static long nrand48 ( Addressable __xsubi) {
        var mh$ = nrand48$MH();
        try {
            return (long)mh$.invokeExact(__xsubi);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mrand48$MH() {
        return RuntimeHelper.requireNonNull(constants$22.mrand48$MH,"mrand48");
    }
    public static long mrand48 () {
        var mh$ = mrand48$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle jrand48$MH() {
        return RuntimeHelper.requireNonNull(constants$22.jrand48$MH,"jrand48");
    }
    public static long jrand48 ( Addressable __xsubi) {
        var mh$ = jrand48$MH();
        try {
            return (long)mh$.invokeExact(__xsubi);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle srand48$MH() {
        return RuntimeHelper.requireNonNull(constants$22.srand48$MH,"srand48");
    }
    public static void srand48 ( long __seedval) {
        var mh$ = srand48$MH();
        try {
            mh$.invokeExact(__seedval);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle seed48$MH() {
        return RuntimeHelper.requireNonNull(constants$22.seed48$MH,"seed48");
    }
    public static MemoryAddress seed48 ( Addressable __seed16v) {
        var mh$ = seed48$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__seed16v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lcong48$MH() {
        return RuntimeHelper.requireNonNull(constants$23.lcong48$MH,"lcong48");
    }
    public static void lcong48 ( Addressable __param) {
        var mh$ = lcong48$MH();
        try {
            mh$.invokeExact(__param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle drand48_r$MH() {
        return RuntimeHelper.requireNonNull(constants$23.drand48_r$MH,"drand48_r");
    }
    public static int drand48_r ( Addressable __buffer,  Addressable __result) {
        var mh$ = drand48_r$MH();
        try {
            return (int)mh$.invokeExact(__buffer, __result);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle erand48_r$MH() {
        return RuntimeHelper.requireNonNull(constants$23.erand48_r$MH,"erand48_r");
    }
    public static int erand48_r ( Addressable __xsubi,  Addressable __buffer,  Addressable __result) {
        var mh$ = erand48_r$MH();
        try {
            return (int)mh$.invokeExact(__xsubi, __buffer, __result);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lrand48_r$MH() {
        return RuntimeHelper.requireNonNull(constants$23.lrand48_r$MH,"lrand48_r");
    }
    public static int lrand48_r ( Addressable __buffer,  Addressable __result) {
        var mh$ = lrand48_r$MH();
        try {
            return (int)mh$.invokeExact(__buffer, __result);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nrand48_r$MH() {
        return RuntimeHelper.requireNonNull(constants$23.nrand48_r$MH,"nrand48_r");
    }
    public static int nrand48_r ( Addressable __xsubi,  Addressable __buffer,  Addressable __result) {
        var mh$ = nrand48_r$MH();
        try {
            return (int)mh$.invokeExact(__xsubi, __buffer, __result);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mrand48_r$MH() {
        return RuntimeHelper.requireNonNull(constants$23.mrand48_r$MH,"mrand48_r");
    }
    public static int mrand48_r ( Addressable __buffer,  Addressable __result) {
        var mh$ = mrand48_r$MH();
        try {
            return (int)mh$.invokeExact(__buffer, __result);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle jrand48_r$MH() {
        return RuntimeHelper.requireNonNull(constants$24.jrand48_r$MH,"jrand48_r");
    }
    public static int jrand48_r ( Addressable __xsubi,  Addressable __buffer,  Addressable __result) {
        var mh$ = jrand48_r$MH();
        try {
            return (int)mh$.invokeExact(__xsubi, __buffer, __result);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle srand48_r$MH() {
        return RuntimeHelper.requireNonNull(constants$24.srand48_r$MH,"srand48_r");
    }
    public static int srand48_r ( long __seedval,  Addressable __buffer) {
        var mh$ = srand48_r$MH();
        try {
            return (int)mh$.invokeExact(__seedval, __buffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle seed48_r$MH() {
        return RuntimeHelper.requireNonNull(constants$24.seed48_r$MH,"seed48_r");
    }
    public static int seed48_r ( Addressable __seed16v,  Addressable __buffer) {
        var mh$ = seed48_r$MH();
        try {
            return (int)mh$.invokeExact(__seed16v, __buffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lcong48_r$MH() {
        return RuntimeHelper.requireNonNull(constants$24.lcong48_r$MH,"lcong48_r");
    }
    public static int lcong48_r ( Addressable __param,  Addressable __buffer) {
        var mh$ = lcong48_r$MH();
        try {
            return (int)mh$.invokeExact(__param, __buffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle malloc$MH() {
        return RuntimeHelper.requireNonNull(constants$24.malloc$MH,"malloc");
    }
    public static MemoryAddress malloc ( long __size) {
        var mh$ = malloc$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle calloc$MH() {
        return RuntimeHelper.requireNonNull(constants$24.calloc$MH,"calloc");
    }
    public static MemoryAddress calloc ( long __nmemb,  long __size) {
        var mh$ = calloc$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__nmemb, __size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle realloc$MH() {
        return RuntimeHelper.requireNonNull(constants$25.realloc$MH,"realloc");
    }
    public static MemoryAddress realloc ( Addressable __ptr,  long __size) {
        var mh$ = realloc$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__ptr, __size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle free$MH() {
        return RuntimeHelper.requireNonNull(constants$25.free$MH,"free");
    }
    public static void free ( Addressable __ptr) {
        var mh$ = free$MH();
        try {
            mh$.invokeExact(__ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle reallocarray$MH() {
        return RuntimeHelper.requireNonNull(constants$25.reallocarray$MH,"reallocarray");
    }
    public static MemoryAddress reallocarray ( Addressable __ptr,  long __nmemb,  long __size) {
        var mh$ = reallocarray$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__ptr, __nmemb, __size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle alloca$MH() {
        return RuntimeHelper.requireNonNull(constants$25.alloca$MH,"alloca");
    }
    public static MemoryAddress alloca ( long __size) {
        var mh$ = alloca$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle valloc$MH() {
        return RuntimeHelper.requireNonNull(constants$25.valloc$MH,"valloc");
    }
    public static MemoryAddress valloc ( long __size) {
        var mh$ = valloc$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle posix_memalign$MH() {
        return RuntimeHelper.requireNonNull(constants$25.posix_memalign$MH,"posix_memalign");
    }
    public static int posix_memalign ( Addressable __memptr,  long __alignment,  long __size) {
        var mh$ = posix_memalign$MH();
        try {
            return (int)mh$.invokeExact(__memptr, __alignment, __size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle aligned_alloc$MH() {
        return RuntimeHelper.requireNonNull(constants$26.aligned_alloc$MH,"aligned_alloc");
    }
    public static MemoryAddress aligned_alloc ( long __alignment,  long __size) {
        var mh$ = aligned_alloc$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__alignment, __size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle abort$MH() {
        return RuntimeHelper.requireNonNull(constants$26.abort$MH,"abort");
    }
    public static void abort () {
        var mh$ = abort$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle atexit$MH() {
        return RuntimeHelper.requireNonNull(constants$26.atexit$MH,"atexit");
    }
    public static int atexit ( Addressable __func) {
        var mh$ = atexit$MH();
        try {
            return (int)mh$.invokeExact(__func);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle at_quick_exit$MH() {
        return RuntimeHelper.requireNonNull(constants$27.at_quick_exit$MH,"at_quick_exit");
    }
    public static int at_quick_exit ( Addressable __func) {
        var mh$ = at_quick_exit$MH();
        try {
            return (int)mh$.invokeExact(__func);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle on_exit$MH() {
        return RuntimeHelper.requireNonNull(constants$27.on_exit$MH,"on_exit");
    }
    public static int on_exit ( Addressable __func,  Addressable __arg) {
        var mh$ = on_exit$MH();
        try {
            return (int)mh$.invokeExact(__func, __arg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle exit$MH() {
        return RuntimeHelper.requireNonNull(constants$27.exit$MH,"exit");
    }
    public static void exit ( int __status) {
        var mh$ = exit$MH();
        try {
            mh$.invokeExact(__status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle quick_exit$MH() {
        return RuntimeHelper.requireNonNull(constants$28.quick_exit$MH,"quick_exit");
    }
    public static void quick_exit ( int __status) {
        var mh$ = quick_exit$MH();
        try {
            mh$.invokeExact(__status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _Exit$MH() {
        return RuntimeHelper.requireNonNull(constants$28._Exit$MH,"_Exit");
    }
    public static void _Exit ( int __status) {
        var mh$ = _Exit$MH();
        try {
            mh$.invokeExact(__status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getenv$MH() {
        return RuntimeHelper.requireNonNull(constants$28.getenv$MH,"getenv");
    }
    public static MemoryAddress getenv ( Addressable __name) {
        var mh$ = getenv$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle putenv$MH() {
        return RuntimeHelper.requireNonNull(constants$28.putenv$MH,"putenv");
    }
    public static int putenv ( Addressable __string) {
        var mh$ = putenv$MH();
        try {
            return (int)mh$.invokeExact(__string);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setenv$MH() {
        return RuntimeHelper.requireNonNull(constants$28.setenv$MH,"setenv");
    }
    public static int setenv ( Addressable __name,  Addressable __value,  int __replace) {
        var mh$ = setenv$MH();
        try {
            return (int)mh$.invokeExact(__name, __value, __replace);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle unsetenv$MH() {
        return RuntimeHelper.requireNonNull(constants$28.unsetenv$MH,"unsetenv");
    }
    public static int unsetenv ( Addressable __name) {
        var mh$ = unsetenv$MH();
        try {
            return (int)mh$.invokeExact(__name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clearenv$MH() {
        return RuntimeHelper.requireNonNull(constants$29.clearenv$MH,"clearenv");
    }
    public static int clearenv () {
        var mh$ = clearenv$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mktemp$MH() {
        return RuntimeHelper.requireNonNull(constants$29.mktemp$MH,"mktemp");
    }
    public static MemoryAddress mktemp ( Addressable __template) {
        var mh$ = mktemp$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__template);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mkstemp$MH() {
        return RuntimeHelper.requireNonNull(constants$29.mkstemp$MH,"mkstemp");
    }
    public static int mkstemp ( Addressable __template) {
        var mh$ = mkstemp$MH();
        try {
            return (int)mh$.invokeExact(__template);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mkstemps$MH() {
        return RuntimeHelper.requireNonNull(constants$29.mkstemps$MH,"mkstemps");
    }
    public static int mkstemps ( Addressable __template,  int __suffixlen) {
        var mh$ = mkstemps$MH();
        try {
            return (int)mh$.invokeExact(__template, __suffixlen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mkdtemp$MH() {
        return RuntimeHelper.requireNonNull(constants$29.mkdtemp$MH,"mkdtemp");
    }
    public static MemoryAddress mkdtemp ( Addressable __template) {
        var mh$ = mkdtemp$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__template);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle system$MH() {
        return RuntimeHelper.requireNonNull(constants$29.system$MH,"system");
    }
    public static int system ( Addressable __command) {
        var mh$ = system$MH();
        try {
            return (int)mh$.invokeExact(__command);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle realpath$MH() {
        return RuntimeHelper.requireNonNull(constants$30.realpath$MH,"realpath");
    }
    public static MemoryAddress realpath ( Addressable __name,  Addressable __resolved) {
        var mh$ = realpath$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__name, __resolved);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle bsearch$MH() {
        return RuntimeHelper.requireNonNull(constants$30.bsearch$MH,"bsearch");
    }
    public static MemoryAddress bsearch ( Addressable __key,  Addressable __base,  long __nmemb,  long __size,  Addressable __compar) {
        var mh$ = bsearch$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__key, __base, __nmemb, __size, __compar);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle qsort$MH() {
        return RuntimeHelper.requireNonNull(constants$30.qsort$MH,"qsort");
    }
    public static void qsort ( Addressable __base,  long __nmemb,  long __size,  Addressable __compar) {
        var mh$ = qsort$MH();
        try {
            mh$.invokeExact(__base, __nmemb, __size, __compar);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle abs$MH() {
        return RuntimeHelper.requireNonNull(constants$30.abs$MH,"abs");
    }
    public static int abs ( int __x) {
        var mh$ = abs$MH();
        try {
            return (int)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle labs$MH() {
        return RuntimeHelper.requireNonNull(constants$31.labs$MH,"labs");
    }
    public static long labs ( long __x) {
        var mh$ = labs$MH();
        try {
            return (long)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llabs$MH() {
        return RuntimeHelper.requireNonNull(constants$31.llabs$MH,"llabs");
    }
    public static long llabs ( long __x) {
        var mh$ = llabs$MH();
        try {
            return (long)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle div$MH() {
        return RuntimeHelper.requireNonNull(constants$31.div$MH,"div");
    }
    public static MemorySegment div ( SegmentAllocator allocator,  int __numer,  int __denom) {
        var mh$ = div$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, __numer, __denom);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ldiv$MH() {
        return RuntimeHelper.requireNonNull(constants$31.ldiv$MH,"ldiv");
    }
    public static MemorySegment ldiv ( SegmentAllocator allocator,  long __numer,  long __denom) {
        var mh$ = ldiv$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, __numer, __denom);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lldiv$MH() {
        return RuntimeHelper.requireNonNull(constants$31.lldiv$MH,"lldiv");
    }
    public static MemorySegment lldiv ( SegmentAllocator allocator,  long __numer,  long __denom) {
        var mh$ = lldiv$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, __numer, __denom);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ecvt$MH() {
        return RuntimeHelper.requireNonNull(constants$31.ecvt$MH,"ecvt");
    }
    public static MemoryAddress ecvt ( double __value,  int __ndigit,  Addressable __decpt,  Addressable __sign) {
        var mh$ = ecvt$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__value, __ndigit, __decpt, __sign);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fcvt$MH() {
        return RuntimeHelper.requireNonNull(constants$32.fcvt$MH,"fcvt");
    }
    public static MemoryAddress fcvt ( double __value,  int __ndigit,  Addressable __decpt,  Addressable __sign) {
        var mh$ = fcvt$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__value, __ndigit, __decpt, __sign);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gcvt$MH() {
        return RuntimeHelper.requireNonNull(constants$32.gcvt$MH,"gcvt");
    }
    public static MemoryAddress gcvt ( double __value,  int __ndigit,  Addressable __buf) {
        var mh$ = gcvt$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__value, __ndigit, __buf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ecvt_r$MH() {
        return RuntimeHelper.requireNonNull(constants$32.ecvt_r$MH,"ecvt_r");
    }
    public static int ecvt_r ( double __value,  int __ndigit,  Addressable __decpt,  Addressable __sign,  Addressable __buf,  long __len) {
        var mh$ = ecvt_r$MH();
        try {
            return (int)mh$.invokeExact(__value, __ndigit, __decpt, __sign, __buf, __len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fcvt_r$MH() {
        return RuntimeHelper.requireNonNull(constants$32.fcvt_r$MH,"fcvt_r");
    }
    public static int fcvt_r ( double __value,  int __ndigit,  Addressable __decpt,  Addressable __sign,  Addressable __buf,  long __len) {
        var mh$ = fcvt_r$MH();
        try {
            return (int)mh$.invokeExact(__value, __ndigit, __decpt, __sign, __buf, __len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mblen$MH() {
        return RuntimeHelper.requireNonNull(constants$32.mblen$MH,"mblen");
    }
    public static int mblen ( Addressable __s,  long __n) {
        var mh$ = mblen$MH();
        try {
            return (int)mh$.invokeExact(__s, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mbtowc$MH() {
        return RuntimeHelper.requireNonNull(constants$32.mbtowc$MH,"mbtowc");
    }
    public static int mbtowc ( Addressable __pwc,  Addressable __s,  long __n) {
        var mh$ = mbtowc$MH();
        try {
            return (int)mh$.invokeExact(__pwc, __s, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wctomb$MH() {
        return RuntimeHelper.requireNonNull(constants$33.wctomb$MH,"wctomb");
    }
    public static int wctomb ( Addressable __s,  int __wchar) {
        var mh$ = wctomb$MH();
        try {
            return (int)mh$.invokeExact(__s, __wchar);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mbstowcs$MH() {
        return RuntimeHelper.requireNonNull(constants$33.mbstowcs$MH,"mbstowcs");
    }
    public static long mbstowcs ( Addressable __pwcs,  Addressable __s,  long __n) {
        var mh$ = mbstowcs$MH();
        try {
            return (long)mh$.invokeExact(__pwcs, __s, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wcstombs$MH() {
        return RuntimeHelper.requireNonNull(constants$33.wcstombs$MH,"wcstombs");
    }
    public static long wcstombs ( Addressable __s,  Addressable __pwcs,  long __n) {
        var mh$ = wcstombs$MH();
        try {
            return (long)mh$.invokeExact(__s, __pwcs, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rpmatch$MH() {
        return RuntimeHelper.requireNonNull(constants$33.rpmatch$MH,"rpmatch");
    }
    public static int rpmatch ( Addressable __response) {
        var mh$ = rpmatch$MH();
        try {
            return (int)mh$.invokeExact(__response);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getsubopt$MH() {
        return RuntimeHelper.requireNonNull(constants$33.getsubopt$MH,"getsubopt");
    }
    public static int getsubopt ( Addressable __optionp,  Addressable __tokens,  Addressable __valuep) {
        var mh$ = getsubopt$MH();
        try {
            return (int)mh$.invokeExact(__optionp, __tokens, __valuep);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getloadavg$MH() {
        return RuntimeHelper.requireNonNull(constants$33.getloadavg$MH,"getloadavg");
    }
    public static int getloadavg ( Addressable __loadavg,  int __nelem) {
        var mh$ = getloadavg$MH();
        try {
            return (int)mh$.invokeExact(__loadavg, __nelem);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle memcpy$MH() {
        return RuntimeHelper.requireNonNull(constants$34.memcpy$MH,"memcpy");
    }
    public static MemoryAddress memcpy ( Addressable __dest,  Addressable __src,  long __n) {
        var mh$ = memcpy$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__dest, __src, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle memmove$MH() {
        return RuntimeHelper.requireNonNull(constants$34.memmove$MH,"memmove");
    }
    public static MemoryAddress memmove ( Addressable __dest,  Addressable __src,  long __n) {
        var mh$ = memmove$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__dest, __src, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle memccpy$MH() {
        return RuntimeHelper.requireNonNull(constants$34.memccpy$MH,"memccpy");
    }
    public static MemoryAddress memccpy ( Addressable __dest,  Addressable __src,  int __c,  long __n) {
        var mh$ = memccpy$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__dest, __src, __c, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle memset$MH() {
        return RuntimeHelper.requireNonNull(constants$34.memset$MH,"memset");
    }
    public static MemoryAddress memset ( Addressable __s,  int __c,  long __n) {
        var mh$ = memset$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__s, __c, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle memcmp$MH() {
        return RuntimeHelper.requireNonNull(constants$34.memcmp$MH,"memcmp");
    }
    public static int memcmp ( Addressable __s1,  Addressable __s2,  long __n) {
        var mh$ = memcmp$MH();
        try {
            return (int)mh$.invokeExact(__s1, __s2, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __memcmpeq$MH() {
        return RuntimeHelper.requireNonNull(constants$34.__memcmpeq$MH,"__memcmpeq");
    }
    public static int __memcmpeq ( Addressable __s1,  Addressable __s2,  long __n) {
        var mh$ = __memcmpeq$MH();
        try {
            return (int)mh$.invokeExact(__s1, __s2, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle memchr$MH() {
        return RuntimeHelper.requireNonNull(constants$35.memchr$MH,"memchr");
    }
    public static MemoryAddress memchr ( Addressable __s,  int __c,  long __n) {
        var mh$ = memchr$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__s, __c, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strcpy$MH() {
        return RuntimeHelper.requireNonNull(constants$35.strcpy$MH,"strcpy");
    }
    public static MemoryAddress strcpy ( Addressable __dest,  Addressable __src) {
        var mh$ = strcpy$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__dest, __src);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strncpy$MH() {
        return RuntimeHelper.requireNonNull(constants$35.strncpy$MH,"strncpy");
    }
    public static MemoryAddress strncpy ( Addressable __dest,  Addressable __src,  long __n) {
        var mh$ = strncpy$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__dest, __src, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strcat$MH() {
        return RuntimeHelper.requireNonNull(constants$35.strcat$MH,"strcat");
    }
    public static MemoryAddress strcat ( Addressable __dest,  Addressable __src) {
        var mh$ = strcat$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__dest, __src);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strncat$MH() {
        return RuntimeHelper.requireNonNull(constants$35.strncat$MH,"strncat");
    }
    public static MemoryAddress strncat ( Addressable __dest,  Addressable __src,  long __n) {
        var mh$ = strncat$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__dest, __src, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strcmp$MH() {
        return RuntimeHelper.requireNonNull(constants$35.strcmp$MH,"strcmp");
    }
    public static int strcmp ( Addressable __s1,  Addressable __s2) {
        var mh$ = strcmp$MH();
        try {
            return (int)mh$.invokeExact(__s1, __s2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strncmp$MH() {
        return RuntimeHelper.requireNonNull(constants$36.strncmp$MH,"strncmp");
    }
    public static int strncmp ( Addressable __s1,  Addressable __s2,  long __n) {
        var mh$ = strncmp$MH();
        try {
            return (int)mh$.invokeExact(__s1, __s2, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strcoll$MH() {
        return RuntimeHelper.requireNonNull(constants$36.strcoll$MH,"strcoll");
    }
    public static int strcoll ( Addressable __s1,  Addressable __s2) {
        var mh$ = strcoll$MH();
        try {
            return (int)mh$.invokeExact(__s1, __s2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strxfrm$MH() {
        return RuntimeHelper.requireNonNull(constants$36.strxfrm$MH,"strxfrm");
    }
    public static long strxfrm ( Addressable __dest,  Addressable __src,  long __n) {
        var mh$ = strxfrm$MH();
        try {
            return (long)mh$.invokeExact(__dest, __src, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress __locale_t = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress locale_t = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle strcoll_l$MH() {
        return RuntimeHelper.requireNonNull(constants$36.strcoll_l$MH,"strcoll_l");
    }
    public static int strcoll_l ( Addressable __s1,  Addressable __s2,  Addressable __l) {
        var mh$ = strcoll_l$MH();
        try {
            return (int)mh$.invokeExact(__s1, __s2, __l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strxfrm_l$MH() {
        return RuntimeHelper.requireNonNull(constants$36.strxfrm_l$MH,"strxfrm_l");
    }
    public static long strxfrm_l ( Addressable __dest,  Addressable __src,  long __n,  Addressable __l) {
        var mh$ = strxfrm_l$MH();
        try {
            return (long)mh$.invokeExact(__dest, __src, __n, __l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strdup$MH() {
        return RuntimeHelper.requireNonNull(constants$36.strdup$MH,"strdup");
    }
    public static MemoryAddress strdup ( Addressable __s) {
        var mh$ = strdup$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strndup$MH() {
        return RuntimeHelper.requireNonNull(constants$37.strndup$MH,"strndup");
    }
    public static MemoryAddress strndup ( Addressable __string,  long __n) {
        var mh$ = strndup$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__string, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strchr$MH() {
        return RuntimeHelper.requireNonNull(constants$37.strchr$MH,"strchr");
    }
    public static MemoryAddress strchr ( Addressable __s,  int __c) {
        var mh$ = strchr$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__s, __c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strrchr$MH() {
        return RuntimeHelper.requireNonNull(constants$37.strrchr$MH,"strrchr");
    }
    public static MemoryAddress strrchr ( Addressable __s,  int __c) {
        var mh$ = strrchr$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__s, __c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strcspn$MH() {
        return RuntimeHelper.requireNonNull(constants$37.strcspn$MH,"strcspn");
    }
    public static long strcspn ( Addressable __s,  Addressable __reject) {
        var mh$ = strcspn$MH();
        try {
            return (long)mh$.invokeExact(__s, __reject);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strspn$MH() {
        return RuntimeHelper.requireNonNull(constants$37.strspn$MH,"strspn");
    }
    public static long strspn ( Addressable __s,  Addressable __accept) {
        var mh$ = strspn$MH();
        try {
            return (long)mh$.invokeExact(__s, __accept);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strpbrk$MH() {
        return RuntimeHelper.requireNonNull(constants$37.strpbrk$MH,"strpbrk");
    }
    public static MemoryAddress strpbrk ( Addressable __s,  Addressable __accept) {
        var mh$ = strpbrk$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__s, __accept);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strstr$MH() {
        return RuntimeHelper.requireNonNull(constants$38.strstr$MH,"strstr");
    }
    public static MemoryAddress strstr ( Addressable __haystack,  Addressable __needle) {
        var mh$ = strstr$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__haystack, __needle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtok$MH() {
        return RuntimeHelper.requireNonNull(constants$38.strtok$MH,"strtok");
    }
    public static MemoryAddress strtok ( Addressable __s,  Addressable __delim) {
        var mh$ = strtok$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__s, __delim);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __strtok_r$MH() {
        return RuntimeHelper.requireNonNull(constants$38.__strtok_r$MH,"__strtok_r");
    }
    public static MemoryAddress __strtok_r ( Addressable __s,  Addressable __delim,  Addressable __save_ptr) {
        var mh$ = __strtok_r$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__s, __delim, __save_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtok_r$MH() {
        return RuntimeHelper.requireNonNull(constants$38.strtok_r$MH,"strtok_r");
    }
    public static MemoryAddress strtok_r ( Addressable __s,  Addressable __delim,  Addressable __save_ptr) {
        var mh$ = strtok_r$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__s, __delim, __save_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strlen$MH() {
        return RuntimeHelper.requireNonNull(constants$38.strlen$MH,"strlen");
    }
    public static long strlen ( Addressable __s) {
        var mh$ = strlen$MH();
        try {
            return (long)mh$.invokeExact(__s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strnlen$MH() {
        return RuntimeHelper.requireNonNull(constants$38.strnlen$MH,"strnlen");
    }
    public static long strnlen ( Addressable __string,  long __maxlen) {
        var mh$ = strnlen$MH();
        try {
            return (long)mh$.invokeExact(__string, __maxlen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strerror$MH() {
        return RuntimeHelper.requireNonNull(constants$39.strerror$MH,"strerror");
    }
    public static MemoryAddress strerror ( int __errnum) {
        var mh$ = strerror$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__errnum);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strerror_r$MH() {
        return RuntimeHelper.requireNonNull(constants$39.strerror_r$MH,"strerror_r");
    }
    public static int strerror_r ( int __errnum,  Addressable __buf,  long __buflen) {
        var mh$ = strerror_r$MH();
        try {
            return (int)mh$.invokeExact(__errnum, __buf, __buflen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strerror_l$MH() {
        return RuntimeHelper.requireNonNull(constants$39.strerror_l$MH,"strerror_l");
    }
    public static MemoryAddress strerror_l ( int __errnum,  Addressable __l) {
        var mh$ = strerror_l$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__errnum, __l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle bcmp$MH() {
        return RuntimeHelper.requireNonNull(constants$39.bcmp$MH,"bcmp");
    }
    public static int bcmp ( Addressable __s1,  Addressable __s2,  long __n) {
        var mh$ = bcmp$MH();
        try {
            return (int)mh$.invokeExact(__s1, __s2, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle bcopy$MH() {
        return RuntimeHelper.requireNonNull(constants$39.bcopy$MH,"bcopy");
    }
    public static void bcopy ( Addressable __src,  Addressable __dest,  long __n) {
        var mh$ = bcopy$MH();
        try {
            mh$.invokeExact(__src, __dest, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle bzero$MH() {
        return RuntimeHelper.requireNonNull(constants$39.bzero$MH,"bzero");
    }
    public static void bzero ( Addressable __s,  long __n) {
        var mh$ = bzero$MH();
        try {
            mh$.invokeExact(__s, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle index$MH() {
        return RuntimeHelper.requireNonNull(constants$40.index$MH,"index");
    }
    public static MemoryAddress index ( Addressable __s,  int __c) {
        var mh$ = index$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__s, __c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rindex$MH() {
        return RuntimeHelper.requireNonNull(constants$40.rindex$MH,"rindex");
    }
    public static MemoryAddress rindex ( Addressable __s,  int __c) {
        var mh$ = rindex$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__s, __c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffs$MH() {
        return RuntimeHelper.requireNonNull(constants$40.ffs$MH,"ffs");
    }
    public static int ffs ( int __i) {
        var mh$ = ffs$MH();
        try {
            return (int)mh$.invokeExact(__i);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffsl$MH() {
        return RuntimeHelper.requireNonNull(constants$40.ffsl$MH,"ffsl");
    }
    public static int ffsl ( long __l) {
        var mh$ = ffsl$MH();
        try {
            return (int)mh$.invokeExact(__l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffsll$MH() {
        return RuntimeHelper.requireNonNull(constants$40.ffsll$MH,"ffsll");
    }
    public static int ffsll ( long __ll) {
        var mh$ = ffsll$MH();
        try {
            return (int)mh$.invokeExact(__ll);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strcasecmp$MH() {
        return RuntimeHelper.requireNonNull(constants$40.strcasecmp$MH,"strcasecmp");
    }
    public static int strcasecmp ( Addressable __s1,  Addressable __s2) {
        var mh$ = strcasecmp$MH();
        try {
            return (int)mh$.invokeExact(__s1, __s2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strncasecmp$MH() {
        return RuntimeHelper.requireNonNull(constants$41.strncasecmp$MH,"strncasecmp");
    }
    public static int strncasecmp ( Addressable __s1,  Addressable __s2,  long __n) {
        var mh$ = strncasecmp$MH();
        try {
            return (int)mh$.invokeExact(__s1, __s2, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strcasecmp_l$MH() {
        return RuntimeHelper.requireNonNull(constants$41.strcasecmp_l$MH,"strcasecmp_l");
    }
    public static int strcasecmp_l ( Addressable __s1,  Addressable __s2,  Addressable __loc) {
        var mh$ = strcasecmp_l$MH();
        try {
            return (int)mh$.invokeExact(__s1, __s2, __loc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strncasecmp_l$MH() {
        return RuntimeHelper.requireNonNull(constants$41.strncasecmp_l$MH,"strncasecmp_l");
    }
    public static int strncasecmp_l ( Addressable __s1,  Addressable __s2,  long __n,  Addressable __loc) {
        var mh$ = strncasecmp_l$MH();
        try {
            return (int)mh$.invokeExact(__s1, __s2, __n, __loc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle explicit_bzero$MH() {
        return RuntimeHelper.requireNonNull(constants$41.explicit_bzero$MH,"explicit_bzero");
    }
    public static void explicit_bzero ( Addressable __s,  long __n) {
        var mh$ = explicit_bzero$MH();
        try {
            mh$.invokeExact(__s, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strsep$MH() {
        return RuntimeHelper.requireNonNull(constants$41.strsep$MH,"strsep");
    }
    public static MemoryAddress strsep ( Addressable __stringp,  Addressable __delim) {
        var mh$ = strsep$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__stringp, __delim);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strsignal$MH() {
        return RuntimeHelper.requireNonNull(constants$41.strsignal$MH,"strsignal");
    }
    public static MemoryAddress strsignal ( int __sig) {
        var mh$ = strsignal$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__sig);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __stpcpy$MH() {
        return RuntimeHelper.requireNonNull(constants$42.__stpcpy$MH,"__stpcpy");
    }
    public static MemoryAddress __stpcpy ( Addressable __dest,  Addressable __src) {
        var mh$ = __stpcpy$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__dest, __src);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle stpcpy$MH() {
        return RuntimeHelper.requireNonNull(constants$42.stpcpy$MH,"stpcpy");
    }
    public static MemoryAddress stpcpy ( Addressable __dest,  Addressable __src) {
        var mh$ = stpcpy$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__dest, __src);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __stpncpy$MH() {
        return RuntimeHelper.requireNonNull(constants$42.__stpncpy$MH,"__stpncpy");
    }
    public static MemoryAddress __stpncpy ( Addressable __dest,  Addressable __src,  long __n) {
        var mh$ = __stpncpy$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__dest, __src, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle stpncpy$MH() {
        return RuntimeHelper.requireNonNull(constants$42.stpncpy$MH,"stpncpy");
    }
    public static MemoryAddress stpncpy ( Addressable __dest,  Addressable __src,  long __n) {
        var mh$ = stpncpy$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__dest, __src, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfShort int_least16_t = Constants$root.C_SHORT$LAYOUT;
    public static OfInt int_least32_t = Constants$root.C_INT$LAYOUT;
    public static OfLong int_least64_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong int_fast16_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong int_fast32_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong int_fast64_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong intptr_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong intmax_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfInt __gwchar_t = Constants$root.C_INT$LAYOUT;
    public static MethodHandle imaxabs$MH() {
        return RuntimeHelper.requireNonNull(constants$42.imaxabs$MH,"imaxabs");
    }
    public static long imaxabs ( long __n) {
        var mh$ = imaxabs$MH();
        try {
            return (long)mh$.invokeExact(__n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle imaxdiv$MH() {
        return RuntimeHelper.requireNonNull(constants$42.imaxdiv$MH,"imaxdiv");
    }
    public static MemorySegment imaxdiv ( SegmentAllocator allocator,  long __numer,  long __denom) {
        var mh$ = imaxdiv$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, __numer, __denom);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtoimax$MH() {
        return RuntimeHelper.requireNonNull(constants$43.strtoimax$MH,"strtoimax");
    }
    public static long strtoimax ( Addressable __nptr,  Addressable __endptr,  int __base) {
        var mh$ = strtoimax$MH();
        try {
            return (long)mh$.invokeExact(__nptr, __endptr, __base);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtoumax$MH() {
        return RuntimeHelper.requireNonNull(constants$43.strtoumax$MH,"strtoumax");
    }
    public static long strtoumax ( Addressable __nptr,  Addressable __endptr,  int __base) {
        var mh$ = strtoumax$MH();
        try {
            return (long)mh$.invokeExact(__nptr, __endptr, __base);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wcstoimax$MH() {
        return RuntimeHelper.requireNonNull(constants$43.wcstoimax$MH,"wcstoimax");
    }
    public static long wcstoimax ( Addressable __nptr,  Addressable __endptr,  int __base) {
        var mh$ = wcstoimax$MH();
        try {
            return (long)mh$.invokeExact(__nptr, __endptr, __base);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wcstoumax$MH() {
        return RuntimeHelper.requireNonNull(constants$43.wcstoumax$MH,"wcstoumax");
    }
    public static long wcstoumax ( Addressable __nptr,  Addressable __endptr,  int __base) {
        var mh$ = wcstoumax$MH();
        try {
            return (long)mh$.invokeExact(__nptr, __endptr, __base);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle xtoi$MH() {
        return RuntimeHelper.requireNonNull(constants$43.xtoi$MH,"xtoi");
    }
    public static long xtoi ( Addressable hexstr) {
        var mh$ = xtoi$MH();
        try {
            return (long)mh$.invokeExact(hexstr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strlcpy$MH() {
        return RuntimeHelper.requireNonNull(constants$43.strlcpy$MH,"strlcpy");
    }
    public static long strlcpy ( Addressable dst,  Addressable src,  long size) {
        var mh$ = strlcpy$MH();
        try {
            return (long)mh$.invokeExact(dst, src, size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strlcat$MH() {
        return RuntimeHelper.requireNonNull(constants$44.strlcat$MH,"strlcat");
    }
    public static long strlcat ( Addressable dst,  Addressable src,  long size) {
        var mh$ = strlcat$MH();
        try {
            return (long)mh$.invokeExact(dst, src, size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle memmem$MH() {
        return RuntimeHelper.requireNonNull(constants$44.memmem$MH,"memmem");
    }
    public static MemoryAddress memmem ( Addressable haystack,  long haystack_size,  Addressable needle,  long needle_size) {
        var mh$ = memmem$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(haystack, haystack_size, needle, needle_size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strnlen_w$MH() {
        return RuntimeHelper.requireNonNull(constants$44.strnlen_w$MH,"strnlen_w");
    }
    public static int strnlen_w ( Addressable w_str) {
        var mh$ = strnlen_w$MH();
        try {
            return (int)mh$.invokeExact(w_str);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strcmp_w$MH() {
        return RuntimeHelper.requireNonNull(constants$44.strcmp_w$MH,"strcmp_w");
    }
    public static int strcmp_w ( Addressable w_str,  Addressable str) {
        var mh$ = strcmp_w$MH();
        try {
            return (int)mh$.invokeExact(w_str, str);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strlcpy_w$MH() {
        return RuntimeHelper.requireNonNull(constants$44.strlcpy_w$MH,"strlcpy_w");
    }
    public static long strlcpy_w ( Addressable dst,  Addressable w_src,  long n) {
        var mh$ = strlcpy_w$MH();
        try {
            return (long)mh$.invokeExact(dst, w_src, n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_isalnum$MH() {
        return RuntimeHelper.requireNonNull(constants$44.yr_isalnum$MH,"yr_isalnum");
    }
    public static int yr_isalnum ( Addressable s) {
        var mh$ = yr_isalnum$MH();
        try {
            return (int)mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int _ISupper() {
        return (int)256L;
    }
    public static int _ISlower() {
        return (int)512L;
    }
    public static int _ISalpha() {
        return (int)1024L;
    }
    public static int _ISdigit() {
        return (int)2048L;
    }
    public static int _ISxdigit() {
        return (int)4096L;
    }
    public static int _ISspace() {
        return (int)8192L;
    }
    public static int _ISprint() {
        return (int)16384L;
    }
    public static int _ISgraph() {
        return (int)32768L;
    }
    public static int _ISblank() {
        return (int)1L;
    }
    public static int _IScntrl() {
        return (int)2L;
    }
    public static int _ISpunct() {
        return (int)4L;
    }
    public static int _ISalnum() {
        return (int)8L;
    }
    public static MethodHandle __ctype_b_loc$MH() {
        return RuntimeHelper.requireNonNull(constants$45.__ctype_b_loc$MH,"__ctype_b_loc");
    }
    public static MemoryAddress __ctype_b_loc () {
        var mh$ = __ctype_b_loc$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __ctype_tolower_loc$MH() {
        return RuntimeHelper.requireNonNull(constants$45.__ctype_tolower_loc$MH,"__ctype_tolower_loc");
    }
    public static MemoryAddress __ctype_tolower_loc () {
        var mh$ = __ctype_tolower_loc$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __ctype_toupper_loc$MH() {
        return RuntimeHelper.requireNonNull(constants$45.__ctype_toupper_loc$MH,"__ctype_toupper_loc");
    }
    public static MemoryAddress __ctype_toupper_loc () {
        var mh$ = __ctype_toupper_loc$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle isalnum$MH() {
        return RuntimeHelper.requireNonNull(constants$45.isalnum$MH,"isalnum");
    }
    public static int isalnum ( int x0) {
        var mh$ = isalnum$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle isalpha$MH() {
        return RuntimeHelper.requireNonNull(constants$45.isalpha$MH,"isalpha");
    }
    public static int isalpha ( int x0) {
        var mh$ = isalpha$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle iscntrl$MH() {
        return RuntimeHelper.requireNonNull(constants$45.iscntrl$MH,"iscntrl");
    }
    public static int iscntrl ( int x0) {
        var mh$ = iscntrl$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle isdigit$MH() {
        return RuntimeHelper.requireNonNull(constants$46.isdigit$MH,"isdigit");
    }
    public static int isdigit ( int x0) {
        var mh$ = isdigit$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle islower$MH() {
        return RuntimeHelper.requireNonNull(constants$46.islower$MH,"islower");
    }
    public static int islower ( int x0) {
        var mh$ = islower$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle isgraph$MH() {
        return RuntimeHelper.requireNonNull(constants$46.isgraph$MH,"isgraph");
    }
    public static int isgraph ( int x0) {
        var mh$ = isgraph$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle isprint$MH() {
        return RuntimeHelper.requireNonNull(constants$46.isprint$MH,"isprint");
    }
    public static int isprint ( int x0) {
        var mh$ = isprint$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ispunct$MH() {
        return RuntimeHelper.requireNonNull(constants$46.ispunct$MH,"ispunct");
    }
    public static int ispunct ( int x0) {
        var mh$ = ispunct$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle isspace$MH() {
        return RuntimeHelper.requireNonNull(constants$46.isspace$MH,"isspace");
    }
    public static int isspace ( int x0) {
        var mh$ = isspace$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle isupper$MH() {
        return RuntimeHelper.requireNonNull(constants$47.isupper$MH,"isupper");
    }
    public static int isupper ( int x0) {
        var mh$ = isupper$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle isxdigit$MH() {
        return RuntimeHelper.requireNonNull(constants$47.isxdigit$MH,"isxdigit");
    }
    public static int isxdigit ( int x0) {
        var mh$ = isxdigit$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle tolower$MH() {
        return RuntimeHelper.requireNonNull(constants$47.tolower$MH,"tolower");
    }
    public static int tolower ( int __c) {
        var mh$ = tolower$MH();
        try {
            return (int)mh$.invokeExact(__c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle toupper$MH() {
        return RuntimeHelper.requireNonNull(constants$47.toupper$MH,"toupper");
    }
    public static int toupper ( int __c) {
        var mh$ = toupper$MH();
        try {
            return (int)mh$.invokeExact(__c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle isblank$MH() {
        return RuntimeHelper.requireNonNull(constants$47.isblank$MH,"isblank");
    }
    public static int isblank ( int x0) {
        var mh$ = isblank$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle isascii$MH() {
        return RuntimeHelper.requireNonNull(constants$47.isascii$MH,"isascii");
    }
    public static int isascii ( int __c) {
        var mh$ = isascii$MH();
        try {
            return (int)mh$.invokeExact(__c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle toascii$MH() {
        return RuntimeHelper.requireNonNull(constants$48.toascii$MH,"toascii");
    }
    public static int toascii ( int __c) {
        var mh$ = toascii$MH();
        try {
            return (int)mh$.invokeExact(__c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _toupper$MH() {
        return RuntimeHelper.requireNonNull(constants$48._toupper$MH,"_toupper");
    }
    public static int _toupper ( int x0) {
        var mh$ = _toupper$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _tolower$MH() {
        return RuntimeHelper.requireNonNull(constants$48._tolower$MH,"_tolower");
    }
    public static int _tolower ( int x0) {
        var mh$ = _tolower$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle isalnum_l$MH() {
        return RuntimeHelper.requireNonNull(constants$48.isalnum_l$MH,"isalnum_l");
    }
    public static int isalnum_l ( int x0,  Addressable x1) {
        var mh$ = isalnum_l$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle isalpha_l$MH() {
        return RuntimeHelper.requireNonNull(constants$48.isalpha_l$MH,"isalpha_l");
    }
    public static int isalpha_l ( int x0,  Addressable x1) {
        var mh$ = isalpha_l$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle iscntrl_l$MH() {
        return RuntimeHelper.requireNonNull(constants$48.iscntrl_l$MH,"iscntrl_l");
    }
    public static int iscntrl_l ( int x0,  Addressable x1) {
        var mh$ = iscntrl_l$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle isdigit_l$MH() {
        return RuntimeHelper.requireNonNull(constants$49.isdigit_l$MH,"isdigit_l");
    }
    public static int isdigit_l ( int x0,  Addressable x1) {
        var mh$ = isdigit_l$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle islower_l$MH() {
        return RuntimeHelper.requireNonNull(constants$49.islower_l$MH,"islower_l");
    }
    public static int islower_l ( int x0,  Addressable x1) {
        var mh$ = islower_l$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle isgraph_l$MH() {
        return RuntimeHelper.requireNonNull(constants$49.isgraph_l$MH,"isgraph_l");
    }
    public static int isgraph_l ( int x0,  Addressable x1) {
        var mh$ = isgraph_l$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle isprint_l$MH() {
        return RuntimeHelper.requireNonNull(constants$49.isprint_l$MH,"isprint_l");
    }
    public static int isprint_l ( int x0,  Addressable x1) {
        var mh$ = isprint_l$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ispunct_l$MH() {
        return RuntimeHelper.requireNonNull(constants$49.ispunct_l$MH,"ispunct_l");
    }
    public static int ispunct_l ( int x0,  Addressable x1) {
        var mh$ = ispunct_l$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle isspace_l$MH() {
        return RuntimeHelper.requireNonNull(constants$49.isspace_l$MH,"isspace_l");
    }
    public static int isspace_l ( int x0,  Addressable x1) {
        var mh$ = isspace_l$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle isupper_l$MH() {
        return RuntimeHelper.requireNonNull(constants$50.isupper_l$MH,"isupper_l");
    }
    public static int isupper_l ( int x0,  Addressable x1) {
        var mh$ = isupper_l$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle isxdigit_l$MH() {
        return RuntimeHelper.requireNonNull(constants$50.isxdigit_l$MH,"isxdigit_l");
    }
    public static int isxdigit_l ( int x0,  Addressable x1) {
        var mh$ = isxdigit_l$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle isblank_l$MH() {
        return RuntimeHelper.requireNonNull(constants$50.isblank_l$MH,"isblank_l");
    }
    public static int isblank_l ( int x0,  Addressable x1) {
        var mh$ = isblank_l$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __tolower_l$MH() {
        return RuntimeHelper.requireNonNull(constants$50.__tolower_l$MH,"__tolower_l");
    }
    public static int __tolower_l ( int __c,  Addressable __l) {
        var mh$ = __tolower_l$MH();
        try {
            return (int)mh$.invokeExact(__c, __l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle tolower_l$MH() {
        return RuntimeHelper.requireNonNull(constants$50.tolower_l$MH,"tolower_l");
    }
    public static int tolower_l ( int __c,  Addressable __l) {
        var mh$ = tolower_l$MH();
        try {
            return (int)mh$.invokeExact(__c, __l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __toupper_l$MH() {
        return RuntimeHelper.requireNonNull(constants$50.__toupper_l$MH,"__toupper_l");
    }
    public static int __toupper_l ( int __c,  Addressable __l) {
        var mh$ = __toupper_l$MH();
        try {
            return (int)mh$.invokeExact(__c, __l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle toupper_l$MH() {
        return RuntimeHelper.requireNonNull(constants$51.toupper_l$MH,"toupper_l");
    }
    public static int toupper_l ( int __c,  Addressable __l) {
        var mh$ = toupper_l$MH();
        try {
            return (int)mh$.invokeExact(__c, __l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfLong ptrdiff_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static MethodHandle yr_stream_read$MH() {
        return RuntimeHelper.requireNonNull(constants$51.yr_stream_read$MH,"yr_stream_read");
    }
    public static long yr_stream_read ( Addressable ptr,  long size,  long count,  Addressable stream) {
        var mh$ = yr_stream_read$MH();
        try {
            return (long)mh$.invokeExact(ptr, size, count, stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_stream_write$MH() {
        return RuntimeHelper.requireNonNull(constants$52.yr_stream_write$MH,"yr_stream_write");
    }
    public static long yr_stream_write ( Addressable ptr,  long size,  long count,  Addressable stream) {
        var mh$ = yr_stream_write$MH();
        try {
            return (long)mh$.invokeExact(ptr, size, count, stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_arena_create$MH() {
        return RuntimeHelper.requireNonNull(constants$52.yr_arena_create$MH,"yr_arena_create");
    }
    public static int yr_arena_create ( int num_buffers,  long initial_buffer_size,  Addressable arena) {
        var mh$ = yr_arena_create$MH();
        try {
            return (int)mh$.invokeExact(num_buffers, initial_buffer_size, arena);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_arena_acquire$MH() {
        return RuntimeHelper.requireNonNull(constants$52.yr_arena_acquire$MH,"yr_arena_acquire");
    }
    public static void yr_arena_acquire ( Addressable arena) {
        var mh$ = yr_arena_acquire$MH();
        try {
            mh$.invokeExact(arena);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_arena_release$MH() {
        return RuntimeHelper.requireNonNull(constants$52.yr_arena_release$MH,"yr_arena_release");
    }
    public static int yr_arena_release ( Addressable arena) {
        var mh$ = yr_arena_release$MH();
        try {
            return (int)mh$.invokeExact(arena);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_arena_ref_to_ptr$MH() {
        return RuntimeHelper.requireNonNull(constants$52.yr_arena_ref_to_ptr$MH,"yr_arena_ref_to_ptr");
    }
    public static MemoryAddress yr_arena_ref_to_ptr ( Addressable arena,  Addressable ref) {
        var mh$ = yr_arena_ref_to_ptr$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(arena, ref);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_arena_ptr_to_ref$MH() {
        return RuntimeHelper.requireNonNull(constants$52.yr_arena_ptr_to_ref$MH,"yr_arena_ptr_to_ref");
    }
    public static int yr_arena_ptr_to_ref ( Addressable arena,  Addressable address,  Addressable ref) {
        var mh$ = yr_arena_ptr_to_ref$MH();
        try {
            return (int)mh$.invokeExact(arena, address, ref);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_arena_get_ptr$MH() {
        return RuntimeHelper.requireNonNull(constants$53.yr_arena_get_ptr$MH,"yr_arena_get_ptr");
    }
    public static MemoryAddress yr_arena_get_ptr ( Addressable arena,  int buffer_id,  int offset) {
        var mh$ = yr_arena_get_ptr$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(arena, buffer_id, offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_arena_get_current_offset$MH() {
        return RuntimeHelper.requireNonNull(constants$53.yr_arena_get_current_offset$MH,"yr_arena_get_current_offset");
    }
    public static int yr_arena_get_current_offset ( Addressable arena,  int buffer_id) {
        var mh$ = yr_arena_get_current_offset$MH();
        try {
            return (int)mh$.invokeExact(arena, buffer_id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_arena_allocate_memory$MH() {
        return RuntimeHelper.requireNonNull(constants$53.yr_arena_allocate_memory$MH,"yr_arena_allocate_memory");
    }
    public static int yr_arena_allocate_memory ( Addressable arena,  int buffer_id,  long size,  Addressable ref) {
        var mh$ = yr_arena_allocate_memory$MH();
        try {
            return (int)mh$.invokeExact(arena, buffer_id, size, ref);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_arena_allocate_zeroed_memory$MH() {
        return RuntimeHelper.requireNonNull(constants$53.yr_arena_allocate_zeroed_memory$MH,"yr_arena_allocate_zeroed_memory");
    }
    public static int yr_arena_allocate_zeroed_memory ( Addressable arena,  int buffer_id,  long size,  Addressable ref) {
        var mh$ = yr_arena_allocate_zeroed_memory$MH();
        try {
            return (int)mh$.invokeExact(arena, buffer_id, size, ref);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_arena_allocate_struct$MH() {
        return RuntimeHelper.requireNonNull(constants$53.yr_arena_allocate_struct$MH,"yr_arena_allocate_struct");
    }
    public static int yr_arena_allocate_struct ( Addressable arena,  int buffer_id,  long size,  Addressable ref, Object... x4) {
        var mh$ = yr_arena_allocate_struct$MH();
        try {
            return (int)mh$.invokeExact(arena, buffer_id, size, ref, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_arena_make_ptr_relocatable$MH() {
        return RuntimeHelper.requireNonNull(constants$53.yr_arena_make_ptr_relocatable$MH,"yr_arena_make_ptr_relocatable");
    }
    public static int yr_arena_make_ptr_relocatable ( Addressable arena,  int buffer_id, Object... x2) {
        var mh$ = yr_arena_make_ptr_relocatable$MH();
        try {
            return (int)mh$.invokeExact(arena, buffer_id, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_arena_write_data$MH() {
        return RuntimeHelper.requireNonNull(constants$54.yr_arena_write_data$MH,"yr_arena_write_data");
    }
    public static int yr_arena_write_data ( Addressable arena,  int buffer_id,  Addressable data,  long size,  Addressable ref) {
        var mh$ = yr_arena_write_data$MH();
        try {
            return (int)mh$.invokeExact(arena, buffer_id, data, size, ref);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_arena_write_string$MH() {
        return RuntimeHelper.requireNonNull(constants$54.yr_arena_write_string$MH,"yr_arena_write_string");
    }
    public static int yr_arena_write_string ( Addressable arena,  int buffer_id,  Addressable string,  Addressable ref) {
        var mh$ = yr_arena_write_string$MH();
        try {
            return (int)mh$.invokeExact(arena, buffer_id, string, ref);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_arena_write_uint32$MH() {
        return RuntimeHelper.requireNonNull(constants$54.yr_arena_write_uint32$MH,"yr_arena_write_uint32");
    }
    public static int yr_arena_write_uint32 ( Addressable arena,  int buffer_id,  int integer,  Addressable ref) {
        var mh$ = yr_arena_write_uint32$MH();
        try {
            return (int)mh$.invokeExact(arena, buffer_id, integer, ref);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_arena_load_stream$MH() {
        return RuntimeHelper.requireNonNull(constants$54.yr_arena_load_stream$MH,"yr_arena_load_stream");
    }
    public static int yr_arena_load_stream ( Addressable stream,  Addressable arena) {
        var mh$ = yr_arena_load_stream$MH();
        try {
            return (int)mh$.invokeExact(stream, arena);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_arena_save_stream$MH() {
        return RuntimeHelper.requireNonNull(constants$54.yr_arena_save_stream$MH,"yr_arena_save_stream");
    }
    public static int yr_arena_save_stream ( Addressable arena,  Addressable stream) {
        var mh$ = yr_arena_save_stream$MH();
        try {
            return (int)mh$.invokeExact(arena, stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ss_compare$MH() {
        return RuntimeHelper.requireNonNull(constants$54.ss_compare$MH,"ss_compare");
    }
    public static int ss_compare ( Addressable s1,  Addressable s2) {
        var mh$ = ss_compare$MH();
        try {
            return (int)mh$.invokeExact(s1, s2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ss_icompare$MH() {
        return RuntimeHelper.requireNonNull(constants$55.ss_icompare$MH,"ss_icompare");
    }
    public static int ss_icompare ( Addressable s1,  Addressable s2) {
        var mh$ = ss_icompare$MH();
        try {
            return (int)mh$.invokeExact(s1, s2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ss_contains$MH() {
        return RuntimeHelper.requireNonNull(constants$55.ss_contains$MH,"ss_contains");
    }
    public static boolean ss_contains ( Addressable s1,  Addressable s2) {
        var mh$ = ss_contains$MH();
        try {
            return (boolean)mh$.invokeExact(s1, s2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ss_icontains$MH() {
        return RuntimeHelper.requireNonNull(constants$55.ss_icontains$MH,"ss_icontains");
    }
    public static boolean ss_icontains ( Addressable s1,  Addressable s2) {
        var mh$ = ss_icontains$MH();
        try {
            return (boolean)mh$.invokeExact(s1, s2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ss_startswith$MH() {
        return RuntimeHelper.requireNonNull(constants$55.ss_startswith$MH,"ss_startswith");
    }
    public static boolean ss_startswith ( Addressable s1,  Addressable s2) {
        var mh$ = ss_startswith$MH();
        try {
            return (boolean)mh$.invokeExact(s1, s2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ss_istartswith$MH() {
        return RuntimeHelper.requireNonNull(constants$55.ss_istartswith$MH,"ss_istartswith");
    }
    public static boolean ss_istartswith ( Addressable s1,  Addressable s2) {
        var mh$ = ss_istartswith$MH();
        try {
            return (boolean)mh$.invokeExact(s1, s2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ss_endswith$MH() {
        return RuntimeHelper.requireNonNull(constants$55.ss_endswith$MH,"ss_endswith");
    }
    public static boolean ss_endswith ( Addressable s1,  Addressable s2) {
        var mh$ = ss_endswith$MH();
        try {
            return (boolean)mh$.invokeExact(s1, s2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ss_iendswith$MH() {
        return RuntimeHelper.requireNonNull(constants$56.ss_iendswith$MH,"ss_iendswith");
    }
    public static boolean ss_iendswith ( Addressable s1,  Addressable s2) {
        var mh$ = ss_iendswith$MH();
        try {
            return (boolean)mh$.invokeExact(s1, s2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ss_dup$MH() {
        return RuntimeHelper.requireNonNull(constants$56.ss_dup$MH,"ss_dup");
    }
    public static MemoryAddress ss_dup ( Addressable s) {
        var mh$ = ss_dup$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ss_new$MH() {
        return RuntimeHelper.requireNonNull(constants$56.ss_new$MH,"ss_new");
    }
    public static MemoryAddress ss_new ( Addressable s) {
        var mh$ = ss_new$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ss_convert_to_wide$MH() {
        return RuntimeHelper.requireNonNull(constants$56.ss_convert_to_wide$MH,"ss_convert_to_wide");
    }
    public static MemoryAddress ss_convert_to_wide ( Addressable s) {
        var mh$ = ss_convert_to_wide$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_bitmask_find_non_colliding_offset$MH() {
        return RuntimeHelper.requireNonNull(constants$56.yr_bitmask_find_non_colliding_offset$MH,"yr_bitmask_find_non_colliding_offset");
    }
    public static int yr_bitmask_find_non_colliding_offset ( Addressable a,  Addressable b,  int len_a,  int len_b,  Addressable off_a) {
        var mh$ = yr_bitmask_find_non_colliding_offset$MH();
        try {
            return (int)mh$.invokeExact(a, b, len_a, len_b, off_a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_hash$MH() {
        return RuntimeHelper.requireNonNull(constants$57.yr_hash$MH,"yr_hash");
    }
    public static int yr_hash ( int seed,  Addressable buffer,  long len) {
        var mh$ = yr_hash$MH();
        try {
            return (int)mh$.invokeExact(seed, buffer, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
}


