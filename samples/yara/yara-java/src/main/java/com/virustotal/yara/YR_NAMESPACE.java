// Generated by jextract

package com.virustotal.yara;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class YR_NAMESPACE {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.unionLayout(
            Constants$root.C_POINTER$LAYOUT.withName("name"),
            MemoryLayout.structLayout(
                Constants$root.C_INT$LAYOUT.withName("buffer_id"),
                Constants$root.C_INT$LAYOUT.withName("offset")
            ).withName("name_")
        ).withName("$anon$0"),
        Constants$root.C_INT$LAYOUT.withName("idx"),
        MemoryLayout.paddingLayout(32)
    ).withName("YR_NAMESPACE");
    public static MemoryLayout $LAYOUT() {
        return YR_NAMESPACE.$struct$LAYOUT;
    }
    static final VarHandle name$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("$anon$0"), MemoryLayout.PathElement.groupElement("name"));
    public static VarHandle name$VH() {
        return YR_NAMESPACE.name$VH;
    }
    public static MemoryAddress name$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)YR_NAMESPACE.name$VH.get(seg);
    }
    public static void name$set( MemorySegment seg, MemoryAddress x) {
        YR_NAMESPACE.name$VH.set(seg, x);
    }
    public static MemoryAddress name$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)YR_NAMESPACE.name$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void name$set(MemorySegment seg, long index, MemoryAddress x) {
        YR_NAMESPACE.name$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment name_$slice(MemorySegment seg) {
        return seg.asSlice(0, 8);
    }
    static final VarHandle idx$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("idx"));
    public static VarHandle idx$VH() {
        return YR_NAMESPACE.idx$VH;
    }
    public static int idx$get(MemorySegment seg) {
        return (int)YR_NAMESPACE.idx$VH.get(seg);
    }
    public static void idx$set( MemorySegment seg, int x) {
        YR_NAMESPACE.idx$VH.set(seg, x);
    }
    public static int idx$get(MemorySegment seg, long index) {
        return (int)YR_NAMESPACE.idx$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void idx$set(MemorySegment seg, long index, int x) {
        YR_NAMESPACE.idx$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


