// Generated by jextract

package com.virustotal.yara;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class YR_RULES {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("arena"),
        MemoryLayout.unionLayout(
            Constants$root.C_POINTER$LAYOUT.withName("rules_table"),
            Constants$root.C_POINTER$LAYOUT.withName("rules_list_head")
        ).withName("$anon$0"),
        MemoryLayout.unionLayout(
            Constants$root.C_POINTER$LAYOUT.withName("strings_table"),
            Constants$root.C_POINTER$LAYOUT.withName("strings_list_head")
        ).withName("$anon$1"),
        MemoryLayout.unionLayout(
            Constants$root.C_POINTER$LAYOUT.withName("ext_vars_table"),
            Constants$root.C_POINTER$LAYOUT.withName("externals_list_head")
        ).withName("$anon$2"),
        Constants$root.C_POINTER$LAYOUT.withName("ac_transition_table"),
        Constants$root.C_POINTER$LAYOUT.withName("ac_match_pool"),
        Constants$root.C_POINTER$LAYOUT.withName("ac_match_table"),
        Constants$root.C_POINTER$LAYOUT.withName("code_start"),
        Constants$root.C_INT$LAYOUT.withName("num_rules"),
        Constants$root.C_INT$LAYOUT.withName("num_strings"),
        Constants$root.C_INT$LAYOUT.withName("num_namespaces"),
        MemoryLayout.paddingLayout(32)
    ).withName("YR_RULES");
    public static MemoryLayout $LAYOUT() {
        return YR_RULES.$struct$LAYOUT;
    }
    static final VarHandle arena$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("arena"));
    public static VarHandle arena$VH() {
        return YR_RULES.arena$VH;
    }
    public static MemoryAddress arena$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)YR_RULES.arena$VH.get(seg);
    }
    public static void arena$set( MemorySegment seg, MemoryAddress x) {
        YR_RULES.arena$VH.set(seg, x);
    }
    public static MemoryAddress arena$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)YR_RULES.arena$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void arena$set(MemorySegment seg, long index, MemoryAddress x) {
        YR_RULES.arena$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle rules_table$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("$anon$0"), MemoryLayout.PathElement.groupElement("rules_table"));
    public static VarHandle rules_table$VH() {
        return YR_RULES.rules_table$VH;
    }
    public static MemoryAddress rules_table$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)YR_RULES.rules_table$VH.get(seg);
    }
    public static void rules_table$set( MemorySegment seg, MemoryAddress x) {
        YR_RULES.rules_table$VH.set(seg, x);
    }
    public static MemoryAddress rules_table$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)YR_RULES.rules_table$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void rules_table$set(MemorySegment seg, long index, MemoryAddress x) {
        YR_RULES.rules_table$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle rules_list_head$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("$anon$0"), MemoryLayout.PathElement.groupElement("rules_list_head"));
    public static VarHandle rules_list_head$VH() {
        return YR_RULES.rules_list_head$VH;
    }
    public static MemoryAddress rules_list_head$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)YR_RULES.rules_list_head$VH.get(seg);
    }
    public static void rules_list_head$set( MemorySegment seg, MemoryAddress x) {
        YR_RULES.rules_list_head$VH.set(seg, x);
    }
    public static MemoryAddress rules_list_head$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)YR_RULES.rules_list_head$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void rules_list_head$set(MemorySegment seg, long index, MemoryAddress x) {
        YR_RULES.rules_list_head$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle strings_table$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("$anon$1"), MemoryLayout.PathElement.groupElement("strings_table"));
    public static VarHandle strings_table$VH() {
        return YR_RULES.strings_table$VH;
    }
    public static MemoryAddress strings_table$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)YR_RULES.strings_table$VH.get(seg);
    }
    public static void strings_table$set( MemorySegment seg, MemoryAddress x) {
        YR_RULES.strings_table$VH.set(seg, x);
    }
    public static MemoryAddress strings_table$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)YR_RULES.strings_table$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void strings_table$set(MemorySegment seg, long index, MemoryAddress x) {
        YR_RULES.strings_table$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle strings_list_head$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("$anon$1"), MemoryLayout.PathElement.groupElement("strings_list_head"));
    public static VarHandle strings_list_head$VH() {
        return YR_RULES.strings_list_head$VH;
    }
    public static MemoryAddress strings_list_head$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)YR_RULES.strings_list_head$VH.get(seg);
    }
    public static void strings_list_head$set( MemorySegment seg, MemoryAddress x) {
        YR_RULES.strings_list_head$VH.set(seg, x);
    }
    public static MemoryAddress strings_list_head$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)YR_RULES.strings_list_head$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void strings_list_head$set(MemorySegment seg, long index, MemoryAddress x) {
        YR_RULES.strings_list_head$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle ext_vars_table$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("$anon$2"), MemoryLayout.PathElement.groupElement("ext_vars_table"));
    public static VarHandle ext_vars_table$VH() {
        return YR_RULES.ext_vars_table$VH;
    }
    public static MemoryAddress ext_vars_table$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)YR_RULES.ext_vars_table$VH.get(seg);
    }
    public static void ext_vars_table$set( MemorySegment seg, MemoryAddress x) {
        YR_RULES.ext_vars_table$VH.set(seg, x);
    }
    public static MemoryAddress ext_vars_table$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)YR_RULES.ext_vars_table$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ext_vars_table$set(MemorySegment seg, long index, MemoryAddress x) {
        YR_RULES.ext_vars_table$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle externals_list_head$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("$anon$2"), MemoryLayout.PathElement.groupElement("externals_list_head"));
    public static VarHandle externals_list_head$VH() {
        return YR_RULES.externals_list_head$VH;
    }
    public static MemoryAddress externals_list_head$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)YR_RULES.externals_list_head$VH.get(seg);
    }
    public static void externals_list_head$set( MemorySegment seg, MemoryAddress x) {
        YR_RULES.externals_list_head$VH.set(seg, x);
    }
    public static MemoryAddress externals_list_head$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)YR_RULES.externals_list_head$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void externals_list_head$set(MemorySegment seg, long index, MemoryAddress x) {
        YR_RULES.externals_list_head$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle ac_transition_table$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ac_transition_table"));
    public static VarHandle ac_transition_table$VH() {
        return YR_RULES.ac_transition_table$VH;
    }
    public static MemoryAddress ac_transition_table$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)YR_RULES.ac_transition_table$VH.get(seg);
    }
    public static void ac_transition_table$set( MemorySegment seg, MemoryAddress x) {
        YR_RULES.ac_transition_table$VH.set(seg, x);
    }
    public static MemoryAddress ac_transition_table$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)YR_RULES.ac_transition_table$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ac_transition_table$set(MemorySegment seg, long index, MemoryAddress x) {
        YR_RULES.ac_transition_table$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle ac_match_pool$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ac_match_pool"));
    public static VarHandle ac_match_pool$VH() {
        return YR_RULES.ac_match_pool$VH;
    }
    public static MemoryAddress ac_match_pool$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)YR_RULES.ac_match_pool$VH.get(seg);
    }
    public static void ac_match_pool$set( MemorySegment seg, MemoryAddress x) {
        YR_RULES.ac_match_pool$VH.set(seg, x);
    }
    public static MemoryAddress ac_match_pool$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)YR_RULES.ac_match_pool$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ac_match_pool$set(MemorySegment seg, long index, MemoryAddress x) {
        YR_RULES.ac_match_pool$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle ac_match_table$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ac_match_table"));
    public static VarHandle ac_match_table$VH() {
        return YR_RULES.ac_match_table$VH;
    }
    public static MemoryAddress ac_match_table$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)YR_RULES.ac_match_table$VH.get(seg);
    }
    public static void ac_match_table$set( MemorySegment seg, MemoryAddress x) {
        YR_RULES.ac_match_table$VH.set(seg, x);
    }
    public static MemoryAddress ac_match_table$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)YR_RULES.ac_match_table$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ac_match_table$set(MemorySegment seg, long index, MemoryAddress x) {
        YR_RULES.ac_match_table$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle code_start$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("code_start"));
    public static VarHandle code_start$VH() {
        return YR_RULES.code_start$VH;
    }
    public static MemoryAddress code_start$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)YR_RULES.code_start$VH.get(seg);
    }
    public static void code_start$set( MemorySegment seg, MemoryAddress x) {
        YR_RULES.code_start$VH.set(seg, x);
    }
    public static MemoryAddress code_start$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)YR_RULES.code_start$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void code_start$set(MemorySegment seg, long index, MemoryAddress x) {
        YR_RULES.code_start$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle num_rules$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("num_rules"));
    public static VarHandle num_rules$VH() {
        return YR_RULES.num_rules$VH;
    }
    public static int num_rules$get(MemorySegment seg) {
        return (int)YR_RULES.num_rules$VH.get(seg);
    }
    public static void num_rules$set( MemorySegment seg, int x) {
        YR_RULES.num_rules$VH.set(seg, x);
    }
    public static int num_rules$get(MemorySegment seg, long index) {
        return (int)YR_RULES.num_rules$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void num_rules$set(MemorySegment seg, long index, int x) {
        YR_RULES.num_rules$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle num_strings$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("num_strings"));
    public static VarHandle num_strings$VH() {
        return YR_RULES.num_strings$VH;
    }
    public static int num_strings$get(MemorySegment seg) {
        return (int)YR_RULES.num_strings$VH.get(seg);
    }
    public static void num_strings$set( MemorySegment seg, int x) {
        YR_RULES.num_strings$VH.set(seg, x);
    }
    public static int num_strings$get(MemorySegment seg, long index) {
        return (int)YR_RULES.num_strings$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void num_strings$set(MemorySegment seg, long index, int x) {
        YR_RULES.num_strings$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle num_namespaces$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("num_namespaces"));
    public static VarHandle num_namespaces$VH() {
        return YR_RULES.num_namespaces$VH;
    }
    public static int num_namespaces$get(MemorySegment seg) {
        return (int)YR_RULES.num_namespaces$VH.get(seg);
    }
    public static void num_namespaces$set( MemorySegment seg, int x) {
        YR_RULES.num_namespaces$VH.set(seg, x);
    }
    public static int num_namespaces$get(MemorySegment seg, long index) {
        return (int)YR_RULES.num_namespaces$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void num_namespaces$set(MemorySegment seg, long index, int x) {
        YR_RULES.num_namespaces$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


