// Generated by jextract

package com.virustotal.yara;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class YR_RULE_PROFILING_INFO {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("rule"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("cost")
    ).withName("YR_RULE_PROFILING_INFO");
    public static MemoryLayout $LAYOUT() {
        return YR_RULE_PROFILING_INFO.$struct$LAYOUT;
    }
    static final VarHandle rule$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("rule"));
    public static VarHandle rule$VH() {
        return YR_RULE_PROFILING_INFO.rule$VH;
    }
    public static MemoryAddress rule$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)YR_RULE_PROFILING_INFO.rule$VH.get(seg);
    }
    public static void rule$set( MemorySegment seg, MemoryAddress x) {
        YR_RULE_PROFILING_INFO.rule$VH.set(seg, x);
    }
    public static MemoryAddress rule$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)YR_RULE_PROFILING_INFO.rule$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void rule$set(MemorySegment seg, long index, MemoryAddress x) {
        YR_RULE_PROFILING_INFO.rule$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle cost$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("cost"));
    public static VarHandle cost$VH() {
        return YR_RULE_PROFILING_INFO.cost$VH;
    }
    public static long cost$get(MemorySegment seg) {
        return (long)YR_RULE_PROFILING_INFO.cost$VH.get(seg);
    }
    public static void cost$set( MemorySegment seg, long x) {
        YR_RULE_PROFILING_INFO.cost$VH.set(seg, x);
    }
    public static long cost$get(MemorySegment seg, long index) {
        return (long)YR_RULE_PROFILING_INFO.cost$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void cost$set(MemorySegment seg, long index, long x) {
        YR_RULE_PROFILING_INFO.cost$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


