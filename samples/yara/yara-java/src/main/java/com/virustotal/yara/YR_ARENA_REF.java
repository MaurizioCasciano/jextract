// Generated by jextract

package com.virustotal.yara;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class YR_ARENA_REF {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_INT$LAYOUT.withName("buffer_id"),
        Constants$root.C_INT$LAYOUT.withName("offset")
    ).withName("YR_ARENA_REF");
    public static MemoryLayout $LAYOUT() {
        return YR_ARENA_REF.$struct$LAYOUT;
    }
    static final VarHandle buffer_id$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("buffer_id"));
    public static VarHandle buffer_id$VH() {
        return YR_ARENA_REF.buffer_id$VH;
    }
    public static int buffer_id$get(MemorySegment seg) {
        return (int)YR_ARENA_REF.buffer_id$VH.get(seg);
    }
    public static void buffer_id$set( MemorySegment seg, int x) {
        YR_ARENA_REF.buffer_id$VH.set(seg, x);
    }
    public static int buffer_id$get(MemorySegment seg, long index) {
        return (int)YR_ARENA_REF.buffer_id$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void buffer_id$set(MemorySegment seg, long index, int x) {
        YR_ARENA_REF.buffer_id$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle offset$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("offset"));
    public static VarHandle offset$VH() {
        return YR_ARENA_REF.offset$VH;
    }
    public static int offset$get(MemorySegment seg) {
        return (int)YR_ARENA_REF.offset$VH.get(seg);
    }
    public static void offset$set( MemorySegment seg, int x) {
        YR_ARENA_REF.offset$VH.set(seg, x);
    }
    public static int offset$get(MemorySegment seg, long index) {
        return (int)YR_ARENA_REF.offset$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void offset$set(MemorySegment seg, long index, int x) {
        YR_ARENA_REF.offset$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


