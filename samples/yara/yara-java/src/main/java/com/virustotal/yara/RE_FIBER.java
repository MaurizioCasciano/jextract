// Generated by jextract

package com.virustotal.yara;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class RE_FIBER {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("ip"),
        Constants$root.C_INT$LAYOUT.withName("sp"),
        Constants$root.C_INT$LAYOUT.withName("rc"),
        Constants$root.C_POINTER$LAYOUT.withName("prev"),
        Constants$root.C_POINTER$LAYOUT.withName("next"),
        MemoryLayout.sequenceLayout(1024, Constants$root.C_SHORT$LAYOUT).withName("stack")
    ).withName("RE_FIBER");
    public static MemoryLayout $LAYOUT() {
        return RE_FIBER.$struct$LAYOUT;
    }
    static final VarHandle ip$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ip"));
    public static VarHandle ip$VH() {
        return RE_FIBER.ip$VH;
    }
    public static MemoryAddress ip$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)RE_FIBER.ip$VH.get(seg);
    }
    public static void ip$set( MemorySegment seg, MemoryAddress x) {
        RE_FIBER.ip$VH.set(seg, x);
    }
    public static MemoryAddress ip$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)RE_FIBER.ip$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ip$set(MemorySegment seg, long index, MemoryAddress x) {
        RE_FIBER.ip$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle sp$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("sp"));
    public static VarHandle sp$VH() {
        return RE_FIBER.sp$VH;
    }
    public static int sp$get(MemorySegment seg) {
        return (int)RE_FIBER.sp$VH.get(seg);
    }
    public static void sp$set( MemorySegment seg, int x) {
        RE_FIBER.sp$VH.set(seg, x);
    }
    public static int sp$get(MemorySegment seg, long index) {
        return (int)RE_FIBER.sp$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void sp$set(MemorySegment seg, long index, int x) {
        RE_FIBER.sp$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle rc$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("rc"));
    public static VarHandle rc$VH() {
        return RE_FIBER.rc$VH;
    }
    public static int rc$get(MemorySegment seg) {
        return (int)RE_FIBER.rc$VH.get(seg);
    }
    public static void rc$set( MemorySegment seg, int x) {
        RE_FIBER.rc$VH.set(seg, x);
    }
    public static int rc$get(MemorySegment seg, long index) {
        return (int)RE_FIBER.rc$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void rc$set(MemorySegment seg, long index, int x) {
        RE_FIBER.rc$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle prev$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("prev"));
    public static VarHandle prev$VH() {
        return RE_FIBER.prev$VH;
    }
    public static MemoryAddress prev$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)RE_FIBER.prev$VH.get(seg);
    }
    public static void prev$set( MemorySegment seg, MemoryAddress x) {
        RE_FIBER.prev$VH.set(seg, x);
    }
    public static MemoryAddress prev$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)RE_FIBER.prev$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void prev$set(MemorySegment seg, long index, MemoryAddress x) {
        RE_FIBER.prev$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle next$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("next"));
    public static VarHandle next$VH() {
        return RE_FIBER.next$VH;
    }
    public static MemoryAddress next$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)RE_FIBER.next$VH.get(seg);
    }
    public static void next$set( MemorySegment seg, MemoryAddress x) {
        RE_FIBER.next$VH.set(seg, x);
    }
    public static MemoryAddress next$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)RE_FIBER.next$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void next$set(MemorySegment seg, long index, MemoryAddress x) {
        RE_FIBER.next$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment stack$slice(MemorySegment seg) {
        return seg.asSlice(32, 2048);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


