// Generated by jextract

package com.virustotal.yara;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class YR_MODULE {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("name"),
        Constants$root.C_POINTER$LAYOUT.withName("declarations"),
        Constants$root.C_POINTER$LAYOUT.withName("load"),
        Constants$root.C_POINTER$LAYOUT.withName("unload"),
        Constants$root.C_POINTER$LAYOUT.withName("initialize"),
        Constants$root.C_POINTER$LAYOUT.withName("finalize")
    ).withName("YR_MODULE");
    public static MemoryLayout $LAYOUT() {
        return YR_MODULE.$struct$LAYOUT;
    }
    static final VarHandle name$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("name"));
    public static VarHandle name$VH() {
        return YR_MODULE.name$VH;
    }
    public static MemoryAddress name$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)YR_MODULE.name$VH.get(seg);
    }
    public static void name$set( MemorySegment seg, MemoryAddress x) {
        YR_MODULE.name$VH.set(seg, x);
    }
    public static MemoryAddress name$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)YR_MODULE.name$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void name$set(MemorySegment seg, long index, MemoryAddress x) {
        YR_MODULE.name$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle declarations$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("declarations"));
    public static VarHandle declarations$VH() {
        return YR_MODULE.declarations$VH;
    }
    public static MemoryAddress declarations$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)YR_MODULE.declarations$VH.get(seg);
    }
    public static void declarations$set( MemorySegment seg, MemoryAddress x) {
        YR_MODULE.declarations$VH.set(seg, x);
    }
    public static MemoryAddress declarations$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)YR_MODULE.declarations$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void declarations$set(MemorySegment seg, long index, MemoryAddress x) {
        YR_MODULE.declarations$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static YR_EXT_DECLARATIONS_FUNC declarations (MemorySegment segment, MemorySession session) {
        return YR_EXT_DECLARATIONS_FUNC.ofAddress(declarations$get(segment), session);
    }
    static final VarHandle load$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("load"));
    public static VarHandle load$VH() {
        return YR_MODULE.load$VH;
    }
    public static MemoryAddress load$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)YR_MODULE.load$VH.get(seg);
    }
    public static void load$set( MemorySegment seg, MemoryAddress x) {
        YR_MODULE.load$VH.set(seg, x);
    }
    public static MemoryAddress load$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)YR_MODULE.load$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void load$set(MemorySegment seg, long index, MemoryAddress x) {
        YR_MODULE.load$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static YR_EXT_LOAD_FUNC load (MemorySegment segment, MemorySession session) {
        return YR_EXT_LOAD_FUNC.ofAddress(load$get(segment), session);
    }
    static final VarHandle unload$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("unload"));
    public static VarHandle unload$VH() {
        return YR_MODULE.unload$VH;
    }
    public static MemoryAddress unload$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)YR_MODULE.unload$VH.get(seg);
    }
    public static void unload$set( MemorySegment seg, MemoryAddress x) {
        YR_MODULE.unload$VH.set(seg, x);
    }
    public static MemoryAddress unload$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)YR_MODULE.unload$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void unload$set(MemorySegment seg, long index, MemoryAddress x) {
        YR_MODULE.unload$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static YR_EXT_UNLOAD_FUNC unload (MemorySegment segment, MemorySession session) {
        return YR_EXT_UNLOAD_FUNC.ofAddress(unload$get(segment), session);
    }
    static final VarHandle initialize$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("initialize"));
    public static VarHandle initialize$VH() {
        return YR_MODULE.initialize$VH;
    }
    public static MemoryAddress initialize$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)YR_MODULE.initialize$VH.get(seg);
    }
    public static void initialize$set( MemorySegment seg, MemoryAddress x) {
        YR_MODULE.initialize$VH.set(seg, x);
    }
    public static MemoryAddress initialize$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)YR_MODULE.initialize$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void initialize$set(MemorySegment seg, long index, MemoryAddress x) {
        YR_MODULE.initialize$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static YR_EXT_INITIALIZE_FUNC initialize (MemorySegment segment, MemorySession session) {
        return YR_EXT_INITIALIZE_FUNC.ofAddress(initialize$get(segment), session);
    }
    static final VarHandle finalize$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("finalize"));
    public static VarHandle finalize$VH() {
        return YR_MODULE.finalize$VH;
    }
    public static MemoryAddress finalize$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)YR_MODULE.finalize$VH.get(seg);
    }
    public static void finalize$set( MemorySegment seg, MemoryAddress x) {
        YR_MODULE.finalize$VH.set(seg, x);
    }
    public static MemoryAddress finalize$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)YR_MODULE.finalize$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void finalize$set(MemorySegment seg, long index, MemoryAddress x) {
        YR_MODULE.finalize$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static YR_EXT_FINALIZE_FUNC finalize (MemorySegment segment, MemorySession session) {
        return YR_EXT_FINALIZE_FUNC.ofAddress(finalize$get(segment), session);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


