// Generated by jextract

package com.virustotal.yara;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class YR_MEMORY_BLOCK_ITERATOR {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("context"),
        Constants$root.C_POINTER$LAYOUT.withName("first"),
        Constants$root.C_POINTER$LAYOUT.withName("next"),
        Constants$root.C_POINTER$LAYOUT.withName("file_size"),
        Constants$root.C_INT$LAYOUT.withName("last_error"),
        MemoryLayout.paddingLayout(32)
    ).withName("YR_MEMORY_BLOCK_ITERATOR");
    public static MemoryLayout $LAYOUT() {
        return YR_MEMORY_BLOCK_ITERATOR.$struct$LAYOUT;
    }
    static final VarHandle context$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("context"));
    public static VarHandle context$VH() {
        return YR_MEMORY_BLOCK_ITERATOR.context$VH;
    }
    public static MemoryAddress context$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)YR_MEMORY_BLOCK_ITERATOR.context$VH.get(seg);
    }
    public static void context$set( MemorySegment seg, MemoryAddress x) {
        YR_MEMORY_BLOCK_ITERATOR.context$VH.set(seg, x);
    }
    public static MemoryAddress context$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)YR_MEMORY_BLOCK_ITERATOR.context$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void context$set(MemorySegment seg, long index, MemoryAddress x) {
        YR_MEMORY_BLOCK_ITERATOR.context$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle first$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("first"));
    public static VarHandle first$VH() {
        return YR_MEMORY_BLOCK_ITERATOR.first$VH;
    }
    public static MemoryAddress first$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)YR_MEMORY_BLOCK_ITERATOR.first$VH.get(seg);
    }
    public static void first$set( MemorySegment seg, MemoryAddress x) {
        YR_MEMORY_BLOCK_ITERATOR.first$VH.set(seg, x);
    }
    public static MemoryAddress first$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)YR_MEMORY_BLOCK_ITERATOR.first$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void first$set(MemorySegment seg, long index, MemoryAddress x) {
        YR_MEMORY_BLOCK_ITERATOR.first$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static YR_MEMORY_BLOCK_ITERATOR_FUNC first (MemorySegment segment, MemorySession session) {
        return YR_MEMORY_BLOCK_ITERATOR_FUNC.ofAddress(first$get(segment), session);
    }
    static final VarHandle next$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("next"));
    public static VarHandle next$VH() {
        return YR_MEMORY_BLOCK_ITERATOR.next$VH;
    }
    public static MemoryAddress next$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)YR_MEMORY_BLOCK_ITERATOR.next$VH.get(seg);
    }
    public static void next$set( MemorySegment seg, MemoryAddress x) {
        YR_MEMORY_BLOCK_ITERATOR.next$VH.set(seg, x);
    }
    public static MemoryAddress next$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)YR_MEMORY_BLOCK_ITERATOR.next$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void next$set(MemorySegment seg, long index, MemoryAddress x) {
        YR_MEMORY_BLOCK_ITERATOR.next$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static YR_MEMORY_BLOCK_ITERATOR_FUNC next (MemorySegment segment, MemorySession session) {
        return YR_MEMORY_BLOCK_ITERATOR_FUNC.ofAddress(next$get(segment), session);
    }
    static final VarHandle file_size$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("file_size"));
    public static VarHandle file_size$VH() {
        return YR_MEMORY_BLOCK_ITERATOR.file_size$VH;
    }
    public static MemoryAddress file_size$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)YR_MEMORY_BLOCK_ITERATOR.file_size$VH.get(seg);
    }
    public static void file_size$set( MemorySegment seg, MemoryAddress x) {
        YR_MEMORY_BLOCK_ITERATOR.file_size$VH.set(seg, x);
    }
    public static MemoryAddress file_size$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)YR_MEMORY_BLOCK_ITERATOR.file_size$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void file_size$set(MemorySegment seg, long index, MemoryAddress x) {
        YR_MEMORY_BLOCK_ITERATOR.file_size$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static YR_MEMORY_BLOCK_ITERATOR_SIZE_FUNC file_size (MemorySegment segment, MemorySession session) {
        return YR_MEMORY_BLOCK_ITERATOR_SIZE_FUNC.ofAddress(file_size$get(segment), session);
    }
    static final VarHandle last_error$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("last_error"));
    public static VarHandle last_error$VH() {
        return YR_MEMORY_BLOCK_ITERATOR.last_error$VH;
    }
    public static int last_error$get(MemorySegment seg) {
        return (int)YR_MEMORY_BLOCK_ITERATOR.last_error$VH.get(seg);
    }
    public static void last_error$set( MemorySegment seg, int x) {
        YR_MEMORY_BLOCK_ITERATOR.last_error$VH.set(seg, x);
    }
    public static int last_error$get(MemorySegment seg, long index) {
        return (int)YR_MEMORY_BLOCK_ITERATOR.last_error$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void last_error$set(MemorySegment seg, long index, int x) {
        YR_MEMORY_BLOCK_ITERATOR.last_error$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


