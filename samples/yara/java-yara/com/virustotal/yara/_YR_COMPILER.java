// Generated by jextract

package com.virustotal.yara;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class _YR_COMPILER {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("arena"),
        Constants$root.C_INT$LAYOUT.withName("current_rule_idx"),
        Constants$root.C_INT$LAYOUT.withName("next_rule_idx"),
        Constants$root.C_INT$LAYOUT.withName("current_string_idx"),
        Constants$root.C_INT$LAYOUT.withName("current_namespace_idx"),
        Constants$root.C_INT$LAYOUT.withName("current_meta_idx"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_POINTER$LAYOUT.withName("rules"),
        Constants$root.C_INT$LAYOUT.withName("errors"),
        Constants$root.C_INT$LAYOUT.withName("current_line"),
        Constants$root.C_INT$LAYOUT.withName("last_error"),
        Constants$root.C_INT$LAYOUT.withName("last_error_line"),
        MemoryLayout.sequenceLayout(1, MemoryLayout.structLayout(
            MemoryLayout.sequenceLayout(8, Constants$root.C_LONG_LONG$LAYOUT).withName("__jmpbuf"),
            Constants$root.C_INT$LAYOUT.withName("__mask_was_saved"),
            MemoryLayout.paddingLayout(32),
            MemoryLayout.structLayout(
                MemoryLayout.sequenceLayout(16, Constants$root.C_LONG_LONG$LAYOUT).withName("__val")
            ).withName("__saved_mask")
        ).withName("__jmp_buf_tag")).withName("error_recovery"),
        Constants$root.C_POINTER$LAYOUT.withName("automaton"),
        Constants$root.C_POINTER$LAYOUT.withName("rules_table"),
        Constants$root.C_POINTER$LAYOUT.withName("objects_table"),
        Constants$root.C_POINTER$LAYOUT.withName("strings_table"),
        Constants$root.C_POINTER$LAYOUT.withName("sz_table"),
        Constants$root.C_POINTER$LAYOUT.withName("fixup_stack_head"),
        Constants$root.C_INT$LAYOUT.withName("num_namespaces"),
        MemoryLayout.paddingLayout(32),
        MemoryLayout.sequenceLayout(4, MemoryLayout.structLayout(
            MemoryLayout.structLayout(
                Constants$root.C_INT$LAYOUT.withName("buffer_id"),
                Constants$root.C_INT$LAYOUT.withName("offset")
            ).withName("start_ref"),
            Constants$root.C_INT$LAYOUT.withName("vars_count"),
            MemoryLayout.paddingLayout(32),
            MemoryLayout.sequenceLayout(2, MemoryLayout.structLayout(
                Constants$root.C_INT$LAYOUT.withName("type"),
                MemoryLayout.paddingLayout(32),
                MemoryLayout.unionLayout(
                    Constants$root.C_LONG_LONG$LAYOUT.withName("integer"),
                    Constants$root.C_POINTER$LAYOUT.withName("object"),
                    MemoryLayout.structLayout(
                        Constants$root.C_INT$LAYOUT.withName("buffer_id"),
                        Constants$root.C_INT$LAYOUT.withName("offset")
                    ).withName("sized_string_ref")
                ).withName("value"),
                MemoryLayout.structLayout(
                    Constants$root.C_POINTER$LAYOUT.withName("ptr"),
                    MemoryLayout.structLayout(
                        Constants$root.C_INT$LAYOUT.withName("buffer_id"),
                        Constants$root.C_INT$LAYOUT.withName("offset")
                    ).withName("ref")
                ).withName("identifier")
            ).withName("_YR_EXPRESSION")).withName("vars"),
            Constants$root.C_INT$LAYOUT.withName("vars_internal_count"),
            MemoryLayout.paddingLayout(32)
        ).withName("_YR_LOOP_CONTEXT")).withName("loop"),
        Constants$root.C_INT$LAYOUT.withName("loop_index"),
        Constants$root.C_INT$LAYOUT.withName("loop_for_of_var_index"),
        MemoryLayout.sequenceLayout(16, Constants$root.C_POINTER$LAYOUT).withName("file_name_stack"),
        Constants$root.C_INT$LAYOUT.withName("file_name_stack_ptr"),
        MemoryLayout.sequenceLayout(256, Constants$root.C_CHAR$LAYOUT).withName("last_error_extra_info"),
        MemoryLayout.sequenceLayout(8192, Constants$root.C_CHAR$LAYOUT).withName("lex_buf"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_POINTER$LAYOUT.withName("lex_buf_ptr"),
        Constants$root.C_SHORT$LAYOUT.withName("lex_buf_len"),
        MemoryLayout.sequenceLayout(1024, Constants$root.C_CHAR$LAYOUT).withName("include_base_dir"),
        MemoryLayout.paddingLayout(48),
        Constants$root.C_POINTER$LAYOUT.withName("user_data"),
        Constants$root.C_POINTER$LAYOUT.withName("incl_clbk_user_data"),
        Constants$root.C_POINTER$LAYOUT.withName("re_ast_clbk_user_data"),
        Constants$root.C_POINTER$LAYOUT.withName("callback"),
        Constants$root.C_POINTER$LAYOUT.withName("include_callback"),
        Constants$root.C_POINTER$LAYOUT.withName("include_free"),
        Constants$root.C_POINTER$LAYOUT.withName("re_ast_callback"),
        MemoryLayout.structLayout(
            Constants$root.C_POINTER$LAYOUT.withName("get_atom_quality"),
            Constants$root.C_POINTER$LAYOUT.withName("quality_table"),
            Constants$root.C_INT$LAYOUT.withName("quality_warning_threshold"),
            Constants$root.C_INT$LAYOUT.withName("quality_table_entries"),
            Constants$root.C_BOOL$LAYOUT.withName("free_quality_table"),
            MemoryLayout.paddingLayout(56)
        ).withName("atoms_config")
    ).withName("_YR_COMPILER");
    public static MemoryLayout $LAYOUT() {
        return _YR_COMPILER.$struct$LAYOUT;
    }
    static final VarHandle arena$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("arena"));
    public static VarHandle arena$VH() {
        return _YR_COMPILER.arena$VH;
    }
    public static MemoryAddress arena$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_YR_COMPILER.arena$VH.get(seg);
    }
    public static void arena$set( MemorySegment seg, MemoryAddress x) {
        _YR_COMPILER.arena$VH.set(seg, x);
    }
    public static MemoryAddress arena$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_YR_COMPILER.arena$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void arena$set(MemorySegment seg, long index, MemoryAddress x) {
        _YR_COMPILER.arena$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle current_rule_idx$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("current_rule_idx"));
    public static VarHandle current_rule_idx$VH() {
        return _YR_COMPILER.current_rule_idx$VH;
    }
    public static int current_rule_idx$get(MemorySegment seg) {
        return (int)_YR_COMPILER.current_rule_idx$VH.get(seg);
    }
    public static void current_rule_idx$set( MemorySegment seg, int x) {
        _YR_COMPILER.current_rule_idx$VH.set(seg, x);
    }
    public static int current_rule_idx$get(MemorySegment seg, long index) {
        return (int)_YR_COMPILER.current_rule_idx$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void current_rule_idx$set(MemorySegment seg, long index, int x) {
        _YR_COMPILER.current_rule_idx$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle next_rule_idx$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("next_rule_idx"));
    public static VarHandle next_rule_idx$VH() {
        return _YR_COMPILER.next_rule_idx$VH;
    }
    public static int next_rule_idx$get(MemorySegment seg) {
        return (int)_YR_COMPILER.next_rule_idx$VH.get(seg);
    }
    public static void next_rule_idx$set( MemorySegment seg, int x) {
        _YR_COMPILER.next_rule_idx$VH.set(seg, x);
    }
    public static int next_rule_idx$get(MemorySegment seg, long index) {
        return (int)_YR_COMPILER.next_rule_idx$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void next_rule_idx$set(MemorySegment seg, long index, int x) {
        _YR_COMPILER.next_rule_idx$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle current_string_idx$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("current_string_idx"));
    public static VarHandle current_string_idx$VH() {
        return _YR_COMPILER.current_string_idx$VH;
    }
    public static int current_string_idx$get(MemorySegment seg) {
        return (int)_YR_COMPILER.current_string_idx$VH.get(seg);
    }
    public static void current_string_idx$set( MemorySegment seg, int x) {
        _YR_COMPILER.current_string_idx$VH.set(seg, x);
    }
    public static int current_string_idx$get(MemorySegment seg, long index) {
        return (int)_YR_COMPILER.current_string_idx$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void current_string_idx$set(MemorySegment seg, long index, int x) {
        _YR_COMPILER.current_string_idx$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle current_namespace_idx$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("current_namespace_idx"));
    public static VarHandle current_namespace_idx$VH() {
        return _YR_COMPILER.current_namespace_idx$VH;
    }
    public static int current_namespace_idx$get(MemorySegment seg) {
        return (int)_YR_COMPILER.current_namespace_idx$VH.get(seg);
    }
    public static void current_namespace_idx$set( MemorySegment seg, int x) {
        _YR_COMPILER.current_namespace_idx$VH.set(seg, x);
    }
    public static int current_namespace_idx$get(MemorySegment seg, long index) {
        return (int)_YR_COMPILER.current_namespace_idx$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void current_namespace_idx$set(MemorySegment seg, long index, int x) {
        _YR_COMPILER.current_namespace_idx$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle current_meta_idx$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("current_meta_idx"));
    public static VarHandle current_meta_idx$VH() {
        return _YR_COMPILER.current_meta_idx$VH;
    }
    public static int current_meta_idx$get(MemorySegment seg) {
        return (int)_YR_COMPILER.current_meta_idx$VH.get(seg);
    }
    public static void current_meta_idx$set( MemorySegment seg, int x) {
        _YR_COMPILER.current_meta_idx$VH.set(seg, x);
    }
    public static int current_meta_idx$get(MemorySegment seg, long index) {
        return (int)_YR_COMPILER.current_meta_idx$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void current_meta_idx$set(MemorySegment seg, long index, int x) {
        _YR_COMPILER.current_meta_idx$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle rules$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("rules"));
    public static VarHandle rules$VH() {
        return _YR_COMPILER.rules$VH;
    }
    public static MemoryAddress rules$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_YR_COMPILER.rules$VH.get(seg);
    }
    public static void rules$set( MemorySegment seg, MemoryAddress x) {
        _YR_COMPILER.rules$VH.set(seg, x);
    }
    public static MemoryAddress rules$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_YR_COMPILER.rules$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void rules$set(MemorySegment seg, long index, MemoryAddress x) {
        _YR_COMPILER.rules$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle errors$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("errors"));
    public static VarHandle errors$VH() {
        return _YR_COMPILER.errors$VH;
    }
    public static int errors$get(MemorySegment seg) {
        return (int)_YR_COMPILER.errors$VH.get(seg);
    }
    public static void errors$set( MemorySegment seg, int x) {
        _YR_COMPILER.errors$VH.set(seg, x);
    }
    public static int errors$get(MemorySegment seg, long index) {
        return (int)_YR_COMPILER.errors$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void errors$set(MemorySegment seg, long index, int x) {
        _YR_COMPILER.errors$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle current_line$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("current_line"));
    public static VarHandle current_line$VH() {
        return _YR_COMPILER.current_line$VH;
    }
    public static int current_line$get(MemorySegment seg) {
        return (int)_YR_COMPILER.current_line$VH.get(seg);
    }
    public static void current_line$set( MemorySegment seg, int x) {
        _YR_COMPILER.current_line$VH.set(seg, x);
    }
    public static int current_line$get(MemorySegment seg, long index) {
        return (int)_YR_COMPILER.current_line$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void current_line$set(MemorySegment seg, long index, int x) {
        _YR_COMPILER.current_line$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle last_error$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("last_error"));
    public static VarHandle last_error$VH() {
        return _YR_COMPILER.last_error$VH;
    }
    public static int last_error$get(MemorySegment seg) {
        return (int)_YR_COMPILER.last_error$VH.get(seg);
    }
    public static void last_error$set( MemorySegment seg, int x) {
        _YR_COMPILER.last_error$VH.set(seg, x);
    }
    public static int last_error$get(MemorySegment seg, long index) {
        return (int)_YR_COMPILER.last_error$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void last_error$set(MemorySegment seg, long index, int x) {
        _YR_COMPILER.last_error$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle last_error_line$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("last_error_line"));
    public static VarHandle last_error_line$VH() {
        return _YR_COMPILER.last_error_line$VH;
    }
    public static int last_error_line$get(MemorySegment seg) {
        return (int)_YR_COMPILER.last_error_line$VH.get(seg);
    }
    public static void last_error_line$set( MemorySegment seg, int x) {
        _YR_COMPILER.last_error_line$VH.set(seg, x);
    }
    public static int last_error_line$get(MemorySegment seg, long index) {
        return (int)_YR_COMPILER.last_error_line$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void last_error_line$set(MemorySegment seg, long index, int x) {
        _YR_COMPILER.last_error_line$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment error_recovery$slice(MemorySegment seg) {
        return seg.asSlice(56, 200);
    }
    static final VarHandle automaton$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("automaton"));
    public static VarHandle automaton$VH() {
        return _YR_COMPILER.automaton$VH;
    }
    public static MemoryAddress automaton$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_YR_COMPILER.automaton$VH.get(seg);
    }
    public static void automaton$set( MemorySegment seg, MemoryAddress x) {
        _YR_COMPILER.automaton$VH.set(seg, x);
    }
    public static MemoryAddress automaton$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_YR_COMPILER.automaton$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void automaton$set(MemorySegment seg, long index, MemoryAddress x) {
        _YR_COMPILER.automaton$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle rules_table$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("rules_table"));
    public static VarHandle rules_table$VH() {
        return _YR_COMPILER.rules_table$VH;
    }
    public static MemoryAddress rules_table$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_YR_COMPILER.rules_table$VH.get(seg);
    }
    public static void rules_table$set( MemorySegment seg, MemoryAddress x) {
        _YR_COMPILER.rules_table$VH.set(seg, x);
    }
    public static MemoryAddress rules_table$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_YR_COMPILER.rules_table$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void rules_table$set(MemorySegment seg, long index, MemoryAddress x) {
        _YR_COMPILER.rules_table$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle objects_table$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("objects_table"));
    public static VarHandle objects_table$VH() {
        return _YR_COMPILER.objects_table$VH;
    }
    public static MemoryAddress objects_table$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_YR_COMPILER.objects_table$VH.get(seg);
    }
    public static void objects_table$set( MemorySegment seg, MemoryAddress x) {
        _YR_COMPILER.objects_table$VH.set(seg, x);
    }
    public static MemoryAddress objects_table$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_YR_COMPILER.objects_table$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void objects_table$set(MemorySegment seg, long index, MemoryAddress x) {
        _YR_COMPILER.objects_table$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle strings_table$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("strings_table"));
    public static VarHandle strings_table$VH() {
        return _YR_COMPILER.strings_table$VH;
    }
    public static MemoryAddress strings_table$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_YR_COMPILER.strings_table$VH.get(seg);
    }
    public static void strings_table$set( MemorySegment seg, MemoryAddress x) {
        _YR_COMPILER.strings_table$VH.set(seg, x);
    }
    public static MemoryAddress strings_table$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_YR_COMPILER.strings_table$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void strings_table$set(MemorySegment seg, long index, MemoryAddress x) {
        _YR_COMPILER.strings_table$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle sz_table$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("sz_table"));
    public static VarHandle sz_table$VH() {
        return _YR_COMPILER.sz_table$VH;
    }
    public static MemoryAddress sz_table$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_YR_COMPILER.sz_table$VH.get(seg);
    }
    public static void sz_table$set( MemorySegment seg, MemoryAddress x) {
        _YR_COMPILER.sz_table$VH.set(seg, x);
    }
    public static MemoryAddress sz_table$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_YR_COMPILER.sz_table$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void sz_table$set(MemorySegment seg, long index, MemoryAddress x) {
        _YR_COMPILER.sz_table$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle fixup_stack_head$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("fixup_stack_head"));
    public static VarHandle fixup_stack_head$VH() {
        return _YR_COMPILER.fixup_stack_head$VH;
    }
    public static MemoryAddress fixup_stack_head$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_YR_COMPILER.fixup_stack_head$VH.get(seg);
    }
    public static void fixup_stack_head$set( MemorySegment seg, MemoryAddress x) {
        _YR_COMPILER.fixup_stack_head$VH.set(seg, x);
    }
    public static MemoryAddress fixup_stack_head$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_YR_COMPILER.fixup_stack_head$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void fixup_stack_head$set(MemorySegment seg, long index, MemoryAddress x) {
        _YR_COMPILER.fixup_stack_head$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle num_namespaces$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("num_namespaces"));
    public static VarHandle num_namespaces$VH() {
        return _YR_COMPILER.num_namespaces$VH;
    }
    public static int num_namespaces$get(MemorySegment seg) {
        return (int)_YR_COMPILER.num_namespaces$VH.get(seg);
    }
    public static void num_namespaces$set( MemorySegment seg, int x) {
        _YR_COMPILER.num_namespaces$VH.set(seg, x);
    }
    public static int num_namespaces$get(MemorySegment seg, long index) {
        return (int)_YR_COMPILER.num_namespaces$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void num_namespaces$set(MemorySegment seg, long index, int x) {
        _YR_COMPILER.num_namespaces$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment loop$slice(MemorySegment seg) {
        return seg.asSlice(312, 352);
    }
    static final VarHandle loop_index$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("loop_index"));
    public static VarHandle loop_index$VH() {
        return _YR_COMPILER.loop_index$VH;
    }
    public static int loop_index$get(MemorySegment seg) {
        return (int)_YR_COMPILER.loop_index$VH.get(seg);
    }
    public static void loop_index$set( MemorySegment seg, int x) {
        _YR_COMPILER.loop_index$VH.set(seg, x);
    }
    public static int loop_index$get(MemorySegment seg, long index) {
        return (int)_YR_COMPILER.loop_index$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void loop_index$set(MemorySegment seg, long index, int x) {
        _YR_COMPILER.loop_index$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle loop_for_of_var_index$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("loop_for_of_var_index"));
    public static VarHandle loop_for_of_var_index$VH() {
        return _YR_COMPILER.loop_for_of_var_index$VH;
    }
    public static int loop_for_of_var_index$get(MemorySegment seg) {
        return (int)_YR_COMPILER.loop_for_of_var_index$VH.get(seg);
    }
    public static void loop_for_of_var_index$set( MemorySegment seg, int x) {
        _YR_COMPILER.loop_for_of_var_index$VH.set(seg, x);
    }
    public static int loop_for_of_var_index$get(MemorySegment seg, long index) {
        return (int)_YR_COMPILER.loop_for_of_var_index$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void loop_for_of_var_index$set(MemorySegment seg, long index, int x) {
        _YR_COMPILER.loop_for_of_var_index$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment file_name_stack$slice(MemorySegment seg) {
        return seg.asSlice(672, 128);
    }
    static final VarHandle file_name_stack_ptr$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("file_name_stack_ptr"));
    public static VarHandle file_name_stack_ptr$VH() {
        return _YR_COMPILER.file_name_stack_ptr$VH;
    }
    public static int file_name_stack_ptr$get(MemorySegment seg) {
        return (int)_YR_COMPILER.file_name_stack_ptr$VH.get(seg);
    }
    public static void file_name_stack_ptr$set( MemorySegment seg, int x) {
        _YR_COMPILER.file_name_stack_ptr$VH.set(seg, x);
    }
    public static int file_name_stack_ptr$get(MemorySegment seg, long index) {
        return (int)_YR_COMPILER.file_name_stack_ptr$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void file_name_stack_ptr$set(MemorySegment seg, long index, int x) {
        _YR_COMPILER.file_name_stack_ptr$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment last_error_extra_info$slice(MemorySegment seg) {
        return seg.asSlice(804, 256);
    }
    public static MemorySegment lex_buf$slice(MemorySegment seg) {
        return seg.asSlice(1060, 8192);
    }
    static final VarHandle lex_buf_ptr$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("lex_buf_ptr"));
    public static VarHandle lex_buf_ptr$VH() {
        return _YR_COMPILER.lex_buf_ptr$VH;
    }
    public static MemoryAddress lex_buf_ptr$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_YR_COMPILER.lex_buf_ptr$VH.get(seg);
    }
    public static void lex_buf_ptr$set( MemorySegment seg, MemoryAddress x) {
        _YR_COMPILER.lex_buf_ptr$VH.set(seg, x);
    }
    public static MemoryAddress lex_buf_ptr$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_YR_COMPILER.lex_buf_ptr$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void lex_buf_ptr$set(MemorySegment seg, long index, MemoryAddress x) {
        _YR_COMPILER.lex_buf_ptr$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle lex_buf_len$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("lex_buf_len"));
    public static VarHandle lex_buf_len$VH() {
        return _YR_COMPILER.lex_buf_len$VH;
    }
    public static short lex_buf_len$get(MemorySegment seg) {
        return (short)_YR_COMPILER.lex_buf_len$VH.get(seg);
    }
    public static void lex_buf_len$set( MemorySegment seg, short x) {
        _YR_COMPILER.lex_buf_len$VH.set(seg, x);
    }
    public static short lex_buf_len$get(MemorySegment seg, long index) {
        return (short)_YR_COMPILER.lex_buf_len$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void lex_buf_len$set(MemorySegment seg, long index, short x) {
        _YR_COMPILER.lex_buf_len$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment include_base_dir$slice(MemorySegment seg) {
        return seg.asSlice(9266, 1024);
    }
    static final VarHandle user_data$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("user_data"));
    public static VarHandle user_data$VH() {
        return _YR_COMPILER.user_data$VH;
    }
    public static MemoryAddress user_data$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_YR_COMPILER.user_data$VH.get(seg);
    }
    public static void user_data$set( MemorySegment seg, MemoryAddress x) {
        _YR_COMPILER.user_data$VH.set(seg, x);
    }
    public static MemoryAddress user_data$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_YR_COMPILER.user_data$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void user_data$set(MemorySegment seg, long index, MemoryAddress x) {
        _YR_COMPILER.user_data$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle incl_clbk_user_data$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("incl_clbk_user_data"));
    public static VarHandle incl_clbk_user_data$VH() {
        return _YR_COMPILER.incl_clbk_user_data$VH;
    }
    public static MemoryAddress incl_clbk_user_data$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_YR_COMPILER.incl_clbk_user_data$VH.get(seg);
    }
    public static void incl_clbk_user_data$set( MemorySegment seg, MemoryAddress x) {
        _YR_COMPILER.incl_clbk_user_data$VH.set(seg, x);
    }
    public static MemoryAddress incl_clbk_user_data$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_YR_COMPILER.incl_clbk_user_data$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void incl_clbk_user_data$set(MemorySegment seg, long index, MemoryAddress x) {
        _YR_COMPILER.incl_clbk_user_data$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle re_ast_clbk_user_data$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("re_ast_clbk_user_data"));
    public static VarHandle re_ast_clbk_user_data$VH() {
        return _YR_COMPILER.re_ast_clbk_user_data$VH;
    }
    public static MemoryAddress re_ast_clbk_user_data$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_YR_COMPILER.re_ast_clbk_user_data$VH.get(seg);
    }
    public static void re_ast_clbk_user_data$set( MemorySegment seg, MemoryAddress x) {
        _YR_COMPILER.re_ast_clbk_user_data$VH.set(seg, x);
    }
    public static MemoryAddress re_ast_clbk_user_data$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_YR_COMPILER.re_ast_clbk_user_data$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void re_ast_clbk_user_data$set(MemorySegment seg, long index, MemoryAddress x) {
        _YR_COMPILER.re_ast_clbk_user_data$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle callback$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("callback"));
    public static VarHandle callback$VH() {
        return _YR_COMPILER.callback$VH;
    }
    public static MemoryAddress callback$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_YR_COMPILER.callback$VH.get(seg);
    }
    public static void callback$set( MemorySegment seg, MemoryAddress x) {
        _YR_COMPILER.callback$VH.set(seg, x);
    }
    public static MemoryAddress callback$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_YR_COMPILER.callback$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void callback$set(MemorySegment seg, long index, MemoryAddress x) {
        _YR_COMPILER.callback$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static YR_COMPILER_CALLBACK_FUNC callback (MemorySegment segment, MemorySession session) {
        return YR_COMPILER_CALLBACK_FUNC.ofAddress(callback$get(segment), session);
    }
    static final VarHandle include_callback$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("include_callback"));
    public static VarHandle include_callback$VH() {
        return _YR_COMPILER.include_callback$VH;
    }
    public static MemoryAddress include_callback$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_YR_COMPILER.include_callback$VH.get(seg);
    }
    public static void include_callback$set( MemorySegment seg, MemoryAddress x) {
        _YR_COMPILER.include_callback$VH.set(seg, x);
    }
    public static MemoryAddress include_callback$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_YR_COMPILER.include_callback$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void include_callback$set(MemorySegment seg, long index, MemoryAddress x) {
        _YR_COMPILER.include_callback$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static YR_COMPILER_INCLUDE_CALLBACK_FUNC include_callback (MemorySegment segment, MemorySession session) {
        return YR_COMPILER_INCLUDE_CALLBACK_FUNC.ofAddress(include_callback$get(segment), session);
    }
    static final VarHandle include_free$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("include_free"));
    public static VarHandle include_free$VH() {
        return _YR_COMPILER.include_free$VH;
    }
    public static MemoryAddress include_free$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_YR_COMPILER.include_free$VH.get(seg);
    }
    public static void include_free$set( MemorySegment seg, MemoryAddress x) {
        _YR_COMPILER.include_free$VH.set(seg, x);
    }
    public static MemoryAddress include_free$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_YR_COMPILER.include_free$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void include_free$set(MemorySegment seg, long index, MemoryAddress x) {
        _YR_COMPILER.include_free$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static YR_COMPILER_INCLUDE_FREE_FUNC include_free (MemorySegment segment, MemorySession session) {
        return YR_COMPILER_INCLUDE_FREE_FUNC.ofAddress(include_free$get(segment), session);
    }
    static final VarHandle re_ast_callback$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("re_ast_callback"));
    public static VarHandle re_ast_callback$VH() {
        return _YR_COMPILER.re_ast_callback$VH;
    }
    public static MemoryAddress re_ast_callback$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_YR_COMPILER.re_ast_callback$VH.get(seg);
    }
    public static void re_ast_callback$set( MemorySegment seg, MemoryAddress x) {
        _YR_COMPILER.re_ast_callback$VH.set(seg, x);
    }
    public static MemoryAddress re_ast_callback$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_YR_COMPILER.re_ast_callback$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void re_ast_callback$set(MemorySegment seg, long index, MemoryAddress x) {
        _YR_COMPILER.re_ast_callback$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static YR_COMPILER_RE_AST_CALLBACK_FUNC re_ast_callback (MemorySegment segment, MemorySession session) {
        return YR_COMPILER_RE_AST_CALLBACK_FUNC.ofAddress(re_ast_callback$get(segment), session);
    }
    public static MemorySegment atoms_config$slice(MemorySegment seg) {
        return seg.asSlice(10352, 32);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


