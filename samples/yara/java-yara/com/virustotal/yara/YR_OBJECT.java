// Generated by jextract

package com.virustotal.yara;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class YR_OBJECT {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_INT$LAYOUT.withName("canary"),
        Constants$root.C_CHAR$LAYOUT.withName("type"),
        MemoryLayout.paddingLayout(24),
        Constants$root.C_POINTER$LAYOUT.withName("identifier"),
        Constants$root.C_POINTER$LAYOUT.withName("parent"),
        Constants$root.C_POINTER$LAYOUT.withName("data"),
        MemoryLayout.unionLayout(
            Constants$root.C_LONG_LONG$LAYOUT.withName("i"),
            Constants$root.C_DOUBLE$LAYOUT.withName("d"),
            Constants$root.C_POINTER$LAYOUT.withName("p"),
            Constants$root.C_POINTER$LAYOUT.withName("o"),
            Constants$root.C_POINTER$LAYOUT.withName("s"),
            Constants$root.C_POINTER$LAYOUT.withName("it"),
            Constants$root.C_POINTER$LAYOUT.withName("ss"),
            Constants$root.C_POINTER$LAYOUT.withName("re")
        ).withName("value")
    ).withName("YR_OBJECT");
    public static MemoryLayout $LAYOUT() {
        return YR_OBJECT.$struct$LAYOUT;
    }
    static final VarHandle canary$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("canary"));
    public static VarHandle canary$VH() {
        return YR_OBJECT.canary$VH;
    }
    public static int canary$get(MemorySegment seg) {
        return (int)YR_OBJECT.canary$VH.get(seg);
    }
    public static void canary$set( MemorySegment seg, int x) {
        YR_OBJECT.canary$VH.set(seg, x);
    }
    public static int canary$get(MemorySegment seg, long index) {
        return (int)YR_OBJECT.canary$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void canary$set(MemorySegment seg, long index, int x) {
        YR_OBJECT.canary$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle type$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("type"));
    public static VarHandle type$VH() {
        return YR_OBJECT.type$VH;
    }
    public static byte type$get(MemorySegment seg) {
        return (byte)YR_OBJECT.type$VH.get(seg);
    }
    public static void type$set( MemorySegment seg, byte x) {
        YR_OBJECT.type$VH.set(seg, x);
    }
    public static byte type$get(MemorySegment seg, long index) {
        return (byte)YR_OBJECT.type$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void type$set(MemorySegment seg, long index, byte x) {
        YR_OBJECT.type$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle identifier$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("identifier"));
    public static VarHandle identifier$VH() {
        return YR_OBJECT.identifier$VH;
    }
    public static MemoryAddress identifier$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)YR_OBJECT.identifier$VH.get(seg);
    }
    public static void identifier$set( MemorySegment seg, MemoryAddress x) {
        YR_OBJECT.identifier$VH.set(seg, x);
    }
    public static MemoryAddress identifier$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)YR_OBJECT.identifier$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void identifier$set(MemorySegment seg, long index, MemoryAddress x) {
        YR_OBJECT.identifier$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle parent$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("parent"));
    public static VarHandle parent$VH() {
        return YR_OBJECT.parent$VH;
    }
    public static MemoryAddress parent$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)YR_OBJECT.parent$VH.get(seg);
    }
    public static void parent$set( MemorySegment seg, MemoryAddress x) {
        YR_OBJECT.parent$VH.set(seg, x);
    }
    public static MemoryAddress parent$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)YR_OBJECT.parent$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void parent$set(MemorySegment seg, long index, MemoryAddress x) {
        YR_OBJECT.parent$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle data$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("data"));
    public static VarHandle data$VH() {
        return YR_OBJECT.data$VH;
    }
    public static MemoryAddress data$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)YR_OBJECT.data$VH.get(seg);
    }
    public static void data$set( MemorySegment seg, MemoryAddress x) {
        YR_OBJECT.data$VH.set(seg, x);
    }
    public static MemoryAddress data$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)YR_OBJECT.data$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void data$set(MemorySegment seg, long index, MemoryAddress x) {
        YR_OBJECT.data$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment value$slice(MemorySegment seg) {
        return seg.asSlice(32, 8);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


