// Generated by jextract

package com.virustotal.yara;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class _YR_EXPRESSION {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_INT$LAYOUT.withName("type"),
        MemoryLayout.paddingLayout(32),
        MemoryLayout.unionLayout(
            Constants$root.C_LONG_LONG$LAYOUT.withName("integer"),
            Constants$root.C_POINTER$LAYOUT.withName("object"),
            MemoryLayout.structLayout(
                Constants$root.C_INT$LAYOUT.withName("buffer_id"),
                Constants$root.C_INT$LAYOUT.withName("offset")
            ).withName("sized_string_ref")
        ).withName("value"),
        MemoryLayout.structLayout(
            Constants$root.C_POINTER$LAYOUT.withName("ptr"),
            MemoryLayout.structLayout(
                Constants$root.C_INT$LAYOUT.withName("buffer_id"),
                Constants$root.C_INT$LAYOUT.withName("offset")
            ).withName("ref")
        ).withName("identifier")
    ).withName("_YR_EXPRESSION");
    public static MemoryLayout $LAYOUT() {
        return _YR_EXPRESSION.$struct$LAYOUT;
    }
    static final VarHandle type$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("type"));
    public static VarHandle type$VH() {
        return _YR_EXPRESSION.type$VH;
    }
    public static int type$get(MemorySegment seg) {
        return (int)_YR_EXPRESSION.type$VH.get(seg);
    }
    public static void type$set( MemorySegment seg, int x) {
        _YR_EXPRESSION.type$VH.set(seg, x);
    }
    public static int type$get(MemorySegment seg, long index) {
        return (int)_YR_EXPRESSION.type$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void type$set(MemorySegment seg, long index, int x) {
        _YR_EXPRESSION.type$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static class value {

        static final  GroupLayout value$union$LAYOUT = MemoryLayout.unionLayout(
            Constants$root.C_LONG_LONG$LAYOUT.withName("integer"),
            Constants$root.C_POINTER$LAYOUT.withName("object"),
            MemoryLayout.structLayout(
                Constants$root.C_INT$LAYOUT.withName("buffer_id"),
                Constants$root.C_INT$LAYOUT.withName("offset")
            ).withName("sized_string_ref")
        );
        public static MemoryLayout $LAYOUT() {
            return value.value$union$LAYOUT;
        }
        static final VarHandle integer$VH = value$union$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("integer"));
        public static VarHandle integer$VH() {
            return value.integer$VH;
        }
        public static long integer$get(MemorySegment seg) {
            return (long)value.integer$VH.get(seg);
        }
        public static void integer$set( MemorySegment seg, long x) {
            value.integer$VH.set(seg, x);
        }
        public static long integer$get(MemorySegment seg, long index) {
            return (long)value.integer$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void integer$set(MemorySegment seg, long index, long x) {
            value.integer$VH.set(seg.asSlice(index*sizeof()), x);
        }
        static final VarHandle object$VH = value$union$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("object"));
        public static VarHandle object$VH() {
            return value.object$VH;
        }
        public static MemoryAddress object$get(MemorySegment seg) {
            return (java.lang.foreign.MemoryAddress)value.object$VH.get(seg);
        }
        public static void object$set( MemorySegment seg, MemoryAddress x) {
            value.object$VH.set(seg, x);
        }
        public static MemoryAddress object$get(MemorySegment seg, long index) {
            return (java.lang.foreign.MemoryAddress)value.object$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void object$set(MemorySegment seg, long index, MemoryAddress x) {
            value.object$VH.set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment sized_string_ref$slice(MemorySegment seg) {
            return seg.asSlice(0, 8);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
        public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
        }
        public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
    }

    public static MemorySegment value$slice(MemorySegment seg) {
        return seg.asSlice(8, 8);
    }
    public static class identifier {

        static final  GroupLayout identifier$struct$LAYOUT = MemoryLayout.structLayout(
            Constants$root.C_POINTER$LAYOUT.withName("ptr"),
            MemoryLayout.structLayout(
                Constants$root.C_INT$LAYOUT.withName("buffer_id"),
                Constants$root.C_INT$LAYOUT.withName("offset")
            ).withName("ref")
        );
        public static MemoryLayout $LAYOUT() {
            return identifier.identifier$struct$LAYOUT;
        }
        static final VarHandle ptr$VH = identifier$struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ptr"));
        public static VarHandle ptr$VH() {
            return identifier.ptr$VH;
        }
        public static MemoryAddress ptr$get(MemorySegment seg) {
            return (java.lang.foreign.MemoryAddress)identifier.ptr$VH.get(seg);
        }
        public static void ptr$set( MemorySegment seg, MemoryAddress x) {
            identifier.ptr$VH.set(seg, x);
        }
        public static MemoryAddress ptr$get(MemorySegment seg, long index) {
            return (java.lang.foreign.MemoryAddress)identifier.ptr$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void ptr$set(MemorySegment seg, long index, MemoryAddress x) {
            identifier.ptr$VH.set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment ref$slice(MemorySegment seg) {
            return seg.asSlice(8, 8);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
        public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
        }
        public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
    }

    public static MemorySegment identifier$slice(MemorySegment seg) {
        return seg.asSlice(16, 16);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


