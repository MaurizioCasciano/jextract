// Generated by jextract

package com.virustotal.yara;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class YR_STRING {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_INT$LAYOUT.withName("flags"),
        Constants$root.C_INT$LAYOUT.withName("idx"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("fixed_offset"),
        Constants$root.C_INT$LAYOUT.withName("rule_idx"),
        Constants$root.C_INT$LAYOUT.withName("length"),
        MemoryLayout.unionLayout(
            Constants$root.C_POINTER$LAYOUT.withName("string"),
            MemoryLayout.structLayout(
                Constants$root.C_INT$LAYOUT.withName("buffer_id"),
                Constants$root.C_INT$LAYOUT.withName("offset")
            ).withName("string_")
        ).withName("$anon$0"),
        MemoryLayout.unionLayout(
            Constants$root.C_POINTER$LAYOUT.withName("chained_to"),
            MemoryLayout.structLayout(
                Constants$root.C_INT$LAYOUT.withName("buffer_id"),
                Constants$root.C_INT$LAYOUT.withName("offset")
            ).withName("chained_to_")
        ).withName("$anon$1"),
        Constants$root.C_INT$LAYOUT.withName("chain_gap_min"),
        Constants$root.C_INT$LAYOUT.withName("chain_gap_max"),
        MemoryLayout.unionLayout(
            Constants$root.C_POINTER$LAYOUT.withName("identifier"),
            MemoryLayout.structLayout(
                Constants$root.C_INT$LAYOUT.withName("buffer_id"),
                Constants$root.C_INT$LAYOUT.withName("offset")
            ).withName("identifier_")
        ).withName("$anon$2")
    ).withName("YR_STRING");
    public static MemoryLayout $LAYOUT() {
        return YR_STRING.$struct$LAYOUT;
    }
    static final VarHandle flags$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("flags"));
    public static VarHandle flags$VH() {
        return YR_STRING.flags$VH;
    }
    public static int flags$get(MemorySegment seg) {
        return (int)YR_STRING.flags$VH.get(seg);
    }
    public static void flags$set( MemorySegment seg, int x) {
        YR_STRING.flags$VH.set(seg, x);
    }
    public static int flags$get(MemorySegment seg, long index) {
        return (int)YR_STRING.flags$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void flags$set(MemorySegment seg, long index, int x) {
        YR_STRING.flags$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle idx$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("idx"));
    public static VarHandle idx$VH() {
        return YR_STRING.idx$VH;
    }
    public static int idx$get(MemorySegment seg) {
        return (int)YR_STRING.idx$VH.get(seg);
    }
    public static void idx$set( MemorySegment seg, int x) {
        YR_STRING.idx$VH.set(seg, x);
    }
    public static int idx$get(MemorySegment seg, long index) {
        return (int)YR_STRING.idx$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void idx$set(MemorySegment seg, long index, int x) {
        YR_STRING.idx$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle fixed_offset$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("fixed_offset"));
    public static VarHandle fixed_offset$VH() {
        return YR_STRING.fixed_offset$VH;
    }
    public static long fixed_offset$get(MemorySegment seg) {
        return (long)YR_STRING.fixed_offset$VH.get(seg);
    }
    public static void fixed_offset$set( MemorySegment seg, long x) {
        YR_STRING.fixed_offset$VH.set(seg, x);
    }
    public static long fixed_offset$get(MemorySegment seg, long index) {
        return (long)YR_STRING.fixed_offset$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void fixed_offset$set(MemorySegment seg, long index, long x) {
        YR_STRING.fixed_offset$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle rule_idx$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("rule_idx"));
    public static VarHandle rule_idx$VH() {
        return YR_STRING.rule_idx$VH;
    }
    public static int rule_idx$get(MemorySegment seg) {
        return (int)YR_STRING.rule_idx$VH.get(seg);
    }
    public static void rule_idx$set( MemorySegment seg, int x) {
        YR_STRING.rule_idx$VH.set(seg, x);
    }
    public static int rule_idx$get(MemorySegment seg, long index) {
        return (int)YR_STRING.rule_idx$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void rule_idx$set(MemorySegment seg, long index, int x) {
        YR_STRING.rule_idx$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle length$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("length"));
    public static VarHandle length$VH() {
        return YR_STRING.length$VH;
    }
    public static int length$get(MemorySegment seg) {
        return (int)YR_STRING.length$VH.get(seg);
    }
    public static void length$set( MemorySegment seg, int x) {
        YR_STRING.length$VH.set(seg, x);
    }
    public static int length$get(MemorySegment seg, long index) {
        return (int)YR_STRING.length$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void length$set(MemorySegment seg, long index, int x) {
        YR_STRING.length$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle string$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("$anon$0"), MemoryLayout.PathElement.groupElement("string"));
    public static VarHandle string$VH() {
        return YR_STRING.string$VH;
    }
    public static MemoryAddress string$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)YR_STRING.string$VH.get(seg);
    }
    public static void string$set( MemorySegment seg, MemoryAddress x) {
        YR_STRING.string$VH.set(seg, x);
    }
    public static MemoryAddress string$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)YR_STRING.string$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void string$set(MemorySegment seg, long index, MemoryAddress x) {
        YR_STRING.string$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment string_$slice(MemorySegment seg) {
        return seg.asSlice(24, 8);
    }
    static final VarHandle chained_to$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("$anon$1"), MemoryLayout.PathElement.groupElement("chained_to"));
    public static VarHandle chained_to$VH() {
        return YR_STRING.chained_to$VH;
    }
    public static MemoryAddress chained_to$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)YR_STRING.chained_to$VH.get(seg);
    }
    public static void chained_to$set( MemorySegment seg, MemoryAddress x) {
        YR_STRING.chained_to$VH.set(seg, x);
    }
    public static MemoryAddress chained_to$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)YR_STRING.chained_to$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void chained_to$set(MemorySegment seg, long index, MemoryAddress x) {
        YR_STRING.chained_to$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment chained_to_$slice(MemorySegment seg) {
        return seg.asSlice(32, 8);
    }
    static final VarHandle chain_gap_min$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("chain_gap_min"));
    public static VarHandle chain_gap_min$VH() {
        return YR_STRING.chain_gap_min$VH;
    }
    public static int chain_gap_min$get(MemorySegment seg) {
        return (int)YR_STRING.chain_gap_min$VH.get(seg);
    }
    public static void chain_gap_min$set( MemorySegment seg, int x) {
        YR_STRING.chain_gap_min$VH.set(seg, x);
    }
    public static int chain_gap_min$get(MemorySegment seg, long index) {
        return (int)YR_STRING.chain_gap_min$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void chain_gap_min$set(MemorySegment seg, long index, int x) {
        YR_STRING.chain_gap_min$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle chain_gap_max$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("chain_gap_max"));
    public static VarHandle chain_gap_max$VH() {
        return YR_STRING.chain_gap_max$VH;
    }
    public static int chain_gap_max$get(MemorySegment seg) {
        return (int)YR_STRING.chain_gap_max$VH.get(seg);
    }
    public static void chain_gap_max$set( MemorySegment seg, int x) {
        YR_STRING.chain_gap_max$VH.set(seg, x);
    }
    public static int chain_gap_max$get(MemorySegment seg, long index) {
        return (int)YR_STRING.chain_gap_max$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void chain_gap_max$set(MemorySegment seg, long index, int x) {
        YR_STRING.chain_gap_max$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle identifier$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("$anon$2"), MemoryLayout.PathElement.groupElement("identifier"));
    public static VarHandle identifier$VH() {
        return YR_STRING.identifier$VH;
    }
    public static MemoryAddress identifier$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)YR_STRING.identifier$VH.get(seg);
    }
    public static void identifier$set( MemorySegment seg, MemoryAddress x) {
        YR_STRING.identifier$VH.set(seg, x);
    }
    public static MemoryAddress identifier$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)YR_STRING.identifier$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void identifier$set(MemorySegment seg, long index, MemoryAddress x) {
        YR_STRING.identifier$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment identifier_$slice(MemorySegment seg) {
        return seg.asSlice(48, 8);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


