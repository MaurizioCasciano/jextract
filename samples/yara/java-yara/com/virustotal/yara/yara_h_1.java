// Generated by jextract

package com.virustotal.yara;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
 class yara_h_1 {

    public static MethodHandle yr_hash_table_create$MH() {
        return RuntimeHelper.requireNonNull(constants$57.yr_hash_table_create$MH,"yr_hash_table_create");
    }
    public static int yr_hash_table_create ( int size,  Addressable table) {
        var mh$ = yr_hash_table_create$MH();
        try {
            return (int)mh$.invokeExact(size, table);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_hash_table_clean$MH() {
        return RuntimeHelper.requireNonNull(constants$57.yr_hash_table_clean$MH,"yr_hash_table_clean");
    }
    public static void yr_hash_table_clean ( Addressable table,  Addressable free_value) {
        var mh$ = yr_hash_table_clean$MH();
        try {
            mh$.invokeExact(table, free_value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_hash_table_destroy$MH() {
        return RuntimeHelper.requireNonNull(constants$57.yr_hash_table_destroy$MH,"yr_hash_table_destroy");
    }
    public static void yr_hash_table_destroy ( Addressable table,  Addressable free_value) {
        var mh$ = yr_hash_table_destroy$MH();
        try {
            mh$.invokeExact(table, free_value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_hash_table_lookup$MH() {
        return RuntimeHelper.requireNonNull(constants$57.yr_hash_table_lookup$MH,"yr_hash_table_lookup");
    }
    public static MemoryAddress yr_hash_table_lookup ( Addressable table,  Addressable key,  Addressable ns) {
        var mh$ = yr_hash_table_lookup$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(table, key, ns);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_hash_table_remove$MH() {
        return RuntimeHelper.requireNonNull(constants$58.yr_hash_table_remove$MH,"yr_hash_table_remove");
    }
    public static MemoryAddress yr_hash_table_remove ( Addressable table,  Addressable key,  Addressable ns) {
        var mh$ = yr_hash_table_remove$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(table, key, ns);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_hash_table_add$MH() {
        return RuntimeHelper.requireNonNull(constants$58.yr_hash_table_add$MH,"yr_hash_table_add");
    }
    public static int yr_hash_table_add ( Addressable table,  Addressable key,  Addressable ns,  Addressable value) {
        var mh$ = yr_hash_table_add$MH();
        try {
            return (int)mh$.invokeExact(table, key, ns, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_hash_table_add_uint32$MH() {
        return RuntimeHelper.requireNonNull(constants$58.yr_hash_table_add_uint32$MH,"yr_hash_table_add_uint32");
    }
    public static int yr_hash_table_add_uint32 ( Addressable table,  Addressable key,  Addressable ns,  int value) {
        var mh$ = yr_hash_table_add_uint32$MH();
        try {
            return (int)mh$.invokeExact(table, key, ns, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_hash_table_lookup_uint32$MH() {
        return RuntimeHelper.requireNonNull(constants$58.yr_hash_table_lookup_uint32$MH,"yr_hash_table_lookup_uint32");
    }
    public static int yr_hash_table_lookup_uint32 ( Addressable table,  Addressable key,  Addressable ns) {
        var mh$ = yr_hash_table_lookup_uint32$MH();
        try {
            return (int)mh$.invokeExact(table, key, ns);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_hash_table_lookup_raw_key$MH() {
        return RuntimeHelper.requireNonNull(constants$58.yr_hash_table_lookup_raw_key$MH,"yr_hash_table_lookup_raw_key");
    }
    public static MemoryAddress yr_hash_table_lookup_raw_key ( Addressable table,  Addressable key,  long key_length,  Addressable ns) {
        var mh$ = yr_hash_table_lookup_raw_key$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(table, key, key_length, ns);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_hash_table_remove_raw_key$MH() {
        return RuntimeHelper.requireNonNull(constants$58.yr_hash_table_remove_raw_key$MH,"yr_hash_table_remove_raw_key");
    }
    public static MemoryAddress yr_hash_table_remove_raw_key ( Addressable table,  Addressable key,  long key_length,  Addressable ns) {
        var mh$ = yr_hash_table_remove_raw_key$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(table, key, key_length, ns);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_hash_table_add_raw_key$MH() {
        return RuntimeHelper.requireNonNull(constants$59.yr_hash_table_add_raw_key$MH,"yr_hash_table_add_raw_key");
    }
    public static int yr_hash_table_add_raw_key ( Addressable table,  Addressable key,  long key_length,  Addressable ns,  Addressable value) {
        var mh$ = yr_hash_table_add_raw_key$MH();
        try {
            return (int)mh$.invokeExact(table, key, key_length, ns, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_hash_table_add_uint32_raw_key$MH() {
        return RuntimeHelper.requireNonNull(constants$59.yr_hash_table_add_uint32_raw_key$MH,"yr_hash_table_add_uint32_raw_key");
    }
    public static int yr_hash_table_add_uint32_raw_key ( Addressable table,  Addressable key,  long key_length,  Addressable ns,  int value) {
        var mh$ = yr_hash_table_add_uint32_raw_key$MH();
        try {
            return (int)mh$.invokeExact(table, key, key_length, ns, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_hash_table_lookup_uint32_raw_key$MH() {
        return RuntimeHelper.requireNonNull(constants$59.yr_hash_table_lookup_uint32_raw_key$MH,"yr_hash_table_lookup_uint32_raw_key");
    }
    public static int yr_hash_table_lookup_uint32_raw_key ( Addressable table,  Addressable key,  long key_length,  Addressable ns) {
        var mh$ = yr_hash_table_lookup_uint32_raw_key$MH();
        try {
            return (int)mh$.invokeExact(table, key, key_length, ns);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clock$MH() {
        return RuntimeHelper.requireNonNull(constants$59.clock$MH,"clock");
    }
    public static long clock () {
        var mh$ = clock$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle time$MH() {
        return RuntimeHelper.requireNonNull(constants$59.time$MH,"time");
    }
    public static long time ( Addressable __timer) {
        var mh$ = time$MH();
        try {
            return (long)mh$.invokeExact(__timer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle difftime$MH() {
        return RuntimeHelper.requireNonNull(constants$59.difftime$MH,"difftime");
    }
    public static double difftime ( long __time1,  long __time0) {
        var mh$ = difftime$MH();
        try {
            return (double)mh$.invokeExact(__time1, __time0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mktime$MH() {
        return RuntimeHelper.requireNonNull(constants$60.mktime$MH,"mktime");
    }
    public static long mktime ( Addressable __tp) {
        var mh$ = mktime$MH();
        try {
            return (long)mh$.invokeExact(__tp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strftime$MH() {
        return RuntimeHelper.requireNonNull(constants$60.strftime$MH,"strftime");
    }
    public static long strftime ( Addressable __s,  long __maxsize,  Addressable __format,  Addressable __tp) {
        var mh$ = strftime$MH();
        try {
            return (long)mh$.invokeExact(__s, __maxsize, __format, __tp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strftime_l$MH() {
        return RuntimeHelper.requireNonNull(constants$60.strftime_l$MH,"strftime_l");
    }
    public static long strftime_l ( Addressable __s,  long __maxsize,  Addressable __format,  Addressable __tp,  Addressable __loc) {
        var mh$ = strftime_l$MH();
        try {
            return (long)mh$.invokeExact(__s, __maxsize, __format, __tp, __loc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gmtime$MH() {
        return RuntimeHelper.requireNonNull(constants$60.gmtime$MH,"gmtime");
    }
    public static MemoryAddress gmtime ( Addressable __timer) {
        var mh$ = gmtime$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__timer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle localtime$MH() {
        return RuntimeHelper.requireNonNull(constants$60.localtime$MH,"localtime");
    }
    public static MemoryAddress localtime ( Addressable __timer) {
        var mh$ = localtime$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__timer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gmtime_r$MH() {
        return RuntimeHelper.requireNonNull(constants$60.gmtime_r$MH,"gmtime_r");
    }
    public static MemoryAddress gmtime_r ( Addressable __timer,  Addressable __tp) {
        var mh$ = gmtime_r$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__timer, __tp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle localtime_r$MH() {
        return RuntimeHelper.requireNonNull(constants$61.localtime_r$MH,"localtime_r");
    }
    public static MemoryAddress localtime_r ( Addressable __timer,  Addressable __tp) {
        var mh$ = localtime_r$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__timer, __tp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle asctime$MH() {
        return RuntimeHelper.requireNonNull(constants$61.asctime$MH,"asctime");
    }
    public static MemoryAddress asctime ( Addressable __tp) {
        var mh$ = asctime$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__tp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ctime$MH() {
        return RuntimeHelper.requireNonNull(constants$61.ctime$MH,"ctime");
    }
    public static MemoryAddress ctime ( Addressable __timer) {
        var mh$ = ctime$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__timer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle asctime_r$MH() {
        return RuntimeHelper.requireNonNull(constants$61.asctime_r$MH,"asctime_r");
    }
    public static MemoryAddress asctime_r ( Addressable __tp,  Addressable __buf) {
        var mh$ = asctime_r$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__tp, __buf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ctime_r$MH() {
        return RuntimeHelper.requireNonNull(constants$61.ctime_r$MH,"ctime_r");
    }
    public static MemoryAddress ctime_r ( Addressable __timer,  Addressable __buf) {
        var mh$ = ctime_r$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__timer, __buf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MemorySegment __tzname$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$61.__tzname$SEGMENT,"__tzname");
    }
    public static MemoryLayout __daylight$LAYOUT() {
        return constants$62.__daylight$LAYOUT;
    }
    public static VarHandle __daylight$VH() {
        return constants$62.__daylight$VH;
    }
    public static MemorySegment __daylight$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$62.__daylight$SEGMENT,"__daylight");
    }
    public static int __daylight$get() {
        return (int) constants$62.__daylight$VH.get(RuntimeHelper.requireNonNull(constants$62.__daylight$SEGMENT, "__daylight"));
    }
    public static void __daylight$set( int x) {
        constants$62.__daylight$VH.set(RuntimeHelper.requireNonNull(constants$62.__daylight$SEGMENT, "__daylight"), x);
    }
    public static MemoryLayout __timezone$LAYOUT() {
        return constants$62.__timezone$LAYOUT;
    }
    public static VarHandle __timezone$VH() {
        return constants$62.__timezone$VH;
    }
    public static MemorySegment __timezone$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$62.__timezone$SEGMENT,"__timezone");
    }
    public static long __timezone$get() {
        return (long) constants$62.__timezone$VH.get(RuntimeHelper.requireNonNull(constants$62.__timezone$SEGMENT, "__timezone"));
    }
    public static void __timezone$set( long x) {
        constants$62.__timezone$VH.set(RuntimeHelper.requireNonNull(constants$62.__timezone$SEGMENT, "__timezone"), x);
    }
    public static MemorySegment tzname$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$62.tzname$SEGMENT,"tzname");
    }
    public static MethodHandle tzset$MH() {
        return RuntimeHelper.requireNonNull(constants$62.tzset$MH,"tzset");
    }
    public static void tzset () {
        var mh$ = tzset$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MemoryLayout daylight$LAYOUT() {
        return constants$62.daylight$LAYOUT;
    }
    public static VarHandle daylight$VH() {
        return constants$62.daylight$VH;
    }
    public static MemorySegment daylight$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$62.daylight$SEGMENT,"daylight");
    }
    public static int daylight$get() {
        return (int) constants$62.daylight$VH.get(RuntimeHelper.requireNonNull(constants$62.daylight$SEGMENT, "daylight"));
    }
    public static void daylight$set( int x) {
        constants$62.daylight$VH.set(RuntimeHelper.requireNonNull(constants$62.daylight$SEGMENT, "daylight"), x);
    }
    public static MemoryLayout timezone$LAYOUT() {
        return constants$62.timezone$LAYOUT;
    }
    public static VarHandle timezone$VH() {
        return constants$62.timezone$VH;
    }
    public static MemorySegment timezone$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$62.timezone$SEGMENT,"timezone");
    }
    public static long timezone$get() {
        return (long) constants$62.timezone$VH.get(RuntimeHelper.requireNonNull(constants$62.timezone$SEGMENT, "timezone"));
    }
    public static void timezone$set( long x) {
        constants$62.timezone$VH.set(RuntimeHelper.requireNonNull(constants$62.timezone$SEGMENT, "timezone"), x);
    }
    public static MethodHandle timegm$MH() {
        return RuntimeHelper.requireNonNull(constants$63.timegm$MH,"timegm");
    }
    public static long timegm ( Addressable __tp) {
        var mh$ = timegm$MH();
        try {
            return (long)mh$.invokeExact(__tp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle timelocal$MH() {
        return RuntimeHelper.requireNonNull(constants$63.timelocal$MH,"timelocal");
    }
    public static long timelocal ( Addressable __tp) {
        var mh$ = timelocal$MH();
        try {
            return (long)mh$.invokeExact(__tp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle dysize$MH() {
        return RuntimeHelper.requireNonNull(constants$63.dysize$MH,"dysize");
    }
    public static int dysize ( int __year) {
        var mh$ = dysize$MH();
        try {
            return (int)mh$.invokeExact(__year);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nanosleep$MH() {
        return RuntimeHelper.requireNonNull(constants$63.nanosleep$MH,"nanosleep");
    }
    public static int nanosleep ( Addressable __requested_time,  Addressable __remaining) {
        var mh$ = nanosleep$MH();
        try {
            return (int)mh$.invokeExact(__requested_time, __remaining);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clock_getres$MH() {
        return RuntimeHelper.requireNonNull(constants$63.clock_getres$MH,"clock_getres");
    }
    public static int clock_getres ( int __clock_id,  Addressable __res) {
        var mh$ = clock_getres$MH();
        try {
            return (int)mh$.invokeExact(__clock_id, __res);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clock_gettime$MH() {
        return RuntimeHelper.requireNonNull(constants$63.clock_gettime$MH,"clock_gettime");
    }
    public static int clock_gettime ( int __clock_id,  Addressable __tp) {
        var mh$ = clock_gettime$MH();
        try {
            return (int)mh$.invokeExact(__clock_id, __tp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clock_settime$MH() {
        return RuntimeHelper.requireNonNull(constants$64.clock_settime$MH,"clock_settime");
    }
    public static int clock_settime ( int __clock_id,  Addressable __tp) {
        var mh$ = clock_settime$MH();
        try {
            return (int)mh$.invokeExact(__clock_id, __tp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clock_nanosleep$MH() {
        return RuntimeHelper.requireNonNull(constants$64.clock_nanosleep$MH,"clock_nanosleep");
    }
    public static int clock_nanosleep ( int __clock_id,  int __flags,  Addressable __req,  Addressable __rem) {
        var mh$ = clock_nanosleep$MH();
        try {
            return (int)mh$.invokeExact(__clock_id, __flags, __req, __rem);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clock_getcpuclockid$MH() {
        return RuntimeHelper.requireNonNull(constants$64.clock_getcpuclockid$MH,"clock_getcpuclockid");
    }
    public static int clock_getcpuclockid ( int __pid,  Addressable __clock_id) {
        var mh$ = clock_getcpuclockid$MH();
        try {
            return (int)mh$.invokeExact(__pid, __clock_id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle timer_create$MH() {
        return RuntimeHelper.requireNonNull(constants$64.timer_create$MH,"timer_create");
    }
    public static int timer_create ( int __clock_id,  Addressable __evp,  Addressable __timerid) {
        var mh$ = timer_create$MH();
        try {
            return (int)mh$.invokeExact(__clock_id, __evp, __timerid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle timer_delete$MH() {
        return RuntimeHelper.requireNonNull(constants$64.timer_delete$MH,"timer_delete");
    }
    public static int timer_delete ( Addressable __timerid) {
        var mh$ = timer_delete$MH();
        try {
            return (int)mh$.invokeExact(__timerid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle timer_settime$MH() {
        return RuntimeHelper.requireNonNull(constants$64.timer_settime$MH,"timer_settime");
    }
    public static int timer_settime ( Addressable __timerid,  int __flags,  Addressable __value,  Addressable __ovalue) {
        var mh$ = timer_settime$MH();
        try {
            return (int)mh$.invokeExact(__timerid, __flags, __value, __ovalue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle timer_gettime$MH() {
        return RuntimeHelper.requireNonNull(constants$65.timer_gettime$MH,"timer_gettime");
    }
    public static int timer_gettime ( Addressable __timerid,  Addressable __value) {
        var mh$ = timer_gettime$MH();
        try {
            return (int)mh$.invokeExact(__timerid, __value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle timer_getoverrun$MH() {
        return RuntimeHelper.requireNonNull(constants$65.timer_getoverrun$MH,"timer_getoverrun");
    }
    public static int timer_getoverrun ( Addressable __timerid) {
        var mh$ = timer_getoverrun$MH();
        try {
            return (int)mh$.invokeExact(__timerid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle timespec_get$MH() {
        return RuntimeHelper.requireNonNull(constants$65.timespec_get$MH,"timespec_get");
    }
    public static int timespec_get ( Addressable __ts,  int __base) {
        var mh$ = timespec_get$MH();
        try {
            return (int)mh$.invokeExact(__ts, __base);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gettimeofday$MH() {
        return RuntimeHelper.requireNonNull(constants$65.gettimeofday$MH,"gettimeofday");
    }
    public static int gettimeofday ( Addressable __tv,  Addressable __tz) {
        var mh$ = gettimeofday$MH();
        try {
            return (int)mh$.invokeExact(__tv, __tz);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle settimeofday$MH() {
        return RuntimeHelper.requireNonNull(constants$65.settimeofday$MH,"settimeofday");
    }
    public static int settimeofday ( Addressable __tv,  Addressable __tz) {
        var mh$ = settimeofday$MH();
        try {
            return (int)mh$.invokeExact(__tv, __tz);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle adjtime$MH() {
        return RuntimeHelper.requireNonNull(constants$65.adjtime$MH,"adjtime");
    }
    public static int adjtime ( Addressable __delta,  Addressable __olddelta) {
        var mh$ = adjtime$MH();
        try {
            return (int)mh$.invokeExact(__delta, __olddelta);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int ITIMER_REAL() {
        return (int)0L;
    }
    public static int ITIMER_VIRTUAL() {
        return (int)1L;
    }
    public static int ITIMER_PROF() {
        return (int)2L;
    }
    public static OfInt __itimer_which_t = Constants$root.C_INT$LAYOUT;
    public static MethodHandle getitimer$MH() {
        return RuntimeHelper.requireNonNull(constants$66.getitimer$MH,"getitimer");
    }
    public static int getitimer ( int __which,  Addressable __value) {
        var mh$ = getitimer$MH();
        try {
            return (int)mh$.invokeExact(__which, __value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setitimer$MH() {
        return RuntimeHelper.requireNonNull(constants$66.setitimer$MH,"setitimer");
    }
    public static int setitimer ( int __which,  Addressable __new,  Addressable __old) {
        var mh$ = setitimer$MH();
        try {
            return (int)mh$.invokeExact(__which, __new, __old);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle utimes$MH() {
        return RuntimeHelper.requireNonNull(constants$66.utimes$MH,"utimes");
    }
    public static int utimes ( Addressable __file,  Addressable __tvp) {
        var mh$ = utimes$MH();
        try {
            return (int)mh$.invokeExact(__file, __tvp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lutimes$MH() {
        return RuntimeHelper.requireNonNull(constants$66.lutimes$MH,"lutimes");
    }
    public static int lutimes ( Addressable __file,  Addressable __tvp) {
        var mh$ = lutimes$MH();
        try {
            return (int)mh$.invokeExact(__file, __tvp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle futimes$MH() {
        return RuntimeHelper.requireNonNull(constants$66.futimes$MH,"futimes");
    }
    public static int futimes ( int __fd,  Addressable __tvp) {
        var mh$ = futimes$MH();
        try {
            return (int)mh$.invokeExact(__fd, __tvp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_stopwatch_start$MH() {
        return RuntimeHelper.requireNonNull(constants$66.yr_stopwatch_start$MH,"yr_stopwatch_start");
    }
    public static void yr_stopwatch_start ( Addressable stopwatch) {
        var mh$ = yr_stopwatch_start$MH();
        try {
            mh$.invokeExact(stopwatch);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_stopwatch_elapsed_ns$MH() {
        return RuntimeHelper.requireNonNull(constants$67.yr_stopwatch_elapsed_ns$MH,"yr_stopwatch_elapsed_ns");
    }
    public static long yr_stopwatch_elapsed_ns ( Addressable stopwatch) {
        var mh$ = yr_stopwatch_elapsed_ns$MH();
        try {
            return (long)mh$.invokeExact(stopwatch);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __sched_cpucount$MH() {
        return RuntimeHelper.requireNonNull(constants$67.__sched_cpucount$MH,"__sched_cpucount");
    }
    public static int __sched_cpucount ( long __setsize,  Addressable __setp) {
        var mh$ = __sched_cpucount$MH();
        try {
            return (int)mh$.invokeExact(__setsize, __setp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __sched_cpualloc$MH() {
        return RuntimeHelper.requireNonNull(constants$67.__sched_cpualloc$MH,"__sched_cpualloc");
    }
    public static MemoryAddress __sched_cpualloc ( long __count) {
        var mh$ = __sched_cpualloc$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__count);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __sched_cpufree$MH() {
        return RuntimeHelper.requireNonNull(constants$67.__sched_cpufree$MH,"__sched_cpufree");
    }
    public static void __sched_cpufree ( Addressable __set) {
        var mh$ = __sched_cpufree$MH();
        try {
            mh$.invokeExact(__set);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sched_setparam$MH() {
        return RuntimeHelper.requireNonNull(constants$67.sched_setparam$MH,"sched_setparam");
    }
    public static int sched_setparam ( int __pid,  Addressable __param) {
        var mh$ = sched_setparam$MH();
        try {
            return (int)mh$.invokeExact(__pid, __param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sched_getparam$MH() {
        return RuntimeHelper.requireNonNull(constants$67.sched_getparam$MH,"sched_getparam");
    }
    public static int sched_getparam ( int __pid,  Addressable __param) {
        var mh$ = sched_getparam$MH();
        try {
            return (int)mh$.invokeExact(__pid, __param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sched_setscheduler$MH() {
        return RuntimeHelper.requireNonNull(constants$68.sched_setscheduler$MH,"sched_setscheduler");
    }
    public static int sched_setscheduler ( int __pid,  int __policy,  Addressable __param) {
        var mh$ = sched_setscheduler$MH();
        try {
            return (int)mh$.invokeExact(__pid, __policy, __param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sched_getscheduler$MH() {
        return RuntimeHelper.requireNonNull(constants$68.sched_getscheduler$MH,"sched_getscheduler");
    }
    public static int sched_getscheduler ( int __pid) {
        var mh$ = sched_getscheduler$MH();
        try {
            return (int)mh$.invokeExact(__pid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sched_yield$MH() {
        return RuntimeHelper.requireNonNull(constants$68.sched_yield$MH,"sched_yield");
    }
    public static int sched_yield () {
        var mh$ = sched_yield$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sched_get_priority_max$MH() {
        return RuntimeHelper.requireNonNull(constants$68.sched_get_priority_max$MH,"sched_get_priority_max");
    }
    public static int sched_get_priority_max ( int __algorithm) {
        var mh$ = sched_get_priority_max$MH();
        try {
            return (int)mh$.invokeExact(__algorithm);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sched_get_priority_min$MH() {
        return RuntimeHelper.requireNonNull(constants$68.sched_get_priority_min$MH,"sched_get_priority_min");
    }
    public static int sched_get_priority_min ( int __algorithm) {
        var mh$ = sched_get_priority_min$MH();
        try {
            return (int)mh$.invokeExact(__algorithm);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sched_rr_get_interval$MH() {
        return RuntimeHelper.requireNonNull(constants$68.sched_rr_get_interval$MH,"sched_rr_get_interval");
    }
    public static int sched_rr_get_interval ( int __pid,  Addressable __t) {
        var mh$ = sched_rr_get_interval$MH();
        try {
            return (int)mh$.invokeExact(__pid, __t);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int PTHREAD_CREATE_JOINABLE() {
        return (int)0L;
    }
    public static int PTHREAD_CREATE_DETACHED() {
        return (int)1L;
    }
    public static int PTHREAD_MUTEX_TIMED_NP() {
        return (int)0L;
    }
    public static int PTHREAD_MUTEX_RECURSIVE_NP() {
        return (int)1L;
    }
    public static int PTHREAD_MUTEX_ERRORCHECK_NP() {
        return (int)2L;
    }
    public static int PTHREAD_MUTEX_ADAPTIVE_NP() {
        return (int)3L;
    }
    public static int PTHREAD_MUTEX_NORMAL() {
        return (int)0L;
    }
    public static int PTHREAD_MUTEX_RECURSIVE() {
        return (int)1L;
    }
    public static int PTHREAD_MUTEX_ERRORCHECK() {
        return (int)2L;
    }
    public static int PTHREAD_MUTEX_DEFAULT() {
        return (int)0L;
    }
    public static int PTHREAD_MUTEX_STALLED() {
        return (int)0L;
    }
    public static int PTHREAD_MUTEX_STALLED_NP() {
        return (int)0L;
    }
    public static int PTHREAD_MUTEX_ROBUST() {
        return (int)1L;
    }
    public static int PTHREAD_MUTEX_ROBUST_NP() {
        return (int)1L;
    }
    public static int PTHREAD_PRIO_NONE() {
        return (int)0L;
    }
    public static int PTHREAD_PRIO_INHERIT() {
        return (int)1L;
    }
    public static int PTHREAD_PRIO_PROTECT() {
        return (int)2L;
    }
    public static int PTHREAD_RWLOCK_PREFER_READER_NP() {
        return (int)0L;
    }
    public static int PTHREAD_RWLOCK_PREFER_WRITER_NP() {
        return (int)1L;
    }
    public static int PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP() {
        return (int)2L;
    }
    public static int PTHREAD_RWLOCK_DEFAULT_NP() {
        return (int)0L;
    }
    public static int PTHREAD_INHERIT_SCHED() {
        return (int)0L;
    }
    public static int PTHREAD_EXPLICIT_SCHED() {
        return (int)1L;
    }
    public static int PTHREAD_SCOPE_SYSTEM() {
        return (int)0L;
    }
    public static int PTHREAD_SCOPE_PROCESS() {
        return (int)1L;
    }
    public static int PTHREAD_PROCESS_PRIVATE() {
        return (int)0L;
    }
    public static int PTHREAD_PROCESS_SHARED() {
        return (int)1L;
    }
    public static int PTHREAD_CANCEL_ENABLE() {
        return (int)0L;
    }
    public static int PTHREAD_CANCEL_DISABLE() {
        return (int)1L;
    }
    public static int PTHREAD_CANCEL_DEFERRED() {
        return (int)0L;
    }
    public static int PTHREAD_CANCEL_ASYNCHRONOUS() {
        return (int)1L;
    }
    public static MethodHandle pthread_create$MH() {
        return RuntimeHelper.requireNonNull(constants$69.pthread_create$MH,"pthread_create");
    }
    public static int pthread_create ( Addressable __newthread,  Addressable __attr,  Addressable __start_routine,  Addressable __arg) {
        var mh$ = pthread_create$MH();
        try {
            return (int)mh$.invokeExact(__newthread, __attr, __start_routine, __arg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_exit$MH() {
        return RuntimeHelper.requireNonNull(constants$69.pthread_exit$MH,"pthread_exit");
    }
    public static void pthread_exit ( Addressable __retval) {
        var mh$ = pthread_exit$MH();
        try {
            mh$.invokeExact(__retval);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_join$MH() {
        return RuntimeHelper.requireNonNull(constants$69.pthread_join$MH,"pthread_join");
    }
    public static int pthread_join ( long __th,  Addressable __thread_return) {
        var mh$ = pthread_join$MH();
        try {
            return (int)mh$.invokeExact(__th, __thread_return);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_detach$MH() {
        return RuntimeHelper.requireNonNull(constants$69.pthread_detach$MH,"pthread_detach");
    }
    public static int pthread_detach ( long __th) {
        var mh$ = pthread_detach$MH();
        try {
            return (int)mh$.invokeExact(__th);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_self$MH() {
        return RuntimeHelper.requireNonNull(constants$70.pthread_self$MH,"pthread_self");
    }
    public static long pthread_self () {
        var mh$ = pthread_self$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_equal$MH() {
        return RuntimeHelper.requireNonNull(constants$70.pthread_equal$MH,"pthread_equal");
    }
    public static int pthread_equal ( long __thread1,  long __thread2) {
        var mh$ = pthread_equal$MH();
        try {
            return (int)mh$.invokeExact(__thread1, __thread2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_attr_init$MH() {
        return RuntimeHelper.requireNonNull(constants$70.pthread_attr_init$MH,"pthread_attr_init");
    }
    public static int pthread_attr_init ( Addressable __attr) {
        var mh$ = pthread_attr_init$MH();
        try {
            return (int)mh$.invokeExact(__attr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_attr_destroy$MH() {
        return RuntimeHelper.requireNonNull(constants$70.pthread_attr_destroy$MH,"pthread_attr_destroy");
    }
    public static int pthread_attr_destroy ( Addressable __attr) {
        var mh$ = pthread_attr_destroy$MH();
        try {
            return (int)mh$.invokeExact(__attr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_attr_getdetachstate$MH() {
        return RuntimeHelper.requireNonNull(constants$70.pthread_attr_getdetachstate$MH,"pthread_attr_getdetachstate");
    }
    public static int pthread_attr_getdetachstate ( Addressable __attr,  Addressable __detachstate) {
        var mh$ = pthread_attr_getdetachstate$MH();
        try {
            return (int)mh$.invokeExact(__attr, __detachstate);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_attr_setdetachstate$MH() {
        return RuntimeHelper.requireNonNull(constants$70.pthread_attr_setdetachstate$MH,"pthread_attr_setdetachstate");
    }
    public static int pthread_attr_setdetachstate ( Addressable __attr,  int __detachstate) {
        var mh$ = pthread_attr_setdetachstate$MH();
        try {
            return (int)mh$.invokeExact(__attr, __detachstate);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_attr_getguardsize$MH() {
        return RuntimeHelper.requireNonNull(constants$71.pthread_attr_getguardsize$MH,"pthread_attr_getguardsize");
    }
    public static int pthread_attr_getguardsize ( Addressable __attr,  Addressable __guardsize) {
        var mh$ = pthread_attr_getguardsize$MH();
        try {
            return (int)mh$.invokeExact(__attr, __guardsize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_attr_setguardsize$MH() {
        return RuntimeHelper.requireNonNull(constants$71.pthread_attr_setguardsize$MH,"pthread_attr_setguardsize");
    }
    public static int pthread_attr_setguardsize ( Addressable __attr,  long __guardsize) {
        var mh$ = pthread_attr_setguardsize$MH();
        try {
            return (int)mh$.invokeExact(__attr, __guardsize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_attr_getschedparam$MH() {
        return RuntimeHelper.requireNonNull(constants$71.pthread_attr_getschedparam$MH,"pthread_attr_getschedparam");
    }
    public static int pthread_attr_getschedparam ( Addressable __attr,  Addressable __param) {
        var mh$ = pthread_attr_getschedparam$MH();
        try {
            return (int)mh$.invokeExact(__attr, __param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_attr_setschedparam$MH() {
        return RuntimeHelper.requireNonNull(constants$71.pthread_attr_setschedparam$MH,"pthread_attr_setschedparam");
    }
    public static int pthread_attr_setschedparam ( Addressable __attr,  Addressable __param) {
        var mh$ = pthread_attr_setschedparam$MH();
        try {
            return (int)mh$.invokeExact(__attr, __param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_attr_getschedpolicy$MH() {
        return RuntimeHelper.requireNonNull(constants$71.pthread_attr_getschedpolicy$MH,"pthread_attr_getschedpolicy");
    }
    public static int pthread_attr_getschedpolicy ( Addressable __attr,  Addressable __policy) {
        var mh$ = pthread_attr_getschedpolicy$MH();
        try {
            return (int)mh$.invokeExact(__attr, __policy);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_attr_setschedpolicy$MH() {
        return RuntimeHelper.requireNonNull(constants$71.pthread_attr_setschedpolicy$MH,"pthread_attr_setschedpolicy");
    }
    public static int pthread_attr_setschedpolicy ( Addressable __attr,  int __policy) {
        var mh$ = pthread_attr_setschedpolicy$MH();
        try {
            return (int)mh$.invokeExact(__attr, __policy);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_attr_getinheritsched$MH() {
        return RuntimeHelper.requireNonNull(constants$72.pthread_attr_getinheritsched$MH,"pthread_attr_getinheritsched");
    }
    public static int pthread_attr_getinheritsched ( Addressable __attr,  Addressable __inherit) {
        var mh$ = pthread_attr_getinheritsched$MH();
        try {
            return (int)mh$.invokeExact(__attr, __inherit);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_attr_setinheritsched$MH() {
        return RuntimeHelper.requireNonNull(constants$72.pthread_attr_setinheritsched$MH,"pthread_attr_setinheritsched");
    }
    public static int pthread_attr_setinheritsched ( Addressable __attr,  int __inherit) {
        var mh$ = pthread_attr_setinheritsched$MH();
        try {
            return (int)mh$.invokeExact(__attr, __inherit);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_attr_getscope$MH() {
        return RuntimeHelper.requireNonNull(constants$72.pthread_attr_getscope$MH,"pthread_attr_getscope");
    }
    public static int pthread_attr_getscope ( Addressable __attr,  Addressable __scope) {
        var mh$ = pthread_attr_getscope$MH();
        try {
            return (int)mh$.invokeExact(__attr, __scope);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_attr_setscope$MH() {
        return RuntimeHelper.requireNonNull(constants$72.pthread_attr_setscope$MH,"pthread_attr_setscope");
    }
    public static int pthread_attr_setscope ( Addressable __attr,  int __scope) {
        var mh$ = pthread_attr_setscope$MH();
        try {
            return (int)mh$.invokeExact(__attr, __scope);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_attr_getstackaddr$MH() {
        return RuntimeHelper.requireNonNull(constants$72.pthread_attr_getstackaddr$MH,"pthread_attr_getstackaddr");
    }
    public static int pthread_attr_getstackaddr ( Addressable __attr,  Addressable __stackaddr) {
        var mh$ = pthread_attr_getstackaddr$MH();
        try {
            return (int)mh$.invokeExact(__attr, __stackaddr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_attr_setstackaddr$MH() {
        return RuntimeHelper.requireNonNull(constants$72.pthread_attr_setstackaddr$MH,"pthread_attr_setstackaddr");
    }
    public static int pthread_attr_setstackaddr ( Addressable __attr,  Addressable __stackaddr) {
        var mh$ = pthread_attr_setstackaddr$MH();
        try {
            return (int)mh$.invokeExact(__attr, __stackaddr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_attr_getstacksize$MH() {
        return RuntimeHelper.requireNonNull(constants$73.pthread_attr_getstacksize$MH,"pthread_attr_getstacksize");
    }
    public static int pthread_attr_getstacksize ( Addressable __attr,  Addressable __stacksize) {
        var mh$ = pthread_attr_getstacksize$MH();
        try {
            return (int)mh$.invokeExact(__attr, __stacksize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_attr_setstacksize$MH() {
        return RuntimeHelper.requireNonNull(constants$73.pthread_attr_setstacksize$MH,"pthread_attr_setstacksize");
    }
    public static int pthread_attr_setstacksize ( Addressable __attr,  long __stacksize) {
        var mh$ = pthread_attr_setstacksize$MH();
        try {
            return (int)mh$.invokeExact(__attr, __stacksize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_attr_getstack$MH() {
        return RuntimeHelper.requireNonNull(constants$73.pthread_attr_getstack$MH,"pthread_attr_getstack");
    }
    public static int pthread_attr_getstack ( Addressable __attr,  Addressable __stackaddr,  Addressable __stacksize) {
        var mh$ = pthread_attr_getstack$MH();
        try {
            return (int)mh$.invokeExact(__attr, __stackaddr, __stacksize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_attr_setstack$MH() {
        return RuntimeHelper.requireNonNull(constants$73.pthread_attr_setstack$MH,"pthread_attr_setstack");
    }
    public static int pthread_attr_setstack ( Addressable __attr,  Addressable __stackaddr,  long __stacksize) {
        var mh$ = pthread_attr_setstack$MH();
        try {
            return (int)mh$.invokeExact(__attr, __stackaddr, __stacksize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_setschedparam$MH() {
        return RuntimeHelper.requireNonNull(constants$73.pthread_setschedparam$MH,"pthread_setschedparam");
    }
    public static int pthread_setschedparam ( long __target_thread,  int __policy,  Addressable __param) {
        var mh$ = pthread_setschedparam$MH();
        try {
            return (int)mh$.invokeExact(__target_thread, __policy, __param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_getschedparam$MH() {
        return RuntimeHelper.requireNonNull(constants$73.pthread_getschedparam$MH,"pthread_getschedparam");
    }
    public static int pthread_getschedparam ( long __target_thread,  Addressable __policy,  Addressable __param) {
        var mh$ = pthread_getschedparam$MH();
        try {
            return (int)mh$.invokeExact(__target_thread, __policy, __param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_setschedprio$MH() {
        return RuntimeHelper.requireNonNull(constants$74.pthread_setschedprio$MH,"pthread_setschedprio");
    }
    public static int pthread_setschedprio ( long __target_thread,  int __prio) {
        var mh$ = pthread_setschedprio$MH();
        try {
            return (int)mh$.invokeExact(__target_thread, __prio);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_once$MH() {
        return RuntimeHelper.requireNonNull(constants$74.pthread_once$MH,"pthread_once");
    }
    public static int pthread_once ( Addressable __once_control,  Addressable __init_routine) {
        var mh$ = pthread_once$MH();
        try {
            return (int)mh$.invokeExact(__once_control, __init_routine);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_setcancelstate$MH() {
        return RuntimeHelper.requireNonNull(constants$74.pthread_setcancelstate$MH,"pthread_setcancelstate");
    }
    public static int pthread_setcancelstate ( int __state,  Addressable __oldstate) {
        var mh$ = pthread_setcancelstate$MH();
        try {
            return (int)mh$.invokeExact(__state, __oldstate);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_setcanceltype$MH() {
        return RuntimeHelper.requireNonNull(constants$74.pthread_setcanceltype$MH,"pthread_setcanceltype");
    }
    public static int pthread_setcanceltype ( int __type,  Addressable __oldtype) {
        var mh$ = pthread_setcanceltype$MH();
        try {
            return (int)mh$.invokeExact(__type, __oldtype);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_cancel$MH() {
        return RuntimeHelper.requireNonNull(constants$75.pthread_cancel$MH,"pthread_cancel");
    }
    public static int pthread_cancel ( long __th) {
        var mh$ = pthread_cancel$MH();
        try {
            return (int)mh$.invokeExact(__th);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_testcancel$MH() {
        return RuntimeHelper.requireNonNull(constants$75.pthread_testcancel$MH,"pthread_testcancel");
    }
    public static void pthread_testcancel () {
        var mh$ = pthread_testcancel$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __pthread_register_cancel$MH() {
        return RuntimeHelper.requireNonNull(constants$75.__pthread_register_cancel$MH,"__pthread_register_cancel");
    }
    public static void __pthread_register_cancel ( Addressable __buf) {
        var mh$ = __pthread_register_cancel$MH();
        try {
            mh$.invokeExact(__buf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __pthread_unregister_cancel$MH() {
        return RuntimeHelper.requireNonNull(constants$75.__pthread_unregister_cancel$MH,"__pthread_unregister_cancel");
    }
    public static void __pthread_unregister_cancel ( Addressable __buf) {
        var mh$ = __pthread_unregister_cancel$MH();
        try {
            mh$.invokeExact(__buf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __pthread_unwind_next$MH() {
        return RuntimeHelper.requireNonNull(constants$75.__pthread_unwind_next$MH,"__pthread_unwind_next");
    }
    public static void __pthread_unwind_next ( Addressable __buf) {
        var mh$ = __pthread_unwind_next$MH();
        try {
            mh$.invokeExact(__buf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_mutex_init$MH() {
        return RuntimeHelper.requireNonNull(constants$75.pthread_mutex_init$MH,"pthread_mutex_init");
    }
    public static int pthread_mutex_init ( Addressable __mutex,  Addressable __mutexattr) {
        var mh$ = pthread_mutex_init$MH();
        try {
            return (int)mh$.invokeExact(__mutex, __mutexattr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_mutex_destroy$MH() {
        return RuntimeHelper.requireNonNull(constants$76.pthread_mutex_destroy$MH,"pthread_mutex_destroy");
    }
    public static int pthread_mutex_destroy ( Addressable __mutex) {
        var mh$ = pthread_mutex_destroy$MH();
        try {
            return (int)mh$.invokeExact(__mutex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_mutex_trylock$MH() {
        return RuntimeHelper.requireNonNull(constants$76.pthread_mutex_trylock$MH,"pthread_mutex_trylock");
    }
    public static int pthread_mutex_trylock ( Addressable __mutex) {
        var mh$ = pthread_mutex_trylock$MH();
        try {
            return (int)mh$.invokeExact(__mutex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_mutex_lock$MH() {
        return RuntimeHelper.requireNonNull(constants$76.pthread_mutex_lock$MH,"pthread_mutex_lock");
    }
    public static int pthread_mutex_lock ( Addressable __mutex) {
        var mh$ = pthread_mutex_lock$MH();
        try {
            return (int)mh$.invokeExact(__mutex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_mutex_timedlock$MH() {
        return RuntimeHelper.requireNonNull(constants$76.pthread_mutex_timedlock$MH,"pthread_mutex_timedlock");
    }
    public static int pthread_mutex_timedlock ( Addressable __mutex,  Addressable __abstime) {
        var mh$ = pthread_mutex_timedlock$MH();
        try {
            return (int)mh$.invokeExact(__mutex, __abstime);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_mutex_unlock$MH() {
        return RuntimeHelper.requireNonNull(constants$76.pthread_mutex_unlock$MH,"pthread_mutex_unlock");
    }
    public static int pthread_mutex_unlock ( Addressable __mutex) {
        var mh$ = pthread_mutex_unlock$MH();
        try {
            return (int)mh$.invokeExact(__mutex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_mutex_getprioceiling$MH() {
        return RuntimeHelper.requireNonNull(constants$76.pthread_mutex_getprioceiling$MH,"pthread_mutex_getprioceiling");
    }
    public static int pthread_mutex_getprioceiling ( Addressable __mutex,  Addressable __prioceiling) {
        var mh$ = pthread_mutex_getprioceiling$MH();
        try {
            return (int)mh$.invokeExact(__mutex, __prioceiling);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_mutex_setprioceiling$MH() {
        return RuntimeHelper.requireNonNull(constants$77.pthread_mutex_setprioceiling$MH,"pthread_mutex_setprioceiling");
    }
    public static int pthread_mutex_setprioceiling ( Addressable __mutex,  int __prioceiling,  Addressable __old_ceiling) {
        var mh$ = pthread_mutex_setprioceiling$MH();
        try {
            return (int)mh$.invokeExact(__mutex, __prioceiling, __old_ceiling);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_mutex_consistent$MH() {
        return RuntimeHelper.requireNonNull(constants$77.pthread_mutex_consistent$MH,"pthread_mutex_consistent");
    }
    public static int pthread_mutex_consistent ( Addressable __mutex) {
        var mh$ = pthread_mutex_consistent$MH();
        try {
            return (int)mh$.invokeExact(__mutex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_mutexattr_init$MH() {
        return RuntimeHelper.requireNonNull(constants$77.pthread_mutexattr_init$MH,"pthread_mutexattr_init");
    }
    public static int pthread_mutexattr_init ( Addressable __attr) {
        var mh$ = pthread_mutexattr_init$MH();
        try {
            return (int)mh$.invokeExact(__attr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_mutexattr_destroy$MH() {
        return RuntimeHelper.requireNonNull(constants$77.pthread_mutexattr_destroy$MH,"pthread_mutexattr_destroy");
    }
    public static int pthread_mutexattr_destroy ( Addressable __attr) {
        var mh$ = pthread_mutexattr_destroy$MH();
        try {
            return (int)mh$.invokeExact(__attr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_mutexattr_getpshared$MH() {
        return RuntimeHelper.requireNonNull(constants$77.pthread_mutexattr_getpshared$MH,"pthread_mutexattr_getpshared");
    }
    public static int pthread_mutexattr_getpshared ( Addressable __attr,  Addressable __pshared) {
        var mh$ = pthread_mutexattr_getpshared$MH();
        try {
            return (int)mh$.invokeExact(__attr, __pshared);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_mutexattr_setpshared$MH() {
        return RuntimeHelper.requireNonNull(constants$77.pthread_mutexattr_setpshared$MH,"pthread_mutexattr_setpshared");
    }
    public static int pthread_mutexattr_setpshared ( Addressable __attr,  int __pshared) {
        var mh$ = pthread_mutexattr_setpshared$MH();
        try {
            return (int)mh$.invokeExact(__attr, __pshared);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_mutexattr_gettype$MH() {
        return RuntimeHelper.requireNonNull(constants$78.pthread_mutexattr_gettype$MH,"pthread_mutexattr_gettype");
    }
    public static int pthread_mutexattr_gettype ( Addressable __attr,  Addressable __kind) {
        var mh$ = pthread_mutexattr_gettype$MH();
        try {
            return (int)mh$.invokeExact(__attr, __kind);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_mutexattr_settype$MH() {
        return RuntimeHelper.requireNonNull(constants$78.pthread_mutexattr_settype$MH,"pthread_mutexattr_settype");
    }
    public static int pthread_mutexattr_settype ( Addressable __attr,  int __kind) {
        var mh$ = pthread_mutexattr_settype$MH();
        try {
            return (int)mh$.invokeExact(__attr, __kind);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_mutexattr_getprotocol$MH() {
        return RuntimeHelper.requireNonNull(constants$78.pthread_mutexattr_getprotocol$MH,"pthread_mutexattr_getprotocol");
    }
    public static int pthread_mutexattr_getprotocol ( Addressable __attr,  Addressable __protocol) {
        var mh$ = pthread_mutexattr_getprotocol$MH();
        try {
            return (int)mh$.invokeExact(__attr, __protocol);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_mutexattr_setprotocol$MH() {
        return RuntimeHelper.requireNonNull(constants$78.pthread_mutexattr_setprotocol$MH,"pthread_mutexattr_setprotocol");
    }
    public static int pthread_mutexattr_setprotocol ( Addressable __attr,  int __protocol) {
        var mh$ = pthread_mutexattr_setprotocol$MH();
        try {
            return (int)mh$.invokeExact(__attr, __protocol);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_mutexattr_getprioceiling$MH() {
        return RuntimeHelper.requireNonNull(constants$78.pthread_mutexattr_getprioceiling$MH,"pthread_mutexattr_getprioceiling");
    }
    public static int pthread_mutexattr_getprioceiling ( Addressable __attr,  Addressable __prioceiling) {
        var mh$ = pthread_mutexattr_getprioceiling$MH();
        try {
            return (int)mh$.invokeExact(__attr, __prioceiling);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_mutexattr_setprioceiling$MH() {
        return RuntimeHelper.requireNonNull(constants$78.pthread_mutexattr_setprioceiling$MH,"pthread_mutexattr_setprioceiling");
    }
    public static int pthread_mutexattr_setprioceiling ( Addressable __attr,  int __prioceiling) {
        var mh$ = pthread_mutexattr_setprioceiling$MH();
        try {
            return (int)mh$.invokeExact(__attr, __prioceiling);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_mutexattr_getrobust$MH() {
        return RuntimeHelper.requireNonNull(constants$79.pthread_mutexattr_getrobust$MH,"pthread_mutexattr_getrobust");
    }
    public static int pthread_mutexattr_getrobust ( Addressable __attr,  Addressable __robustness) {
        var mh$ = pthread_mutexattr_getrobust$MH();
        try {
            return (int)mh$.invokeExact(__attr, __robustness);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_mutexattr_setrobust$MH() {
        return RuntimeHelper.requireNonNull(constants$79.pthread_mutexattr_setrobust$MH,"pthread_mutexattr_setrobust");
    }
    public static int pthread_mutexattr_setrobust ( Addressable __attr,  int __robustness) {
        var mh$ = pthread_mutexattr_setrobust$MH();
        try {
            return (int)mh$.invokeExact(__attr, __robustness);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_rwlock_init$MH() {
        return RuntimeHelper.requireNonNull(constants$79.pthread_rwlock_init$MH,"pthread_rwlock_init");
    }
    public static int pthread_rwlock_init ( Addressable __rwlock,  Addressable __attr) {
        var mh$ = pthread_rwlock_init$MH();
        try {
            return (int)mh$.invokeExact(__rwlock, __attr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_rwlock_destroy$MH() {
        return RuntimeHelper.requireNonNull(constants$79.pthread_rwlock_destroy$MH,"pthread_rwlock_destroy");
    }
    public static int pthread_rwlock_destroy ( Addressable __rwlock) {
        var mh$ = pthread_rwlock_destroy$MH();
        try {
            return (int)mh$.invokeExact(__rwlock);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_rwlock_rdlock$MH() {
        return RuntimeHelper.requireNonNull(constants$79.pthread_rwlock_rdlock$MH,"pthread_rwlock_rdlock");
    }
    public static int pthread_rwlock_rdlock ( Addressable __rwlock) {
        var mh$ = pthread_rwlock_rdlock$MH();
        try {
            return (int)mh$.invokeExact(__rwlock);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_rwlock_tryrdlock$MH() {
        return RuntimeHelper.requireNonNull(constants$79.pthread_rwlock_tryrdlock$MH,"pthread_rwlock_tryrdlock");
    }
    public static int pthread_rwlock_tryrdlock ( Addressable __rwlock) {
        var mh$ = pthread_rwlock_tryrdlock$MH();
        try {
            return (int)mh$.invokeExact(__rwlock);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_rwlock_timedrdlock$MH() {
        return RuntimeHelper.requireNonNull(constants$80.pthread_rwlock_timedrdlock$MH,"pthread_rwlock_timedrdlock");
    }
    public static int pthread_rwlock_timedrdlock ( Addressable __rwlock,  Addressable __abstime) {
        var mh$ = pthread_rwlock_timedrdlock$MH();
        try {
            return (int)mh$.invokeExact(__rwlock, __abstime);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_rwlock_wrlock$MH() {
        return RuntimeHelper.requireNonNull(constants$80.pthread_rwlock_wrlock$MH,"pthread_rwlock_wrlock");
    }
    public static int pthread_rwlock_wrlock ( Addressable __rwlock) {
        var mh$ = pthread_rwlock_wrlock$MH();
        try {
            return (int)mh$.invokeExact(__rwlock);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_rwlock_trywrlock$MH() {
        return RuntimeHelper.requireNonNull(constants$80.pthread_rwlock_trywrlock$MH,"pthread_rwlock_trywrlock");
    }
    public static int pthread_rwlock_trywrlock ( Addressable __rwlock) {
        var mh$ = pthread_rwlock_trywrlock$MH();
        try {
            return (int)mh$.invokeExact(__rwlock);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_rwlock_timedwrlock$MH() {
        return RuntimeHelper.requireNonNull(constants$80.pthread_rwlock_timedwrlock$MH,"pthread_rwlock_timedwrlock");
    }
    public static int pthread_rwlock_timedwrlock ( Addressable __rwlock,  Addressable __abstime) {
        var mh$ = pthread_rwlock_timedwrlock$MH();
        try {
            return (int)mh$.invokeExact(__rwlock, __abstime);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_rwlock_unlock$MH() {
        return RuntimeHelper.requireNonNull(constants$80.pthread_rwlock_unlock$MH,"pthread_rwlock_unlock");
    }
    public static int pthread_rwlock_unlock ( Addressable __rwlock) {
        var mh$ = pthread_rwlock_unlock$MH();
        try {
            return (int)mh$.invokeExact(__rwlock);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_rwlockattr_init$MH() {
        return RuntimeHelper.requireNonNull(constants$80.pthread_rwlockattr_init$MH,"pthread_rwlockattr_init");
    }
    public static int pthread_rwlockattr_init ( Addressable __attr) {
        var mh$ = pthread_rwlockattr_init$MH();
        try {
            return (int)mh$.invokeExact(__attr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_rwlockattr_destroy$MH() {
        return RuntimeHelper.requireNonNull(constants$81.pthread_rwlockattr_destroy$MH,"pthread_rwlockattr_destroy");
    }
    public static int pthread_rwlockattr_destroy ( Addressable __attr) {
        var mh$ = pthread_rwlockattr_destroy$MH();
        try {
            return (int)mh$.invokeExact(__attr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_rwlockattr_getpshared$MH() {
        return RuntimeHelper.requireNonNull(constants$81.pthread_rwlockattr_getpshared$MH,"pthread_rwlockattr_getpshared");
    }
    public static int pthread_rwlockattr_getpshared ( Addressable __attr,  Addressable __pshared) {
        var mh$ = pthread_rwlockattr_getpshared$MH();
        try {
            return (int)mh$.invokeExact(__attr, __pshared);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_rwlockattr_setpshared$MH() {
        return RuntimeHelper.requireNonNull(constants$81.pthread_rwlockattr_setpshared$MH,"pthread_rwlockattr_setpshared");
    }
    public static int pthread_rwlockattr_setpshared ( Addressable __attr,  int __pshared) {
        var mh$ = pthread_rwlockattr_setpshared$MH();
        try {
            return (int)mh$.invokeExact(__attr, __pshared);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_rwlockattr_getkind_np$MH() {
        return RuntimeHelper.requireNonNull(constants$81.pthread_rwlockattr_getkind_np$MH,"pthread_rwlockattr_getkind_np");
    }
    public static int pthread_rwlockattr_getkind_np ( Addressable __attr,  Addressable __pref) {
        var mh$ = pthread_rwlockattr_getkind_np$MH();
        try {
            return (int)mh$.invokeExact(__attr, __pref);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_rwlockattr_setkind_np$MH() {
        return RuntimeHelper.requireNonNull(constants$81.pthread_rwlockattr_setkind_np$MH,"pthread_rwlockattr_setkind_np");
    }
    public static int pthread_rwlockattr_setkind_np ( Addressable __attr,  int __pref) {
        var mh$ = pthread_rwlockattr_setkind_np$MH();
        try {
            return (int)mh$.invokeExact(__attr, __pref);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_cond_init$MH() {
        return RuntimeHelper.requireNonNull(constants$81.pthread_cond_init$MH,"pthread_cond_init");
    }
    public static int pthread_cond_init ( Addressable __cond,  Addressable __cond_attr) {
        var mh$ = pthread_cond_init$MH();
        try {
            return (int)mh$.invokeExact(__cond, __cond_attr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_cond_destroy$MH() {
        return RuntimeHelper.requireNonNull(constants$82.pthread_cond_destroy$MH,"pthread_cond_destroy");
    }
    public static int pthread_cond_destroy ( Addressable __cond) {
        var mh$ = pthread_cond_destroy$MH();
        try {
            return (int)mh$.invokeExact(__cond);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_cond_signal$MH() {
        return RuntimeHelper.requireNonNull(constants$82.pthread_cond_signal$MH,"pthread_cond_signal");
    }
    public static int pthread_cond_signal ( Addressable __cond) {
        var mh$ = pthread_cond_signal$MH();
        try {
            return (int)mh$.invokeExact(__cond);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_cond_broadcast$MH() {
        return RuntimeHelper.requireNonNull(constants$82.pthread_cond_broadcast$MH,"pthread_cond_broadcast");
    }
    public static int pthread_cond_broadcast ( Addressable __cond) {
        var mh$ = pthread_cond_broadcast$MH();
        try {
            return (int)mh$.invokeExact(__cond);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_cond_wait$MH() {
        return RuntimeHelper.requireNonNull(constants$82.pthread_cond_wait$MH,"pthread_cond_wait");
    }
    public static int pthread_cond_wait ( Addressable __cond,  Addressable __mutex) {
        var mh$ = pthread_cond_wait$MH();
        try {
            return (int)mh$.invokeExact(__cond, __mutex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_cond_timedwait$MH() {
        return RuntimeHelper.requireNonNull(constants$82.pthread_cond_timedwait$MH,"pthread_cond_timedwait");
    }
    public static int pthread_cond_timedwait ( Addressable __cond,  Addressable __mutex,  Addressable __abstime) {
        var mh$ = pthread_cond_timedwait$MH();
        try {
            return (int)mh$.invokeExact(__cond, __mutex, __abstime);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_condattr_init$MH() {
        return RuntimeHelper.requireNonNull(constants$82.pthread_condattr_init$MH,"pthread_condattr_init");
    }
    public static int pthread_condattr_init ( Addressable __attr) {
        var mh$ = pthread_condattr_init$MH();
        try {
            return (int)mh$.invokeExact(__attr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_condattr_destroy$MH() {
        return RuntimeHelper.requireNonNull(constants$83.pthread_condattr_destroy$MH,"pthread_condattr_destroy");
    }
    public static int pthread_condattr_destroy ( Addressable __attr) {
        var mh$ = pthread_condattr_destroy$MH();
        try {
            return (int)mh$.invokeExact(__attr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_condattr_getpshared$MH() {
        return RuntimeHelper.requireNonNull(constants$83.pthread_condattr_getpshared$MH,"pthread_condattr_getpshared");
    }
    public static int pthread_condattr_getpshared ( Addressable __attr,  Addressable __pshared) {
        var mh$ = pthread_condattr_getpshared$MH();
        try {
            return (int)mh$.invokeExact(__attr, __pshared);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_condattr_setpshared$MH() {
        return RuntimeHelper.requireNonNull(constants$83.pthread_condattr_setpshared$MH,"pthread_condattr_setpshared");
    }
    public static int pthread_condattr_setpshared ( Addressable __attr,  int __pshared) {
        var mh$ = pthread_condattr_setpshared$MH();
        try {
            return (int)mh$.invokeExact(__attr, __pshared);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_condattr_getclock$MH() {
        return RuntimeHelper.requireNonNull(constants$83.pthread_condattr_getclock$MH,"pthread_condattr_getclock");
    }
    public static int pthread_condattr_getclock ( Addressable __attr,  Addressable __clock_id) {
        var mh$ = pthread_condattr_getclock$MH();
        try {
            return (int)mh$.invokeExact(__attr, __clock_id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_condattr_setclock$MH() {
        return RuntimeHelper.requireNonNull(constants$83.pthread_condattr_setclock$MH,"pthread_condattr_setclock");
    }
    public static int pthread_condattr_setclock ( Addressable __attr,  int __clock_id) {
        var mh$ = pthread_condattr_setclock$MH();
        try {
            return (int)mh$.invokeExact(__attr, __clock_id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_spin_init$MH() {
        return RuntimeHelper.requireNonNull(constants$83.pthread_spin_init$MH,"pthread_spin_init");
    }
    public static int pthread_spin_init ( Addressable __lock,  int __pshared) {
        var mh$ = pthread_spin_init$MH();
        try {
            return (int)mh$.invokeExact(__lock, __pshared);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_spin_destroy$MH() {
        return RuntimeHelper.requireNonNull(constants$84.pthread_spin_destroy$MH,"pthread_spin_destroy");
    }
    public static int pthread_spin_destroy ( Addressable __lock) {
        var mh$ = pthread_spin_destroy$MH();
        try {
            return (int)mh$.invokeExact(__lock);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_spin_lock$MH() {
        return RuntimeHelper.requireNonNull(constants$84.pthread_spin_lock$MH,"pthread_spin_lock");
    }
    public static int pthread_spin_lock ( Addressable __lock) {
        var mh$ = pthread_spin_lock$MH();
        try {
            return (int)mh$.invokeExact(__lock);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_spin_trylock$MH() {
        return RuntimeHelper.requireNonNull(constants$84.pthread_spin_trylock$MH,"pthread_spin_trylock");
    }
    public static int pthread_spin_trylock ( Addressable __lock) {
        var mh$ = pthread_spin_trylock$MH();
        try {
            return (int)mh$.invokeExact(__lock);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_spin_unlock$MH() {
        return RuntimeHelper.requireNonNull(constants$84.pthread_spin_unlock$MH,"pthread_spin_unlock");
    }
    public static int pthread_spin_unlock ( Addressable __lock) {
        var mh$ = pthread_spin_unlock$MH();
        try {
            return (int)mh$.invokeExact(__lock);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_barrier_init$MH() {
        return RuntimeHelper.requireNonNull(constants$84.pthread_barrier_init$MH,"pthread_barrier_init");
    }
    public static int pthread_barrier_init ( Addressable __barrier,  Addressable __attr,  int __count) {
        var mh$ = pthread_barrier_init$MH();
        try {
            return (int)mh$.invokeExact(__barrier, __attr, __count);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_barrier_destroy$MH() {
        return RuntimeHelper.requireNonNull(constants$84.pthread_barrier_destroy$MH,"pthread_barrier_destroy");
    }
    public static int pthread_barrier_destroy ( Addressable __barrier) {
        var mh$ = pthread_barrier_destroy$MH();
        try {
            return (int)mh$.invokeExact(__barrier);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_barrier_wait$MH() {
        return RuntimeHelper.requireNonNull(constants$85.pthread_barrier_wait$MH,"pthread_barrier_wait");
    }
    public static int pthread_barrier_wait ( Addressable __barrier) {
        var mh$ = pthread_barrier_wait$MH();
        try {
            return (int)mh$.invokeExact(__barrier);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_barrierattr_init$MH() {
        return RuntimeHelper.requireNonNull(constants$85.pthread_barrierattr_init$MH,"pthread_barrierattr_init");
    }
    public static int pthread_barrierattr_init ( Addressable __attr) {
        var mh$ = pthread_barrierattr_init$MH();
        try {
            return (int)mh$.invokeExact(__attr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_barrierattr_destroy$MH() {
        return RuntimeHelper.requireNonNull(constants$85.pthread_barrierattr_destroy$MH,"pthread_barrierattr_destroy");
    }
    public static int pthread_barrierattr_destroy ( Addressable __attr) {
        var mh$ = pthread_barrierattr_destroy$MH();
        try {
            return (int)mh$.invokeExact(__attr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_barrierattr_getpshared$MH() {
        return RuntimeHelper.requireNonNull(constants$85.pthread_barrierattr_getpshared$MH,"pthread_barrierattr_getpshared");
    }
    public static int pthread_barrierattr_getpshared ( Addressable __attr,  Addressable __pshared) {
        var mh$ = pthread_barrierattr_getpshared$MH();
        try {
            return (int)mh$.invokeExact(__attr, __pshared);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_barrierattr_setpshared$MH() {
        return RuntimeHelper.requireNonNull(constants$85.pthread_barrierattr_setpshared$MH,"pthread_barrierattr_setpshared");
    }
    public static int pthread_barrierattr_setpshared ( Addressable __attr,  int __pshared) {
        var mh$ = pthread_barrierattr_setpshared$MH();
        try {
            return (int)mh$.invokeExact(__attr, __pshared);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_key_create$MH() {
        return RuntimeHelper.requireNonNull(constants$86.pthread_key_create$MH,"pthread_key_create");
    }
    public static int pthread_key_create ( Addressable __key,  Addressable __destr_function) {
        var mh$ = pthread_key_create$MH();
        try {
            return (int)mh$.invokeExact(__key, __destr_function);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_key_delete$MH() {
        return RuntimeHelper.requireNonNull(constants$86.pthread_key_delete$MH,"pthread_key_delete");
    }
    public static int pthread_key_delete ( int __key) {
        var mh$ = pthread_key_delete$MH();
        try {
            return (int)mh$.invokeExact(__key);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_getspecific$MH() {
        return RuntimeHelper.requireNonNull(constants$86.pthread_getspecific$MH,"pthread_getspecific");
    }
    public static MemoryAddress pthread_getspecific ( int __key) {
        var mh$ = pthread_getspecific$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__key);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_setspecific$MH() {
        return RuntimeHelper.requireNonNull(constants$86.pthread_setspecific$MH,"pthread_setspecific");
    }
    public static int pthread_setspecific ( int __key,  Addressable __pointer) {
        var mh$ = pthread_setspecific$MH();
        try {
            return (int)mh$.invokeExact(__key, __pointer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_getcpuclockid$MH() {
        return RuntimeHelper.requireNonNull(constants$86.pthread_getcpuclockid$MH,"pthread_getcpuclockid");
    }
    public static int pthread_getcpuclockid ( long __thread_id,  Addressable __clock_id) {
        var mh$ = pthread_getcpuclockid$MH();
        try {
            return (int)mh$.invokeExact(__thread_id, __clock_id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_atfork$MH() {
        return RuntimeHelper.requireNonNull(constants$88.pthread_atfork$MH,"pthread_atfork");
    }
    public static int pthread_atfork ( Addressable __prepare,  Addressable __parent,  Addressable __child) {
        var mh$ = pthread_atfork$MH();
        try {
            return (int)mh$.invokeExact(__prepare, __parent, __child);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_current_thread_id$MH() {
        return RuntimeHelper.requireNonNull(constants$88.yr_current_thread_id$MH,"yr_current_thread_id");
    }
    public static long yr_current_thread_id () {
        var mh$ = yr_current_thread_id$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_mutex_create$MH() {
        return RuntimeHelper.requireNonNull(constants$88.yr_mutex_create$MH,"yr_mutex_create");
    }
    public static int yr_mutex_create ( Addressable x0) {
        var mh$ = yr_mutex_create$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_mutex_destroy$MH() {
        return RuntimeHelper.requireNonNull(constants$88.yr_mutex_destroy$MH,"yr_mutex_destroy");
    }
    public static int yr_mutex_destroy ( Addressable x0) {
        var mh$ = yr_mutex_destroy$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_mutex_lock$MH() {
        return RuntimeHelper.requireNonNull(constants$88.yr_mutex_lock$MH,"yr_mutex_lock");
    }
    public static int yr_mutex_lock ( Addressable x0) {
        var mh$ = yr_mutex_lock$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_mutex_unlock$MH() {
        return RuntimeHelper.requireNonNull(constants$88.yr_mutex_unlock$MH,"yr_mutex_unlock");
    }
    public static int yr_mutex_unlock ( Addressable x0) {
        var mh$ = yr_mutex_unlock$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_thread_storage_create$MH() {
        return RuntimeHelper.requireNonNull(constants$89.yr_thread_storage_create$MH,"yr_thread_storage_create");
    }
    public static int yr_thread_storage_create ( Addressable x0) {
        var mh$ = yr_thread_storage_create$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_thread_storage_destroy$MH() {
        return RuntimeHelper.requireNonNull(constants$89.yr_thread_storage_destroy$MH,"yr_thread_storage_destroy");
    }
    public static int yr_thread_storage_destroy ( Addressable x0) {
        var mh$ = yr_thread_storage_destroy$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_thread_storage_set_value$MH() {
        return RuntimeHelper.requireNonNull(constants$89.yr_thread_storage_set_value$MH,"yr_thread_storage_set_value");
    }
    public static int yr_thread_storage_set_value ( Addressable x0,  Addressable x1) {
        var mh$ = yr_thread_storage_set_value$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_thread_storage_get_value$MH() {
        return RuntimeHelper.requireNonNull(constants$89.yr_thread_storage_get_value$MH,"yr_thread_storage_get_value");
    }
    public static MemoryAddress yr_thread_storage_get_value ( Addressable x0) {
        var mh$ = yr_thread_storage_get_value$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_notebook_create$MH() {
        return RuntimeHelper.requireNonNull(constants$89.yr_notebook_create$MH,"yr_notebook_create");
    }
    public static int yr_notebook_create ( long page_size,  Addressable pool) {
        var mh$ = yr_notebook_create$MH();
        try {
            return (int)mh$.invokeExact(page_size, pool);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_notebook_destroy$MH() {
        return RuntimeHelper.requireNonNull(constants$89.yr_notebook_destroy$MH,"yr_notebook_destroy");
    }
    public static int yr_notebook_destroy ( Addressable pool) {
        var mh$ = yr_notebook_destroy$MH();
        try {
            return (int)mh$.invokeExact(pool);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_notebook_alloc$MH() {
        return RuntimeHelper.requireNonNull(constants$90.yr_notebook_alloc$MH,"yr_notebook_alloc");
    }
    public static MemoryAddress yr_notebook_alloc ( Addressable notebook,  long size) {
        var mh$ = yr_notebook_alloc$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(notebook, size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_re_ast_create$MH() {
        return RuntimeHelper.requireNonNull(constants$92.yr_re_ast_create$MH,"yr_re_ast_create");
    }
    public static int yr_re_ast_create ( Addressable re_ast) {
        var mh$ = yr_re_ast_create$MH();
        try {
            return (int)mh$.invokeExact(re_ast);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_re_ast_destroy$MH() {
        return RuntimeHelper.requireNonNull(constants$92.yr_re_ast_destroy$MH,"yr_re_ast_destroy");
    }
    public static void yr_re_ast_destroy ( Addressable re_ast) {
        var mh$ = yr_re_ast_destroy$MH();
        try {
            mh$.invokeExact(re_ast);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_re_ast_print$MH() {
        return RuntimeHelper.requireNonNull(constants$92.yr_re_ast_print$MH,"yr_re_ast_print");
    }
    public static void yr_re_ast_print ( Addressable re_ast) {
        var mh$ = yr_re_ast_print$MH();
        try {
            mh$.invokeExact(re_ast);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_re_ast_extract_literal$MH() {
        return RuntimeHelper.requireNonNull(constants$93.yr_re_ast_extract_literal$MH,"yr_re_ast_extract_literal");
    }
    public static MemoryAddress yr_re_ast_extract_literal ( Addressable re_ast) {
        var mh$ = yr_re_ast_extract_literal$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(re_ast);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_re_ast_has_unbounded_quantifier_for_dot$MH() {
        return RuntimeHelper.requireNonNull(constants$93.yr_re_ast_has_unbounded_quantifier_for_dot$MH,"yr_re_ast_has_unbounded_quantifier_for_dot");
    }
    public static int yr_re_ast_has_unbounded_quantifier_for_dot ( Addressable re_ast) {
        var mh$ = yr_re_ast_has_unbounded_quantifier_for_dot$MH();
        try {
            return (int)mh$.invokeExact(re_ast);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_re_ast_split_at_chaining_point$MH() {
        return RuntimeHelper.requireNonNull(constants$93.yr_re_ast_split_at_chaining_point$MH,"yr_re_ast_split_at_chaining_point");
    }
    public static int yr_re_ast_split_at_chaining_point ( Addressable re_ast,  Addressable remainder_re_ast,  Addressable min_gap,  Addressable max_gap) {
        var mh$ = yr_re_ast_split_at_chaining_point$MH();
        try {
            return (int)mh$.invokeExact(re_ast, remainder_re_ast, min_gap, max_gap);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_re_ast_emit_code$MH() {
        return RuntimeHelper.requireNonNull(constants$93.yr_re_ast_emit_code$MH,"yr_re_ast_emit_code");
    }
    public static int yr_re_ast_emit_code ( Addressable re_ast,  Addressable arena,  int backwards_code) {
        var mh$ = yr_re_ast_emit_code$MH();
        try {
            return (int)mh$.invokeExact(re_ast, arena, backwards_code);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_re_node_create$MH() {
        return RuntimeHelper.requireNonNull(constants$93.yr_re_node_create$MH,"yr_re_node_create");
    }
    public static MemoryAddress yr_re_node_create ( int type) {
        var mh$ = yr_re_node_create$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_re_node_destroy$MH() {
        return RuntimeHelper.requireNonNull(constants$93.yr_re_node_destroy$MH,"yr_re_node_destroy");
    }
    public static void yr_re_node_destroy ( Addressable node) {
        var mh$ = yr_re_node_destroy$MH();
        try {
            mh$.invokeExact(node);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_re_node_append_child$MH() {
        return RuntimeHelper.requireNonNull(constants$94.yr_re_node_append_child$MH,"yr_re_node_append_child");
    }
    public static void yr_re_node_append_child ( Addressable node,  Addressable child) {
        var mh$ = yr_re_node_append_child$MH();
        try {
            mh$.invokeExact(node, child);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_re_node_prepend_child$MH() {
        return RuntimeHelper.requireNonNull(constants$94.yr_re_node_prepend_child$MH,"yr_re_node_prepend_child");
    }
    public static void yr_re_node_prepend_child ( Addressable node,  Addressable child) {
        var mh$ = yr_re_node_prepend_child$MH();
        try {
            mh$.invokeExact(node, child);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_re_exec$MH() {
        return RuntimeHelper.requireNonNull(constants$94.yr_re_exec$MH,"yr_re_exec");
    }
    public static int yr_re_exec ( Addressable context,  Addressable code,  Addressable input_data,  long input_forwards_size,  long input_backwards_size,  int flags,  Addressable callback,  Addressable callback_args,  Addressable matches) {
        var mh$ = yr_re_exec$MH();
        try {
            return (int)mh$.invokeExact(context, code, input_data, input_forwards_size, input_backwards_size, flags, callback, callback_args, matches);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_re_fast_exec$MH() {
        return RuntimeHelper.requireNonNull(constants$94.yr_re_fast_exec$MH,"yr_re_fast_exec");
    }
    public static int yr_re_fast_exec ( Addressable context,  Addressable code,  Addressable input_data,  long input_forwards_size,  long input_backwards_size,  int flags,  Addressable callback,  Addressable callback_args,  Addressable matches) {
        var mh$ = yr_re_fast_exec$MH();
        try {
            return (int)mh$.invokeExact(context, code, input_data, input_forwards_size, input_backwards_size, flags, callback, callback_args, matches);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_re_parse$MH() {
        return RuntimeHelper.requireNonNull(constants$94.yr_re_parse$MH,"yr_re_parse");
    }
    public static int yr_re_parse ( Addressable re_string,  Addressable re_ast,  Addressable error) {
        var mh$ = yr_re_parse$MH();
        try {
            return (int)mh$.invokeExact(re_string, re_ast, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_re_parse_hex$MH() {
        return RuntimeHelper.requireNonNull(constants$94.yr_re_parse_hex$MH,"yr_re_parse_hex");
    }
    public static int yr_re_parse_hex ( Addressable hex_string,  Addressable re_ast,  Addressable error) {
        var mh$ = yr_re_parse_hex$MH();
        try {
            return (int)mh$.invokeExact(hex_string, re_ast, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_re_compile$MH() {
        return RuntimeHelper.requireNonNull(constants$95.yr_re_compile$MH,"yr_re_compile");
    }
    public static int yr_re_compile ( Addressable re_string,  int flags,  Addressable arena,  Addressable ref,  Addressable error) {
        var mh$ = yr_re_compile$MH();
        try {
            return (int)mh$.invokeExact(re_string, flags, arena, ref, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_re_match$MH() {
        return RuntimeHelper.requireNonNull(constants$95.yr_re_match$MH,"yr_re_match");
    }
    public static int yr_re_match ( Addressable context,  Addressable re,  Addressable target) {
        var mh$ = yr_re_match$MH();
        try {
            return (int)mh$.invokeExact(context, re, target);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_atoms_extract_from_re$MH() {
        return RuntimeHelper.requireNonNull(constants$95.yr_atoms_extract_from_re$MH,"yr_atoms_extract_from_re");
    }
    public static int yr_atoms_extract_from_re ( Addressable config,  Addressable re_ast,  MemorySegment modifier,  Addressable atoms,  Addressable min_atom_quality) {
        var mh$ = yr_atoms_extract_from_re$MH();
        try {
            return (int)mh$.invokeExact(config, re_ast, modifier, atoms, min_atom_quality);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_atoms_extract_from_string$MH() {
        return RuntimeHelper.requireNonNull(constants$95.yr_atoms_extract_from_string$MH,"yr_atoms_extract_from_string");
    }
    public static int yr_atoms_extract_from_string ( Addressable config,  Addressable string,  int string_length,  MemorySegment modifier,  Addressable atoms,  Addressable min_atom_quality) {
        var mh$ = yr_atoms_extract_from_string$MH();
        try {
            return (int)mh$.invokeExact(config, string, string_length, modifier, atoms, min_atom_quality);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_atoms_extract_triplets$MH() {
        return RuntimeHelper.requireNonNull(constants$96.yr_atoms_extract_triplets$MH,"yr_atoms_extract_triplets");
    }
    public static int yr_atoms_extract_triplets ( Addressable re_node,  Addressable atoms) {
        var mh$ = yr_atoms_extract_triplets$MH();
        try {
            return (int)mh$.invokeExact(re_node, atoms);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_atoms_heuristic_quality$MH() {
        return RuntimeHelper.requireNonNull(constants$96.yr_atoms_heuristic_quality$MH,"yr_atoms_heuristic_quality");
    }
    public static int yr_atoms_heuristic_quality ( Addressable config,  Addressable atom) {
        var mh$ = yr_atoms_heuristic_quality$MH();
        try {
            return (int)mh$.invokeExact(config, atom);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_atoms_table_quality$MH() {
        return RuntimeHelper.requireNonNull(constants$96.yr_atoms_table_quality$MH,"yr_atoms_table_quality");
    }
    public static int yr_atoms_table_quality ( Addressable config,  Addressable atom) {
        var mh$ = yr_atoms_table_quality$MH();
        try {
            return (int)mh$.invokeExact(config, atom);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_atoms_min_quality$MH() {
        return RuntimeHelper.requireNonNull(constants$96.yr_atoms_min_quality$MH,"yr_atoms_min_quality");
    }
    public static int yr_atoms_min_quality ( Addressable config,  Addressable atom_list) {
        var mh$ = yr_atoms_min_quality$MH();
        try {
            return (int)mh$.invokeExact(config, atom_list);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_atoms_list_destroy$MH() {
        return RuntimeHelper.requireNonNull(constants$96.yr_atoms_list_destroy$MH,"yr_atoms_list_destroy");
    }
    public static void yr_atoms_list_destroy ( Addressable list_head) {
        var mh$ = yr_atoms_list_destroy$MH();
        try {
            mh$.invokeExact(list_head);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_ac_automaton_create$MH() {
        return RuntimeHelper.requireNonNull(constants$96.yr_ac_automaton_create$MH,"yr_ac_automaton_create");
    }
    public static int yr_ac_automaton_create ( Addressable arena,  Addressable automaton) {
        var mh$ = yr_ac_automaton_create$MH();
        try {
            return (int)mh$.invokeExact(arena, automaton);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_ac_automaton_destroy$MH() {
        return RuntimeHelper.requireNonNull(constants$97.yr_ac_automaton_destroy$MH,"yr_ac_automaton_destroy");
    }
    public static int yr_ac_automaton_destroy ( Addressable automaton) {
        var mh$ = yr_ac_automaton_destroy$MH();
        try {
            return (int)mh$.invokeExact(automaton);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_ac_add_string$MH() {
        return RuntimeHelper.requireNonNull(constants$97.yr_ac_add_string$MH,"yr_ac_add_string");
    }
    public static int yr_ac_add_string ( Addressable automaton,  Addressable string,  int string_idx,  Addressable atom,  Addressable arena) {
        var mh$ = yr_ac_add_string$MH();
        try {
            return (int)mh$.invokeExact(automaton, string, string_idx, atom, arena);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_ac_compile$MH() {
        return RuntimeHelper.requireNonNull(constants$97.yr_ac_compile$MH,"yr_ac_compile");
    }
    public static int yr_ac_compile ( Addressable automaton,  Addressable arena) {
        var mh$ = yr_ac_compile$MH();
        try {
            return (int)mh$.invokeExact(automaton, arena);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_ac_print_automaton$MH() {
        return RuntimeHelper.requireNonNull(constants$97.yr_ac_print_automaton$MH,"yr_ac_print_automaton");
    }
    public static void yr_ac_print_automaton ( Addressable automaton) {
        var mh$ = yr_ac_print_automaton$MH();
        try {
            mh$.invokeExact(automaton);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_filemap_map$MH() {
        return RuntimeHelper.requireNonNull(constants$97.yr_filemap_map$MH,"yr_filemap_map");
    }
    public static int yr_filemap_map ( Addressable file_path,  Addressable pmapped_file) {
        var mh$ = yr_filemap_map$MH();
        try {
            return (int)mh$.invokeExact(file_path, pmapped_file);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_filemap_map_fd$MH() {
        return RuntimeHelper.requireNonNull(constants$97.yr_filemap_map_fd$MH,"yr_filemap_map_fd");
    }
    public static int yr_filemap_map_fd ( int file,  long offset,  long size,  Addressable pmapped_file) {
        var mh$ = yr_filemap_map_fd$MH();
        try {
            return (int)mh$.invokeExact(file, offset, size, pmapped_file);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_filemap_map_ex$MH() {
        return RuntimeHelper.requireNonNull(constants$98.yr_filemap_map_ex$MH,"yr_filemap_map_ex");
    }
    public static int yr_filemap_map_ex ( Addressable file_path,  long offset,  long size,  Addressable pmapped_file) {
        var mh$ = yr_filemap_map_ex$MH();
        try {
            return (int)mh$.invokeExact(file_path, offset, size, pmapped_file);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_filemap_unmap$MH() {
        return RuntimeHelper.requireNonNull(constants$98.yr_filemap_unmap$MH,"yr_filemap_unmap");
    }
    public static void yr_filemap_unmap ( Addressable pmapped_file) {
        var mh$ = yr_filemap_unmap$MH();
        try {
            mh$.invokeExact(pmapped_file);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_filemap_unmap_fd$MH() {
        return RuntimeHelper.requireNonNull(constants$98.yr_filemap_unmap_fd$MH,"yr_filemap_unmap_fd");
    }
    public static void yr_filemap_unmap_fd ( Addressable pmapped_file) {
        var mh$ = yr_filemap_unmap_fd$MH();
        try {
            mh$.invokeExact(pmapped_file);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _yr_compiler_push_file_name$MH() {
        return RuntimeHelper.requireNonNull(constants$99._yr_compiler_push_file_name$MH,"_yr_compiler_push_file_name");
    }
    public static int _yr_compiler_push_file_name ( Addressable compiler,  Addressable file_name) {
        var mh$ = _yr_compiler_push_file_name$MH();
        try {
            return (int)mh$.invokeExact(compiler, file_name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _yr_compiler_pop_file_name$MH() {
        return RuntimeHelper.requireNonNull(constants$100._yr_compiler_pop_file_name$MH,"_yr_compiler_pop_file_name");
    }
    public static void _yr_compiler_pop_file_name ( Addressable compiler) {
        var mh$ = _yr_compiler_pop_file_name$MH();
        try {
            mh$.invokeExact(compiler);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _yr_compiler_get_var_frame$MH() {
        return RuntimeHelper.requireNonNull(constants$100._yr_compiler_get_var_frame$MH,"_yr_compiler_get_var_frame");
    }
    public static int _yr_compiler_get_var_frame ( Addressable compiler) {
        var mh$ = _yr_compiler_get_var_frame$MH();
        try {
            return (int)mh$.invokeExact(compiler);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _yr_compiler_default_include_callback$MH() {
        return RuntimeHelper.requireNonNull(constants$100._yr_compiler_default_include_callback$MH,"_yr_compiler_default_include_callback");
    }
    public static MemoryAddress _yr_compiler_default_include_callback ( Addressable include_name,  Addressable calling_rule_filename,  Addressable calling_rule_namespace,  Addressable user_data) {
        var mh$ = _yr_compiler_default_include_callback$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(include_name, calling_rule_filename, calling_rule_namespace, user_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _yr_compiler_get_rule_by_idx$MH() {
        return RuntimeHelper.requireNonNull(constants$100._yr_compiler_get_rule_by_idx$MH,"_yr_compiler_get_rule_by_idx");
    }
    public static MemoryAddress _yr_compiler_get_rule_by_idx ( Addressable compiler,  int rule_idx) {
        var mh$ = _yr_compiler_get_rule_by_idx$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(compiler, rule_idx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _yr_compiler_store_string$MH() {
        return RuntimeHelper.requireNonNull(constants$100._yr_compiler_store_string$MH,"_yr_compiler_store_string");
    }
    public static int _yr_compiler_store_string ( Addressable compiler,  Addressable string,  Addressable ref) {
        var mh$ = _yr_compiler_store_string$MH();
        try {
            return (int)mh$.invokeExact(compiler, string, ref);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _yr_compiler_store_data$MH() {
        return RuntimeHelper.requireNonNull(constants$100._yr_compiler_store_data$MH,"_yr_compiler_store_data");
    }
    public static int _yr_compiler_store_data ( Addressable compiler,  Addressable data,  long data_length,  Addressable ref) {
        var mh$ = _yr_compiler_store_data$MH();
        try {
            return (int)mh$.invokeExact(compiler, data, data_length, ref);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_compiler_create$MH() {
        return RuntimeHelper.requireNonNull(constants$101.yr_compiler_create$MH,"yr_compiler_create");
    }
    public static int yr_compiler_create ( Addressable compiler) {
        var mh$ = yr_compiler_create$MH();
        try {
            return (int)mh$.invokeExact(compiler);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_compiler_destroy$MH() {
        return RuntimeHelper.requireNonNull(constants$101.yr_compiler_destroy$MH,"yr_compiler_destroy");
    }
    public static void yr_compiler_destroy ( Addressable compiler) {
        var mh$ = yr_compiler_destroy$MH();
        try {
            mh$.invokeExact(compiler);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_compiler_set_callback$MH() {
        return RuntimeHelper.requireNonNull(constants$101.yr_compiler_set_callback$MH,"yr_compiler_set_callback");
    }
    public static void yr_compiler_set_callback ( Addressable compiler,  Addressable callback,  Addressable user_data) {
        var mh$ = yr_compiler_set_callback$MH();
        try {
            mh$.invokeExact(compiler, callback, user_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_compiler_set_include_callback$MH() {
        return RuntimeHelper.requireNonNull(constants$101.yr_compiler_set_include_callback$MH,"yr_compiler_set_include_callback");
    }
    public static void yr_compiler_set_include_callback ( Addressable compiler,  Addressable include_callback,  Addressable include_free,  Addressable user_data) {
        var mh$ = yr_compiler_set_include_callback$MH();
        try {
            mh$.invokeExact(compiler, include_callback, include_free, user_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_compiler_set_re_ast_callback$MH() {
        return RuntimeHelper.requireNonNull(constants$101.yr_compiler_set_re_ast_callback$MH,"yr_compiler_set_re_ast_callback");
    }
    public static void yr_compiler_set_re_ast_callback ( Addressable compiler,  Addressable re_ast_callback,  Addressable user_data) {
        var mh$ = yr_compiler_set_re_ast_callback$MH();
        try {
            mh$.invokeExact(compiler, re_ast_callback, user_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_compiler_set_atom_quality_table$MH() {
        return RuntimeHelper.requireNonNull(constants$101.yr_compiler_set_atom_quality_table$MH,"yr_compiler_set_atom_quality_table");
    }
    public static void yr_compiler_set_atom_quality_table ( Addressable compiler,  Addressable table,  int entries,  byte warning_threshold) {
        var mh$ = yr_compiler_set_atom_quality_table$MH();
        try {
            mh$.invokeExact(compiler, table, entries, warning_threshold);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_compiler_load_atom_quality_table$MH() {
        return RuntimeHelper.requireNonNull(constants$102.yr_compiler_load_atom_quality_table$MH,"yr_compiler_load_atom_quality_table");
    }
    public static int yr_compiler_load_atom_quality_table ( Addressable compiler,  Addressable filename,  byte warning_threshold) {
        var mh$ = yr_compiler_load_atom_quality_table$MH();
        try {
            return (int)mh$.invokeExact(compiler, filename, warning_threshold);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_compiler_add_file$MH() {
        return RuntimeHelper.requireNonNull(constants$102.yr_compiler_add_file$MH,"yr_compiler_add_file");
    }
    public static int yr_compiler_add_file ( Addressable compiler,  Addressable rules_file,  Addressable namespace_,  Addressable file_name) {
        var mh$ = yr_compiler_add_file$MH();
        try {
            return (int)mh$.invokeExact(compiler, rules_file, namespace_, file_name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_compiler_add_fd$MH() {
        return RuntimeHelper.requireNonNull(constants$102.yr_compiler_add_fd$MH,"yr_compiler_add_fd");
    }
    public static int yr_compiler_add_fd ( Addressable compiler,  int rules_fd,  Addressable namespace_,  Addressable file_name) {
        var mh$ = yr_compiler_add_fd$MH();
        try {
            return (int)mh$.invokeExact(compiler, rules_fd, namespace_, file_name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_compiler_add_string$MH() {
        return RuntimeHelper.requireNonNull(constants$102.yr_compiler_add_string$MH,"yr_compiler_add_string");
    }
    public static int yr_compiler_add_string ( Addressable compiler,  Addressable rules_string,  Addressable namespace_) {
        var mh$ = yr_compiler_add_string$MH();
        try {
            return (int)mh$.invokeExact(compiler, rules_string, namespace_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_compiler_get_error_message$MH() {
        return RuntimeHelper.requireNonNull(constants$102.yr_compiler_get_error_message$MH,"yr_compiler_get_error_message");
    }
    public static MemoryAddress yr_compiler_get_error_message ( Addressable compiler,  Addressable buffer,  int buffer_size) {
        var mh$ = yr_compiler_get_error_message$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(compiler, buffer, buffer_size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_compiler_get_current_file_name$MH() {
        return RuntimeHelper.requireNonNull(constants$102.yr_compiler_get_current_file_name$MH,"yr_compiler_get_current_file_name");
    }
    public static MemoryAddress yr_compiler_get_current_file_name ( Addressable compiler) {
        var mh$ = yr_compiler_get_current_file_name$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(compiler);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_compiler_define_integer_variable$MH() {
        return RuntimeHelper.requireNonNull(constants$103.yr_compiler_define_integer_variable$MH,"yr_compiler_define_integer_variable");
    }
    public static int yr_compiler_define_integer_variable ( Addressable compiler,  Addressable identifier,  long value) {
        var mh$ = yr_compiler_define_integer_variable$MH();
        try {
            return (int)mh$.invokeExact(compiler, identifier, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_compiler_define_boolean_variable$MH() {
        return RuntimeHelper.requireNonNull(constants$103.yr_compiler_define_boolean_variable$MH,"yr_compiler_define_boolean_variable");
    }
    public static int yr_compiler_define_boolean_variable ( Addressable compiler,  Addressable identifier,  int value) {
        var mh$ = yr_compiler_define_boolean_variable$MH();
        try {
            return (int)mh$.invokeExact(compiler, identifier, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_compiler_define_float_variable$MH() {
        return RuntimeHelper.requireNonNull(constants$103.yr_compiler_define_float_variable$MH,"yr_compiler_define_float_variable");
    }
    public static int yr_compiler_define_float_variable ( Addressable compiler,  Addressable identifier,  double value) {
        var mh$ = yr_compiler_define_float_variable$MH();
        try {
            return (int)mh$.invokeExact(compiler, identifier, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_compiler_define_string_variable$MH() {
        return RuntimeHelper.requireNonNull(constants$103.yr_compiler_define_string_variable$MH,"yr_compiler_define_string_variable");
    }
    public static int yr_compiler_define_string_variable ( Addressable compiler,  Addressable identifier,  Addressable value) {
        var mh$ = yr_compiler_define_string_variable$MH();
        try {
            return (int)mh$.invokeExact(compiler, identifier, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_compiler_get_rules$MH() {
        return RuntimeHelper.requireNonNull(constants$103.yr_compiler_get_rules$MH,"yr_compiler_get_rules");
    }
    public static int yr_compiler_get_rules ( Addressable compiler,  Addressable rules) {
        var mh$ = yr_compiler_get_rules$MH();
        try {
            return (int)mh$.invokeExact(compiler, rules);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int YR_CONFIG_STACK_SIZE() {
        return (int)0L;
    }
    public static int YR_CONFIG_MAX_STRINGS_PER_RULE() {
        return (int)1L;
    }
    public static int YR_CONFIG_MAX_MATCH_DATA() {
        return (int)2L;
    }
    public static int YR_CONFIG_LAST() {
        return (int)3L;
    }
    public static MethodHandle yr_initialize$MH() {
        return RuntimeHelper.requireNonNull(constants$103.yr_initialize$MH,"yr_initialize");
    }
    public static int yr_initialize () {
        var mh$ = yr_initialize$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_finalize$MH() {
        return RuntimeHelper.requireNonNull(constants$104.yr_finalize$MH,"yr_finalize");
    }
    public static int yr_finalize () {
        var mh$ = yr_finalize$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_set_configuration$MH() {
        return RuntimeHelper.requireNonNull(constants$104.yr_set_configuration$MH,"yr_set_configuration");
    }
    public static int yr_set_configuration ( int x0,  Addressable x1) {
        var mh$ = yr_set_configuration$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_get_configuration$MH() {
        return RuntimeHelper.requireNonNull(constants$104.yr_get_configuration$MH,"yr_get_configuration");
    }
    public static int yr_get_configuration ( int x0,  Addressable x1) {
        var mh$ = yr_get_configuration$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_calloc$MH() {
        return RuntimeHelper.requireNonNull(constants$104.yr_calloc$MH,"yr_calloc");
    }
    public static MemoryAddress yr_calloc ( long count,  long size) {
        var mh$ = yr_calloc$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(count, size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_malloc$MH() {
        return RuntimeHelper.requireNonNull(constants$104.yr_malloc$MH,"yr_malloc");
    }
    public static MemoryAddress yr_malloc ( long size) {
        var mh$ = yr_malloc$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_realloc$MH() {
        return RuntimeHelper.requireNonNull(constants$104.yr_realloc$MH,"yr_realloc");
    }
    public static MemoryAddress yr_realloc ( Addressable ptr,  long size) {
        var mh$ = yr_realloc$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(ptr, size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_free$MH() {
        return RuntimeHelper.requireNonNull(constants$105.yr_free$MH,"yr_free");
    }
    public static void yr_free ( Addressable ptr) {
        var mh$ = yr_free$MH();
        try {
            mh$.invokeExact(ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_strdup$MH() {
        return RuntimeHelper.requireNonNull(constants$105.yr_strdup$MH,"yr_strdup");
    }
    public static MemoryAddress yr_strdup ( Addressable str) {
        var mh$ = yr_strdup$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(str);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_strndup$MH() {
        return RuntimeHelper.requireNonNull(constants$105.yr_strndup$MH,"yr_strndup");
    }
    public static MemoryAddress yr_strndup ( Addressable str,  long n) {
        var mh$ = yr_strndup$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(str, n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_heap_alloc$MH() {
        return RuntimeHelper.requireNonNull(constants$105.yr_heap_alloc$MH,"yr_heap_alloc");
    }
    public static int yr_heap_alloc () {
        var mh$ = yr_heap_alloc$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_heap_free$MH() {
        return RuntimeHelper.requireNonNull(constants$105.yr_heap_free$MH,"yr_heap_free");
    }
    public static int yr_heap_free () {
        var mh$ = yr_heap_free$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfFloat float_t = Constants$root.C_FLOAT$LAYOUT;
    public static OfDouble double_t = Constants$root.C_DOUBLE$LAYOUT;
    public static MethodHandle __fpclassify$MH() {
        return RuntimeHelper.requireNonNull(constants$105.__fpclassify$MH,"__fpclassify");
    }
    public static int __fpclassify ( double __value) {
        var mh$ = __fpclassify$MH();
        try {
            return (int)mh$.invokeExact(__value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __signbit$MH() {
        return RuntimeHelper.requireNonNull(constants$106.__signbit$MH,"__signbit");
    }
    public static int __signbit ( double __value) {
        var mh$ = __signbit$MH();
        try {
            return (int)mh$.invokeExact(__value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __isinf$MH() {
        return RuntimeHelper.requireNonNull(constants$106.__isinf$MH,"__isinf");
    }
    public static int __isinf ( double __value) {
        var mh$ = __isinf$MH();
        try {
            return (int)mh$.invokeExact(__value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __finite$MH() {
        return RuntimeHelper.requireNonNull(constants$106.__finite$MH,"__finite");
    }
    public static int __finite ( double __value) {
        var mh$ = __finite$MH();
        try {
            return (int)mh$.invokeExact(__value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __isnan$MH() {
        return RuntimeHelper.requireNonNull(constants$106.__isnan$MH,"__isnan");
    }
    public static int __isnan ( double __value) {
        var mh$ = __isnan$MH();
        try {
            return (int)mh$.invokeExact(__value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __iseqsig$MH() {
        return RuntimeHelper.requireNonNull(constants$106.__iseqsig$MH,"__iseqsig");
    }
    public static int __iseqsig ( double __x,  double __y) {
        var mh$ = __iseqsig$MH();
        try {
            return (int)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __issignaling$MH() {
        return RuntimeHelper.requireNonNull(constants$106.__issignaling$MH,"__issignaling");
    }
    public static int __issignaling ( double __value) {
        var mh$ = __issignaling$MH();
        try {
            return (int)mh$.invokeExact(__value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle acos$MH() {
        return RuntimeHelper.requireNonNull(constants$107.acos$MH,"acos");
    }
    public static double acos ( double __x) {
        var mh$ = acos$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __acos$MH() {
        return RuntimeHelper.requireNonNull(constants$107.__acos$MH,"__acos");
    }
    public static double __acos ( double __x) {
        var mh$ = __acos$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle asin$MH() {
        return RuntimeHelper.requireNonNull(constants$107.asin$MH,"asin");
    }
    public static double asin ( double __x) {
        var mh$ = asin$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __asin$MH() {
        return RuntimeHelper.requireNonNull(constants$107.__asin$MH,"__asin");
    }
    public static double __asin ( double __x) {
        var mh$ = __asin$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle atan$MH() {
        return RuntimeHelper.requireNonNull(constants$107.atan$MH,"atan");
    }
    public static double atan ( double __x) {
        var mh$ = atan$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __atan$MH() {
        return RuntimeHelper.requireNonNull(constants$107.__atan$MH,"__atan");
    }
    public static double __atan ( double __x) {
        var mh$ = __atan$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle atan2$MH() {
        return RuntimeHelper.requireNonNull(constants$108.atan2$MH,"atan2");
    }
    public static double atan2 ( double __y,  double __x) {
        var mh$ = atan2$MH();
        try {
            return (double)mh$.invokeExact(__y, __x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __atan2$MH() {
        return RuntimeHelper.requireNonNull(constants$108.__atan2$MH,"__atan2");
    }
    public static double __atan2 ( double __y,  double __x) {
        var mh$ = __atan2$MH();
        try {
            return (double)mh$.invokeExact(__y, __x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle cos$MH() {
        return RuntimeHelper.requireNonNull(constants$108.cos$MH,"cos");
    }
    public static double cos ( double __x) {
        var mh$ = cos$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __cos$MH() {
        return RuntimeHelper.requireNonNull(constants$108.__cos$MH,"__cos");
    }
    public static double __cos ( double __x) {
        var mh$ = __cos$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sin$MH() {
        return RuntimeHelper.requireNonNull(constants$108.sin$MH,"sin");
    }
    public static double sin ( double __x) {
        var mh$ = sin$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __sin$MH() {
        return RuntimeHelper.requireNonNull(constants$108.__sin$MH,"__sin");
    }
    public static double __sin ( double __x) {
        var mh$ = __sin$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle tan$MH() {
        return RuntimeHelper.requireNonNull(constants$109.tan$MH,"tan");
    }
    public static double tan ( double __x) {
        var mh$ = tan$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __tan$MH() {
        return RuntimeHelper.requireNonNull(constants$109.__tan$MH,"__tan");
    }
    public static double __tan ( double __x) {
        var mh$ = __tan$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle cosh$MH() {
        return RuntimeHelper.requireNonNull(constants$109.cosh$MH,"cosh");
    }
    public static double cosh ( double __x) {
        var mh$ = cosh$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __cosh$MH() {
        return RuntimeHelper.requireNonNull(constants$109.__cosh$MH,"__cosh");
    }
    public static double __cosh ( double __x) {
        var mh$ = __cosh$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sinh$MH() {
        return RuntimeHelper.requireNonNull(constants$109.sinh$MH,"sinh");
    }
    public static double sinh ( double __x) {
        var mh$ = sinh$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __sinh$MH() {
        return RuntimeHelper.requireNonNull(constants$109.__sinh$MH,"__sinh");
    }
    public static double __sinh ( double __x) {
        var mh$ = __sinh$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle tanh$MH() {
        return RuntimeHelper.requireNonNull(constants$110.tanh$MH,"tanh");
    }
    public static double tanh ( double __x) {
        var mh$ = tanh$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __tanh$MH() {
        return RuntimeHelper.requireNonNull(constants$110.__tanh$MH,"__tanh");
    }
    public static double __tanh ( double __x) {
        var mh$ = __tanh$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle acosh$MH() {
        return RuntimeHelper.requireNonNull(constants$110.acosh$MH,"acosh");
    }
    public static double acosh ( double __x) {
        var mh$ = acosh$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __acosh$MH() {
        return RuntimeHelper.requireNonNull(constants$110.__acosh$MH,"__acosh");
    }
    public static double __acosh ( double __x) {
        var mh$ = __acosh$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle asinh$MH() {
        return RuntimeHelper.requireNonNull(constants$110.asinh$MH,"asinh");
    }
    public static double asinh ( double __x) {
        var mh$ = asinh$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __asinh$MH() {
        return RuntimeHelper.requireNonNull(constants$110.__asinh$MH,"__asinh");
    }
    public static double __asinh ( double __x) {
        var mh$ = __asinh$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle atanh$MH() {
        return RuntimeHelper.requireNonNull(constants$111.atanh$MH,"atanh");
    }
    public static double atanh ( double __x) {
        var mh$ = atanh$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __atanh$MH() {
        return RuntimeHelper.requireNonNull(constants$111.__atanh$MH,"__atanh");
    }
    public static double __atanh ( double __x) {
        var mh$ = __atanh$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle exp$MH() {
        return RuntimeHelper.requireNonNull(constants$111.exp$MH,"exp");
    }
    public static double exp ( double __x) {
        var mh$ = exp$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __exp$MH() {
        return RuntimeHelper.requireNonNull(constants$111.__exp$MH,"__exp");
    }
    public static double __exp ( double __x) {
        var mh$ = __exp$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle frexp$MH() {
        return RuntimeHelper.requireNonNull(constants$111.frexp$MH,"frexp");
    }
    public static double frexp ( double __x,  Addressable __exponent) {
        var mh$ = frexp$MH();
        try {
            return (double)mh$.invokeExact(__x, __exponent);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __frexp$MH() {
        return RuntimeHelper.requireNonNull(constants$111.__frexp$MH,"__frexp");
    }
    public static double __frexp ( double __x,  Addressable __exponent) {
        var mh$ = __frexp$MH();
        try {
            return (double)mh$.invokeExact(__x, __exponent);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ldexp$MH() {
        return RuntimeHelper.requireNonNull(constants$112.ldexp$MH,"ldexp");
    }
    public static double ldexp ( double __x,  int __exponent) {
        var mh$ = ldexp$MH();
        try {
            return (double)mh$.invokeExact(__x, __exponent);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __ldexp$MH() {
        return RuntimeHelper.requireNonNull(constants$112.__ldexp$MH,"__ldexp");
    }
    public static double __ldexp ( double __x,  int __exponent) {
        var mh$ = __ldexp$MH();
        try {
            return (double)mh$.invokeExact(__x, __exponent);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle log$MH() {
        return RuntimeHelper.requireNonNull(constants$112.log$MH,"log");
    }
    public static double log ( double __x) {
        var mh$ = log$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __log$MH() {
        return RuntimeHelper.requireNonNull(constants$112.__log$MH,"__log");
    }
    public static double __log ( double __x) {
        var mh$ = __log$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle log10$MH() {
        return RuntimeHelper.requireNonNull(constants$112.log10$MH,"log10");
    }
    public static double log10 ( double __x) {
        var mh$ = log10$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __log10$MH() {
        return RuntimeHelper.requireNonNull(constants$112.__log10$MH,"__log10");
    }
    public static double __log10 ( double __x) {
        var mh$ = __log10$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle modf$MH() {
        return RuntimeHelper.requireNonNull(constants$113.modf$MH,"modf");
    }
    public static double modf ( double __x,  Addressable __iptr) {
        var mh$ = modf$MH();
        try {
            return (double)mh$.invokeExact(__x, __iptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __modf$MH() {
        return RuntimeHelper.requireNonNull(constants$113.__modf$MH,"__modf");
    }
    public static double __modf ( double __x,  Addressable __iptr) {
        var mh$ = __modf$MH();
        try {
            return (double)mh$.invokeExact(__x, __iptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle expm1$MH() {
        return RuntimeHelper.requireNonNull(constants$113.expm1$MH,"expm1");
    }
    public static double expm1 ( double __x) {
        var mh$ = expm1$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __expm1$MH() {
        return RuntimeHelper.requireNonNull(constants$113.__expm1$MH,"__expm1");
    }
    public static double __expm1 ( double __x) {
        var mh$ = __expm1$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle log1p$MH() {
        return RuntimeHelper.requireNonNull(constants$113.log1p$MH,"log1p");
    }
    public static double log1p ( double __x) {
        var mh$ = log1p$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __log1p$MH() {
        return RuntimeHelper.requireNonNull(constants$113.__log1p$MH,"__log1p");
    }
    public static double __log1p ( double __x) {
        var mh$ = __log1p$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle logb$MH() {
        return RuntimeHelper.requireNonNull(constants$114.logb$MH,"logb");
    }
    public static double logb ( double __x) {
        var mh$ = logb$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __logb$MH() {
        return RuntimeHelper.requireNonNull(constants$114.__logb$MH,"__logb");
    }
    public static double __logb ( double __x) {
        var mh$ = __logb$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle exp2$MH() {
        return RuntimeHelper.requireNonNull(constants$114.exp2$MH,"exp2");
    }
    public static double exp2 ( double __x) {
        var mh$ = exp2$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __exp2$MH() {
        return RuntimeHelper.requireNonNull(constants$114.__exp2$MH,"__exp2");
    }
    public static double __exp2 ( double __x) {
        var mh$ = __exp2$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle log2$MH() {
        return RuntimeHelper.requireNonNull(constants$114.log2$MH,"log2");
    }
    public static double log2 ( double __x) {
        var mh$ = log2$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __log2$MH() {
        return RuntimeHelper.requireNonNull(constants$114.__log2$MH,"__log2");
    }
    public static double __log2 ( double __x) {
        var mh$ = __log2$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pow$MH() {
        return RuntimeHelper.requireNonNull(constants$115.pow$MH,"pow");
    }
    public static double pow ( double __x,  double __y) {
        var mh$ = pow$MH();
        try {
            return (double)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __pow$MH() {
        return RuntimeHelper.requireNonNull(constants$115.__pow$MH,"__pow");
    }
    public static double __pow ( double __x,  double __y) {
        var mh$ = __pow$MH();
        try {
            return (double)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sqrt$MH() {
        return RuntimeHelper.requireNonNull(constants$115.sqrt$MH,"sqrt");
    }
    public static double sqrt ( double __x) {
        var mh$ = sqrt$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __sqrt$MH() {
        return RuntimeHelper.requireNonNull(constants$115.__sqrt$MH,"__sqrt");
    }
    public static double __sqrt ( double __x) {
        var mh$ = __sqrt$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle hypot$MH() {
        return RuntimeHelper.requireNonNull(constants$115.hypot$MH,"hypot");
    }
    public static double hypot ( double __x,  double __y) {
        var mh$ = hypot$MH();
        try {
            return (double)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __hypot$MH() {
        return RuntimeHelper.requireNonNull(constants$115.__hypot$MH,"__hypot");
    }
    public static double __hypot ( double __x,  double __y) {
        var mh$ = __hypot$MH();
        try {
            return (double)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle cbrt$MH() {
        return RuntimeHelper.requireNonNull(constants$116.cbrt$MH,"cbrt");
    }
    public static double cbrt ( double __x) {
        var mh$ = cbrt$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __cbrt$MH() {
        return RuntimeHelper.requireNonNull(constants$116.__cbrt$MH,"__cbrt");
    }
    public static double __cbrt ( double __x) {
        var mh$ = __cbrt$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ceil$MH() {
        return RuntimeHelper.requireNonNull(constants$116.ceil$MH,"ceil");
    }
    public static double ceil ( double __x) {
        var mh$ = ceil$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __ceil$MH() {
        return RuntimeHelper.requireNonNull(constants$116.__ceil$MH,"__ceil");
    }
    public static double __ceil ( double __x) {
        var mh$ = __ceil$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fabs$MH() {
        return RuntimeHelper.requireNonNull(constants$116.fabs$MH,"fabs");
    }
    public static double fabs ( double __x) {
        var mh$ = fabs$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __fabs$MH() {
        return RuntimeHelper.requireNonNull(constants$116.__fabs$MH,"__fabs");
    }
    public static double __fabs ( double __x) {
        var mh$ = __fabs$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle floor$MH() {
        return RuntimeHelper.requireNonNull(constants$117.floor$MH,"floor");
    }
    public static double floor ( double __x) {
        var mh$ = floor$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __floor$MH() {
        return RuntimeHelper.requireNonNull(constants$117.__floor$MH,"__floor");
    }
    public static double __floor ( double __x) {
        var mh$ = __floor$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fmod$MH() {
        return RuntimeHelper.requireNonNull(constants$117.fmod$MH,"fmod");
    }
    public static double fmod ( double __x,  double __y) {
        var mh$ = fmod$MH();
        try {
            return (double)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __fmod$MH() {
        return RuntimeHelper.requireNonNull(constants$117.__fmod$MH,"__fmod");
    }
    public static double __fmod ( double __x,  double __y) {
        var mh$ = __fmod$MH();
        try {
            return (double)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle isinf$MH() {
        return RuntimeHelper.requireNonNull(constants$117.isinf$MH,"isinf");
    }
    public static int isinf ( double __value) {
        var mh$ = isinf$MH();
        try {
            return (int)mh$.invokeExact(__value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle finite$MH() {
        return RuntimeHelper.requireNonNull(constants$117.finite$MH,"finite");
    }
    public static int finite ( double __value) {
        var mh$ = finite$MH();
        try {
            return (int)mh$.invokeExact(__value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle drem$MH() {
        return RuntimeHelper.requireNonNull(constants$118.drem$MH,"drem");
    }
    public static double drem ( double __x,  double __y) {
        var mh$ = drem$MH();
        try {
            return (double)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __drem$MH() {
        return RuntimeHelper.requireNonNull(constants$118.__drem$MH,"__drem");
    }
    public static double __drem ( double __x,  double __y) {
        var mh$ = __drem$MH();
        try {
            return (double)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle significand$MH() {
        return RuntimeHelper.requireNonNull(constants$118.significand$MH,"significand");
    }
    public static double significand ( double __x) {
        var mh$ = significand$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __significand$MH() {
        return RuntimeHelper.requireNonNull(constants$118.__significand$MH,"__significand");
    }
    public static double __significand ( double __x) {
        var mh$ = __significand$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle copysign$MH() {
        return RuntimeHelper.requireNonNull(constants$118.copysign$MH,"copysign");
    }
    public static double copysign ( double __x,  double __y) {
        var mh$ = copysign$MH();
        try {
            return (double)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __copysign$MH() {
        return RuntimeHelper.requireNonNull(constants$118.__copysign$MH,"__copysign");
    }
    public static double __copysign ( double __x,  double __y) {
        var mh$ = __copysign$MH();
        try {
            return (double)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nan$MH() {
        return RuntimeHelper.requireNonNull(constants$119.nan$MH,"nan");
    }
    public static double nan ( Addressable __tagb) {
        var mh$ = nan$MH();
        try {
            return (double)mh$.invokeExact(__tagb);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __nan$MH() {
        return RuntimeHelper.requireNonNull(constants$119.__nan$MH,"__nan");
    }
    public static double __nan ( Addressable __tagb) {
        var mh$ = __nan$MH();
        try {
            return (double)mh$.invokeExact(__tagb);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle isnan$MH() {
        return RuntimeHelper.requireNonNull(constants$119.isnan$MH,"isnan");
    }
    public static int isnan ( double __value) {
        var mh$ = isnan$MH();
        try {
            return (int)mh$.invokeExact(__value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle j0$MH() {
        return RuntimeHelper.requireNonNull(constants$119.j0$MH,"j0");
    }
    public static double j0 ( double x0) {
        var mh$ = j0$MH();
        try {
            return (double)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __j0$MH() {
        return RuntimeHelper.requireNonNull(constants$119.__j0$MH,"__j0");
    }
    public static double __j0 ( double x0) {
        var mh$ = __j0$MH();
        try {
            return (double)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle j1$MH() {
        return RuntimeHelper.requireNonNull(constants$119.j1$MH,"j1");
    }
    public static double j1 ( double x0) {
        var mh$ = j1$MH();
        try {
            return (double)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __j1$MH() {
        return RuntimeHelper.requireNonNull(constants$120.__j1$MH,"__j1");
    }
    public static double __j1 ( double x0) {
        var mh$ = __j1$MH();
        try {
            return (double)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle jn$MH() {
        return RuntimeHelper.requireNonNull(constants$120.jn$MH,"jn");
    }
    public static double jn ( int x0,  double x1) {
        var mh$ = jn$MH();
        try {
            return (double)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __jn$MH() {
        return RuntimeHelper.requireNonNull(constants$120.__jn$MH,"__jn");
    }
    public static double __jn ( int x0,  double x1) {
        var mh$ = __jn$MH();
        try {
            return (double)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle y0$MH() {
        return RuntimeHelper.requireNonNull(constants$120.y0$MH,"y0");
    }
    public static double y0 ( double x0) {
        var mh$ = y0$MH();
        try {
            return (double)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __y0$MH() {
        return RuntimeHelper.requireNonNull(constants$120.__y0$MH,"__y0");
    }
    public static double __y0 ( double x0) {
        var mh$ = __y0$MH();
        try {
            return (double)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle y1$MH() {
        return RuntimeHelper.requireNonNull(constants$120.y1$MH,"y1");
    }
    public static double y1 ( double x0) {
        var mh$ = y1$MH();
        try {
            return (double)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __y1$MH() {
        return RuntimeHelper.requireNonNull(constants$121.__y1$MH,"__y1");
    }
    public static double __y1 ( double x0) {
        var mh$ = __y1$MH();
        try {
            return (double)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yn$MH() {
        return RuntimeHelper.requireNonNull(constants$121.yn$MH,"yn");
    }
    public static double yn ( int x0,  double x1) {
        var mh$ = yn$MH();
        try {
            return (double)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __yn$MH() {
        return RuntimeHelper.requireNonNull(constants$121.__yn$MH,"__yn");
    }
    public static double __yn ( int x0,  double x1) {
        var mh$ = __yn$MH();
        try {
            return (double)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle erf$MH() {
        return RuntimeHelper.requireNonNull(constants$121.erf$MH,"erf");
    }
    public static double erf ( double x0) {
        var mh$ = erf$MH();
        try {
            return (double)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __erf$MH() {
        return RuntimeHelper.requireNonNull(constants$121.__erf$MH,"__erf");
    }
    public static double __erf ( double x0) {
        var mh$ = __erf$MH();
        try {
            return (double)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle erfc$MH() {
        return RuntimeHelper.requireNonNull(constants$121.erfc$MH,"erfc");
    }
    public static double erfc ( double x0) {
        var mh$ = erfc$MH();
        try {
            return (double)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __erfc$MH() {
        return RuntimeHelper.requireNonNull(constants$122.__erfc$MH,"__erfc");
    }
    public static double __erfc ( double x0) {
        var mh$ = __erfc$MH();
        try {
            return (double)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lgamma$MH() {
        return RuntimeHelper.requireNonNull(constants$122.lgamma$MH,"lgamma");
    }
    public static double lgamma ( double x0) {
        var mh$ = lgamma$MH();
        try {
            return (double)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __lgamma$MH() {
        return RuntimeHelper.requireNonNull(constants$122.__lgamma$MH,"__lgamma");
    }
    public static double __lgamma ( double x0) {
        var mh$ = __lgamma$MH();
        try {
            return (double)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle tgamma$MH() {
        return RuntimeHelper.requireNonNull(constants$122.tgamma$MH,"tgamma");
    }
    public static double tgamma ( double x0) {
        var mh$ = tgamma$MH();
        try {
            return (double)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __tgamma$MH() {
        return RuntimeHelper.requireNonNull(constants$122.__tgamma$MH,"__tgamma");
    }
    public static double __tgamma ( double x0) {
        var mh$ = __tgamma$MH();
        try {
            return (double)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gamma$MH() {
        return RuntimeHelper.requireNonNull(constants$122.gamma$MH,"gamma");
    }
    public static double gamma ( double x0) {
        var mh$ = gamma$MH();
        try {
            return (double)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __gamma$MH() {
        return RuntimeHelper.requireNonNull(constants$123.__gamma$MH,"__gamma");
    }
    public static double __gamma ( double x0) {
        var mh$ = __gamma$MH();
        try {
            return (double)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lgamma_r$MH() {
        return RuntimeHelper.requireNonNull(constants$123.lgamma_r$MH,"lgamma_r");
    }
    public static double lgamma_r ( double x0,  Addressable __signgamp) {
        var mh$ = lgamma_r$MH();
        try {
            return (double)mh$.invokeExact(x0, __signgamp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __lgamma_r$MH() {
        return RuntimeHelper.requireNonNull(constants$123.__lgamma_r$MH,"__lgamma_r");
    }
    public static double __lgamma_r ( double x0,  Addressable __signgamp) {
        var mh$ = __lgamma_r$MH();
        try {
            return (double)mh$.invokeExact(x0, __signgamp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rint$MH() {
        return RuntimeHelper.requireNonNull(constants$123.rint$MH,"rint");
    }
    public static double rint ( double __x) {
        var mh$ = rint$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __rint$MH() {
        return RuntimeHelper.requireNonNull(constants$123.__rint$MH,"__rint");
    }
    public static double __rint ( double __x) {
        var mh$ = __rint$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nextafter$MH() {
        return RuntimeHelper.requireNonNull(constants$123.nextafter$MH,"nextafter");
    }
    public static double nextafter ( double __x,  double __y) {
        var mh$ = nextafter$MH();
        try {
            return (double)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __nextafter$MH() {
        return RuntimeHelper.requireNonNull(constants$124.__nextafter$MH,"__nextafter");
    }
    public static double __nextafter ( double __x,  double __y) {
        var mh$ = __nextafter$MH();
        try {
            return (double)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle remainder$MH() {
        return RuntimeHelper.requireNonNull(constants$124.remainder$MH,"remainder");
    }
    public static double remainder ( double __x,  double __y) {
        var mh$ = remainder$MH();
        try {
            return (double)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __remainder$MH() {
        return RuntimeHelper.requireNonNull(constants$124.__remainder$MH,"__remainder");
    }
    public static double __remainder ( double __x,  double __y) {
        var mh$ = __remainder$MH();
        try {
            return (double)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle scalbn$MH() {
        return RuntimeHelper.requireNonNull(constants$124.scalbn$MH,"scalbn");
    }
    public static double scalbn ( double __x,  int __n) {
        var mh$ = scalbn$MH();
        try {
            return (double)mh$.invokeExact(__x, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __scalbn$MH() {
        return RuntimeHelper.requireNonNull(constants$124.__scalbn$MH,"__scalbn");
    }
    public static double __scalbn ( double __x,  int __n) {
        var mh$ = __scalbn$MH();
        try {
            return (double)mh$.invokeExact(__x, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ilogb$MH() {
        return RuntimeHelper.requireNonNull(constants$124.ilogb$MH,"ilogb");
    }
    public static int ilogb ( double __x) {
        var mh$ = ilogb$MH();
        try {
            return (int)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __ilogb$MH() {
        return RuntimeHelper.requireNonNull(constants$125.__ilogb$MH,"__ilogb");
    }
    public static int __ilogb ( double __x) {
        var mh$ = __ilogb$MH();
        try {
            return (int)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle scalbln$MH() {
        return RuntimeHelper.requireNonNull(constants$125.scalbln$MH,"scalbln");
    }
    public static double scalbln ( double __x,  long __n) {
        var mh$ = scalbln$MH();
        try {
            return (double)mh$.invokeExact(__x, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __scalbln$MH() {
        return RuntimeHelper.requireNonNull(constants$125.__scalbln$MH,"__scalbln");
    }
    public static double __scalbln ( double __x,  long __n) {
        var mh$ = __scalbln$MH();
        try {
            return (double)mh$.invokeExact(__x, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nearbyint$MH() {
        return RuntimeHelper.requireNonNull(constants$125.nearbyint$MH,"nearbyint");
    }
    public static double nearbyint ( double __x) {
        var mh$ = nearbyint$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __nearbyint$MH() {
        return RuntimeHelper.requireNonNull(constants$125.__nearbyint$MH,"__nearbyint");
    }
    public static double __nearbyint ( double __x) {
        var mh$ = __nearbyint$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle round$MH() {
        return RuntimeHelper.requireNonNull(constants$125.round$MH,"round");
    }
    public static double round ( double __x) {
        var mh$ = round$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __round$MH() {
        return RuntimeHelper.requireNonNull(constants$126.__round$MH,"__round");
    }
    public static double __round ( double __x) {
        var mh$ = __round$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle trunc$MH() {
        return RuntimeHelper.requireNonNull(constants$126.trunc$MH,"trunc");
    }
    public static double trunc ( double __x) {
        var mh$ = trunc$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __trunc$MH() {
        return RuntimeHelper.requireNonNull(constants$126.__trunc$MH,"__trunc");
    }
    public static double __trunc ( double __x) {
        var mh$ = __trunc$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle remquo$MH() {
        return RuntimeHelper.requireNonNull(constants$126.remquo$MH,"remquo");
    }
    public static double remquo ( double __x,  double __y,  Addressable __quo) {
        var mh$ = remquo$MH();
        try {
            return (double)mh$.invokeExact(__x, __y, __quo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __remquo$MH() {
        return RuntimeHelper.requireNonNull(constants$126.__remquo$MH,"__remquo");
    }
    public static double __remquo ( double __x,  double __y,  Addressable __quo) {
        var mh$ = __remquo$MH();
        try {
            return (double)mh$.invokeExact(__x, __y, __quo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lrint$MH() {
        return RuntimeHelper.requireNonNull(constants$126.lrint$MH,"lrint");
    }
    public static long lrint ( double __x) {
        var mh$ = lrint$MH();
        try {
            return (long)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __lrint$MH() {
        return RuntimeHelper.requireNonNull(constants$127.__lrint$MH,"__lrint");
    }
    public static long __lrint ( double __x) {
        var mh$ = __lrint$MH();
        try {
            return (long)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llrint$MH() {
        return RuntimeHelper.requireNonNull(constants$127.llrint$MH,"llrint");
    }
    public static long llrint ( double __x) {
        var mh$ = llrint$MH();
        try {
            return (long)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __llrint$MH() {
        return RuntimeHelper.requireNonNull(constants$127.__llrint$MH,"__llrint");
    }
    public static long __llrint ( double __x) {
        var mh$ = __llrint$MH();
        try {
            return (long)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lround$MH() {
        return RuntimeHelper.requireNonNull(constants$127.lround$MH,"lround");
    }
    public static long lround ( double __x) {
        var mh$ = lround$MH();
        try {
            return (long)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __lround$MH() {
        return RuntimeHelper.requireNonNull(constants$127.__lround$MH,"__lround");
    }
    public static long __lround ( double __x) {
        var mh$ = __lround$MH();
        try {
            return (long)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llround$MH() {
        return RuntimeHelper.requireNonNull(constants$127.llround$MH,"llround");
    }
    public static long llround ( double __x) {
        var mh$ = llround$MH();
        try {
            return (long)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __llround$MH() {
        return RuntimeHelper.requireNonNull(constants$128.__llround$MH,"__llround");
    }
    public static long __llround ( double __x) {
        var mh$ = __llround$MH();
        try {
            return (long)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fdim$MH() {
        return RuntimeHelper.requireNonNull(constants$128.fdim$MH,"fdim");
    }
    public static double fdim ( double __x,  double __y) {
        var mh$ = fdim$MH();
        try {
            return (double)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __fdim$MH() {
        return RuntimeHelper.requireNonNull(constants$128.__fdim$MH,"__fdim");
    }
    public static double __fdim ( double __x,  double __y) {
        var mh$ = __fdim$MH();
        try {
            return (double)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fmax$MH() {
        return RuntimeHelper.requireNonNull(constants$128.fmax$MH,"fmax");
    }
    public static double fmax ( double __x,  double __y) {
        var mh$ = fmax$MH();
        try {
            return (double)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __fmax$MH() {
        return RuntimeHelper.requireNonNull(constants$128.__fmax$MH,"__fmax");
    }
    public static double __fmax ( double __x,  double __y) {
        var mh$ = __fmax$MH();
        try {
            return (double)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fmin$MH() {
        return RuntimeHelper.requireNonNull(constants$128.fmin$MH,"fmin");
    }
    public static double fmin ( double __x,  double __y) {
        var mh$ = fmin$MH();
        try {
            return (double)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __fmin$MH() {
        return RuntimeHelper.requireNonNull(constants$129.__fmin$MH,"__fmin");
    }
    public static double __fmin ( double __x,  double __y) {
        var mh$ = __fmin$MH();
        try {
            return (double)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fma$MH() {
        return RuntimeHelper.requireNonNull(constants$129.fma$MH,"fma");
    }
    public static double fma ( double __x,  double __y,  double __z) {
        var mh$ = fma$MH();
        try {
            return (double)mh$.invokeExact(__x, __y, __z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __fma$MH() {
        return RuntimeHelper.requireNonNull(constants$129.__fma$MH,"__fma");
    }
    public static double __fma ( double __x,  double __y,  double __z) {
        var mh$ = __fma$MH();
        try {
            return (double)mh$.invokeExact(__x, __y, __z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle scalb$MH() {
        return RuntimeHelper.requireNonNull(constants$129.scalb$MH,"scalb");
    }
    public static double scalb ( double __x,  double __n) {
        var mh$ = scalb$MH();
        try {
            return (double)mh$.invokeExact(__x, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __scalb$MH() {
        return RuntimeHelper.requireNonNull(constants$129.__scalb$MH,"__scalb");
    }
    public static double __scalb ( double __x,  double __n) {
        var mh$ = __scalb$MH();
        try {
            return (double)mh$.invokeExact(__x, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __fpclassifyf$MH() {
        return RuntimeHelper.requireNonNull(constants$129.__fpclassifyf$MH,"__fpclassifyf");
    }
    public static int __fpclassifyf ( float __value) {
        var mh$ = __fpclassifyf$MH();
        try {
            return (int)mh$.invokeExact(__value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __signbitf$MH() {
        return RuntimeHelper.requireNonNull(constants$130.__signbitf$MH,"__signbitf");
    }
    public static int __signbitf ( float __value) {
        var mh$ = __signbitf$MH();
        try {
            return (int)mh$.invokeExact(__value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __isinff$MH() {
        return RuntimeHelper.requireNonNull(constants$130.__isinff$MH,"__isinff");
    }
    public static int __isinff ( float __value) {
        var mh$ = __isinff$MH();
        try {
            return (int)mh$.invokeExact(__value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __finitef$MH() {
        return RuntimeHelper.requireNonNull(constants$130.__finitef$MH,"__finitef");
    }
    public static int __finitef ( float __value) {
        var mh$ = __finitef$MH();
        try {
            return (int)mh$.invokeExact(__value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __isnanf$MH() {
        return RuntimeHelper.requireNonNull(constants$130.__isnanf$MH,"__isnanf");
    }
    public static int __isnanf ( float __value) {
        var mh$ = __isnanf$MH();
        try {
            return (int)mh$.invokeExact(__value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __iseqsigf$MH() {
        return RuntimeHelper.requireNonNull(constants$130.__iseqsigf$MH,"__iseqsigf");
    }
    public static int __iseqsigf ( float __x,  float __y) {
        var mh$ = __iseqsigf$MH();
        try {
            return (int)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __issignalingf$MH() {
        return RuntimeHelper.requireNonNull(constants$130.__issignalingf$MH,"__issignalingf");
    }
    public static int __issignalingf ( float __value) {
        var mh$ = __issignalingf$MH();
        try {
            return (int)mh$.invokeExact(__value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle acosf$MH() {
        return RuntimeHelper.requireNonNull(constants$131.acosf$MH,"acosf");
    }
    public static float acosf ( float __x) {
        var mh$ = acosf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __acosf$MH() {
        return RuntimeHelper.requireNonNull(constants$131.__acosf$MH,"__acosf");
    }
    public static float __acosf ( float __x) {
        var mh$ = __acosf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle asinf$MH() {
        return RuntimeHelper.requireNonNull(constants$131.asinf$MH,"asinf");
    }
    public static float asinf ( float __x) {
        var mh$ = asinf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __asinf$MH() {
        return RuntimeHelper.requireNonNull(constants$131.__asinf$MH,"__asinf");
    }
    public static float __asinf ( float __x) {
        var mh$ = __asinf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle atanf$MH() {
        return RuntimeHelper.requireNonNull(constants$131.atanf$MH,"atanf");
    }
    public static float atanf ( float __x) {
        var mh$ = atanf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __atanf$MH() {
        return RuntimeHelper.requireNonNull(constants$131.__atanf$MH,"__atanf");
    }
    public static float __atanf ( float __x) {
        var mh$ = __atanf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle atan2f$MH() {
        return RuntimeHelper.requireNonNull(constants$132.atan2f$MH,"atan2f");
    }
    public static float atan2f ( float __y,  float __x) {
        var mh$ = atan2f$MH();
        try {
            return (float)mh$.invokeExact(__y, __x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __atan2f$MH() {
        return RuntimeHelper.requireNonNull(constants$132.__atan2f$MH,"__atan2f");
    }
    public static float __atan2f ( float __y,  float __x) {
        var mh$ = __atan2f$MH();
        try {
            return (float)mh$.invokeExact(__y, __x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle cosf$MH() {
        return RuntimeHelper.requireNonNull(constants$132.cosf$MH,"cosf");
    }
    public static float cosf ( float __x) {
        var mh$ = cosf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __cosf$MH() {
        return RuntimeHelper.requireNonNull(constants$132.__cosf$MH,"__cosf");
    }
    public static float __cosf ( float __x) {
        var mh$ = __cosf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sinf$MH() {
        return RuntimeHelper.requireNonNull(constants$132.sinf$MH,"sinf");
    }
    public static float sinf ( float __x) {
        var mh$ = sinf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __sinf$MH() {
        return RuntimeHelper.requireNonNull(constants$132.__sinf$MH,"__sinf");
    }
    public static float __sinf ( float __x) {
        var mh$ = __sinf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle tanf$MH() {
        return RuntimeHelper.requireNonNull(constants$133.tanf$MH,"tanf");
    }
    public static float tanf ( float __x) {
        var mh$ = tanf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __tanf$MH() {
        return RuntimeHelper.requireNonNull(constants$133.__tanf$MH,"__tanf");
    }
    public static float __tanf ( float __x) {
        var mh$ = __tanf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle coshf$MH() {
        return RuntimeHelper.requireNonNull(constants$133.coshf$MH,"coshf");
    }
    public static float coshf ( float __x) {
        var mh$ = coshf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __coshf$MH() {
        return RuntimeHelper.requireNonNull(constants$133.__coshf$MH,"__coshf");
    }
    public static float __coshf ( float __x) {
        var mh$ = __coshf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sinhf$MH() {
        return RuntimeHelper.requireNonNull(constants$133.sinhf$MH,"sinhf");
    }
    public static float sinhf ( float __x) {
        var mh$ = sinhf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __sinhf$MH() {
        return RuntimeHelper.requireNonNull(constants$133.__sinhf$MH,"__sinhf");
    }
    public static float __sinhf ( float __x) {
        var mh$ = __sinhf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle tanhf$MH() {
        return RuntimeHelper.requireNonNull(constants$134.tanhf$MH,"tanhf");
    }
    public static float tanhf ( float __x) {
        var mh$ = tanhf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __tanhf$MH() {
        return RuntimeHelper.requireNonNull(constants$134.__tanhf$MH,"__tanhf");
    }
    public static float __tanhf ( float __x) {
        var mh$ = __tanhf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle acoshf$MH() {
        return RuntimeHelper.requireNonNull(constants$134.acoshf$MH,"acoshf");
    }
    public static float acoshf ( float __x) {
        var mh$ = acoshf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __acoshf$MH() {
        return RuntimeHelper.requireNonNull(constants$134.__acoshf$MH,"__acoshf");
    }
    public static float __acoshf ( float __x) {
        var mh$ = __acoshf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle asinhf$MH() {
        return RuntimeHelper.requireNonNull(constants$134.asinhf$MH,"asinhf");
    }
    public static float asinhf ( float __x) {
        var mh$ = asinhf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __asinhf$MH() {
        return RuntimeHelper.requireNonNull(constants$134.__asinhf$MH,"__asinhf");
    }
    public static float __asinhf ( float __x) {
        var mh$ = __asinhf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle atanhf$MH() {
        return RuntimeHelper.requireNonNull(constants$135.atanhf$MH,"atanhf");
    }
    public static float atanhf ( float __x) {
        var mh$ = atanhf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __atanhf$MH() {
        return RuntimeHelper.requireNonNull(constants$135.__atanhf$MH,"__atanhf");
    }
    public static float __atanhf ( float __x) {
        var mh$ = __atanhf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle expf$MH() {
        return RuntimeHelper.requireNonNull(constants$135.expf$MH,"expf");
    }
    public static float expf ( float __x) {
        var mh$ = expf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __expf$MH() {
        return RuntimeHelper.requireNonNull(constants$135.__expf$MH,"__expf");
    }
    public static float __expf ( float __x) {
        var mh$ = __expf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle frexpf$MH() {
        return RuntimeHelper.requireNonNull(constants$135.frexpf$MH,"frexpf");
    }
    public static float frexpf ( float __x,  Addressable __exponent) {
        var mh$ = frexpf$MH();
        try {
            return (float)mh$.invokeExact(__x, __exponent);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __frexpf$MH() {
        return RuntimeHelper.requireNonNull(constants$135.__frexpf$MH,"__frexpf");
    }
    public static float __frexpf ( float __x,  Addressable __exponent) {
        var mh$ = __frexpf$MH();
        try {
            return (float)mh$.invokeExact(__x, __exponent);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ldexpf$MH() {
        return RuntimeHelper.requireNonNull(constants$136.ldexpf$MH,"ldexpf");
    }
    public static float ldexpf ( float __x,  int __exponent) {
        var mh$ = ldexpf$MH();
        try {
            return (float)mh$.invokeExact(__x, __exponent);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __ldexpf$MH() {
        return RuntimeHelper.requireNonNull(constants$136.__ldexpf$MH,"__ldexpf");
    }
    public static float __ldexpf ( float __x,  int __exponent) {
        var mh$ = __ldexpf$MH();
        try {
            return (float)mh$.invokeExact(__x, __exponent);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle logf$MH() {
        return RuntimeHelper.requireNonNull(constants$136.logf$MH,"logf");
    }
    public static float logf ( float __x) {
        var mh$ = logf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __logf$MH() {
        return RuntimeHelper.requireNonNull(constants$136.__logf$MH,"__logf");
    }
    public static float __logf ( float __x) {
        var mh$ = __logf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle log10f$MH() {
        return RuntimeHelper.requireNonNull(constants$136.log10f$MH,"log10f");
    }
    public static float log10f ( float __x) {
        var mh$ = log10f$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __log10f$MH() {
        return RuntimeHelper.requireNonNull(constants$136.__log10f$MH,"__log10f");
    }
    public static float __log10f ( float __x) {
        var mh$ = __log10f$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle modff$MH() {
        return RuntimeHelper.requireNonNull(constants$137.modff$MH,"modff");
    }
    public static float modff ( float __x,  Addressable __iptr) {
        var mh$ = modff$MH();
        try {
            return (float)mh$.invokeExact(__x, __iptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __modff$MH() {
        return RuntimeHelper.requireNonNull(constants$137.__modff$MH,"__modff");
    }
    public static float __modff ( float __x,  Addressable __iptr) {
        var mh$ = __modff$MH();
        try {
            return (float)mh$.invokeExact(__x, __iptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle expm1f$MH() {
        return RuntimeHelper.requireNonNull(constants$137.expm1f$MH,"expm1f");
    }
    public static float expm1f ( float __x) {
        var mh$ = expm1f$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __expm1f$MH() {
        return RuntimeHelper.requireNonNull(constants$137.__expm1f$MH,"__expm1f");
    }
    public static float __expm1f ( float __x) {
        var mh$ = __expm1f$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle log1pf$MH() {
        return RuntimeHelper.requireNonNull(constants$137.log1pf$MH,"log1pf");
    }
    public static float log1pf ( float __x) {
        var mh$ = log1pf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __log1pf$MH() {
        return RuntimeHelper.requireNonNull(constants$137.__log1pf$MH,"__log1pf");
    }
    public static float __log1pf ( float __x) {
        var mh$ = __log1pf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle logbf$MH() {
        return RuntimeHelper.requireNonNull(constants$138.logbf$MH,"logbf");
    }
    public static float logbf ( float __x) {
        var mh$ = logbf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __logbf$MH() {
        return RuntimeHelper.requireNonNull(constants$138.__logbf$MH,"__logbf");
    }
    public static float __logbf ( float __x) {
        var mh$ = __logbf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle exp2f$MH() {
        return RuntimeHelper.requireNonNull(constants$138.exp2f$MH,"exp2f");
    }
    public static float exp2f ( float __x) {
        var mh$ = exp2f$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __exp2f$MH() {
        return RuntimeHelper.requireNonNull(constants$138.__exp2f$MH,"__exp2f");
    }
    public static float __exp2f ( float __x) {
        var mh$ = __exp2f$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle log2f$MH() {
        return RuntimeHelper.requireNonNull(constants$138.log2f$MH,"log2f");
    }
    public static float log2f ( float __x) {
        var mh$ = log2f$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __log2f$MH() {
        return RuntimeHelper.requireNonNull(constants$138.__log2f$MH,"__log2f");
    }
    public static float __log2f ( float __x) {
        var mh$ = __log2f$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle powf$MH() {
        return RuntimeHelper.requireNonNull(constants$139.powf$MH,"powf");
    }
    public static float powf ( float __x,  float __y) {
        var mh$ = powf$MH();
        try {
            return (float)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __powf$MH() {
        return RuntimeHelper.requireNonNull(constants$139.__powf$MH,"__powf");
    }
    public static float __powf ( float __x,  float __y) {
        var mh$ = __powf$MH();
        try {
            return (float)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sqrtf$MH() {
        return RuntimeHelper.requireNonNull(constants$139.sqrtf$MH,"sqrtf");
    }
    public static float sqrtf ( float __x) {
        var mh$ = sqrtf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __sqrtf$MH() {
        return RuntimeHelper.requireNonNull(constants$139.__sqrtf$MH,"__sqrtf");
    }
    public static float __sqrtf ( float __x) {
        var mh$ = __sqrtf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle hypotf$MH() {
        return RuntimeHelper.requireNonNull(constants$139.hypotf$MH,"hypotf");
    }
    public static float hypotf ( float __x,  float __y) {
        var mh$ = hypotf$MH();
        try {
            return (float)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __hypotf$MH() {
        return RuntimeHelper.requireNonNull(constants$139.__hypotf$MH,"__hypotf");
    }
    public static float __hypotf ( float __x,  float __y) {
        var mh$ = __hypotf$MH();
        try {
            return (float)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle cbrtf$MH() {
        return RuntimeHelper.requireNonNull(constants$140.cbrtf$MH,"cbrtf");
    }
    public static float cbrtf ( float __x) {
        var mh$ = cbrtf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __cbrtf$MH() {
        return RuntimeHelper.requireNonNull(constants$140.__cbrtf$MH,"__cbrtf");
    }
    public static float __cbrtf ( float __x) {
        var mh$ = __cbrtf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ceilf$MH() {
        return RuntimeHelper.requireNonNull(constants$140.ceilf$MH,"ceilf");
    }
    public static float ceilf ( float __x) {
        var mh$ = ceilf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __ceilf$MH() {
        return RuntimeHelper.requireNonNull(constants$140.__ceilf$MH,"__ceilf");
    }
    public static float __ceilf ( float __x) {
        var mh$ = __ceilf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fabsf$MH() {
        return RuntimeHelper.requireNonNull(constants$140.fabsf$MH,"fabsf");
    }
    public static float fabsf ( float __x) {
        var mh$ = fabsf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __fabsf$MH() {
        return RuntimeHelper.requireNonNull(constants$140.__fabsf$MH,"__fabsf");
    }
    public static float __fabsf ( float __x) {
        var mh$ = __fabsf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle floorf$MH() {
        return RuntimeHelper.requireNonNull(constants$141.floorf$MH,"floorf");
    }
    public static float floorf ( float __x) {
        var mh$ = floorf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __floorf$MH() {
        return RuntimeHelper.requireNonNull(constants$141.__floorf$MH,"__floorf");
    }
    public static float __floorf ( float __x) {
        var mh$ = __floorf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fmodf$MH() {
        return RuntimeHelper.requireNonNull(constants$141.fmodf$MH,"fmodf");
    }
    public static float fmodf ( float __x,  float __y) {
        var mh$ = fmodf$MH();
        try {
            return (float)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __fmodf$MH() {
        return RuntimeHelper.requireNonNull(constants$141.__fmodf$MH,"__fmodf");
    }
    public static float __fmodf ( float __x,  float __y) {
        var mh$ = __fmodf$MH();
        try {
            return (float)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle isinff$MH() {
        return RuntimeHelper.requireNonNull(constants$141.isinff$MH,"isinff");
    }
    public static int isinff ( float __value) {
        var mh$ = isinff$MH();
        try {
            return (int)mh$.invokeExact(__value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle finitef$MH() {
        return RuntimeHelper.requireNonNull(constants$141.finitef$MH,"finitef");
    }
    public static int finitef ( float __value) {
        var mh$ = finitef$MH();
        try {
            return (int)mh$.invokeExact(__value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle dremf$MH() {
        return RuntimeHelper.requireNonNull(constants$142.dremf$MH,"dremf");
    }
    public static float dremf ( float __x,  float __y) {
        var mh$ = dremf$MH();
        try {
            return (float)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __dremf$MH() {
        return RuntimeHelper.requireNonNull(constants$142.__dremf$MH,"__dremf");
    }
    public static float __dremf ( float __x,  float __y) {
        var mh$ = __dremf$MH();
        try {
            return (float)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle significandf$MH() {
        return RuntimeHelper.requireNonNull(constants$142.significandf$MH,"significandf");
    }
    public static float significandf ( float __x) {
        var mh$ = significandf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __significandf$MH() {
        return RuntimeHelper.requireNonNull(constants$142.__significandf$MH,"__significandf");
    }
    public static float __significandf ( float __x) {
        var mh$ = __significandf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle copysignf$MH() {
        return RuntimeHelper.requireNonNull(constants$142.copysignf$MH,"copysignf");
    }
    public static float copysignf ( float __x,  float __y) {
        var mh$ = copysignf$MH();
        try {
            return (float)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __copysignf$MH() {
        return RuntimeHelper.requireNonNull(constants$142.__copysignf$MH,"__copysignf");
    }
    public static float __copysignf ( float __x,  float __y) {
        var mh$ = __copysignf$MH();
        try {
            return (float)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nanf$MH() {
        return RuntimeHelper.requireNonNull(constants$143.nanf$MH,"nanf");
    }
    public static float nanf ( Addressable __tagb) {
        var mh$ = nanf$MH();
        try {
            return (float)mh$.invokeExact(__tagb);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __nanf$MH() {
        return RuntimeHelper.requireNonNull(constants$143.__nanf$MH,"__nanf");
    }
    public static float __nanf ( Addressable __tagb) {
        var mh$ = __nanf$MH();
        try {
            return (float)mh$.invokeExact(__tagb);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle isnanf$MH() {
        return RuntimeHelper.requireNonNull(constants$143.isnanf$MH,"isnanf");
    }
    public static int isnanf ( float __value) {
        var mh$ = isnanf$MH();
        try {
            return (int)mh$.invokeExact(__value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle j0f$MH() {
        return RuntimeHelper.requireNonNull(constants$143.j0f$MH,"j0f");
    }
    public static float j0f ( float x0) {
        var mh$ = j0f$MH();
        try {
            return (float)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __j0f$MH() {
        return RuntimeHelper.requireNonNull(constants$143.__j0f$MH,"__j0f");
    }
    public static float __j0f ( float x0) {
        var mh$ = __j0f$MH();
        try {
            return (float)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle j1f$MH() {
        return RuntimeHelper.requireNonNull(constants$143.j1f$MH,"j1f");
    }
    public static float j1f ( float x0) {
        var mh$ = j1f$MH();
        try {
            return (float)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __j1f$MH() {
        return RuntimeHelper.requireNonNull(constants$144.__j1f$MH,"__j1f");
    }
    public static float __j1f ( float x0) {
        var mh$ = __j1f$MH();
        try {
            return (float)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle jnf$MH() {
        return RuntimeHelper.requireNonNull(constants$144.jnf$MH,"jnf");
    }
    public static float jnf ( int x0,  float x1) {
        var mh$ = jnf$MH();
        try {
            return (float)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __jnf$MH() {
        return RuntimeHelper.requireNonNull(constants$144.__jnf$MH,"__jnf");
    }
    public static float __jnf ( int x0,  float x1) {
        var mh$ = __jnf$MH();
        try {
            return (float)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle y0f$MH() {
        return RuntimeHelper.requireNonNull(constants$144.y0f$MH,"y0f");
    }
    public static float y0f ( float x0) {
        var mh$ = y0f$MH();
        try {
            return (float)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __y0f$MH() {
        return RuntimeHelper.requireNonNull(constants$144.__y0f$MH,"__y0f");
    }
    public static float __y0f ( float x0) {
        var mh$ = __y0f$MH();
        try {
            return (float)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle y1f$MH() {
        return RuntimeHelper.requireNonNull(constants$144.y1f$MH,"y1f");
    }
    public static float y1f ( float x0) {
        var mh$ = y1f$MH();
        try {
            return (float)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __y1f$MH() {
        return RuntimeHelper.requireNonNull(constants$145.__y1f$MH,"__y1f");
    }
    public static float __y1f ( float x0) {
        var mh$ = __y1f$MH();
        try {
            return (float)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ynf$MH() {
        return RuntimeHelper.requireNonNull(constants$145.ynf$MH,"ynf");
    }
    public static float ynf ( int x0,  float x1) {
        var mh$ = ynf$MH();
        try {
            return (float)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __ynf$MH() {
        return RuntimeHelper.requireNonNull(constants$145.__ynf$MH,"__ynf");
    }
    public static float __ynf ( int x0,  float x1) {
        var mh$ = __ynf$MH();
        try {
            return (float)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle erff$MH() {
        return RuntimeHelper.requireNonNull(constants$145.erff$MH,"erff");
    }
    public static float erff ( float x0) {
        var mh$ = erff$MH();
        try {
            return (float)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __erff$MH() {
        return RuntimeHelper.requireNonNull(constants$145.__erff$MH,"__erff");
    }
    public static float __erff ( float x0) {
        var mh$ = __erff$MH();
        try {
            return (float)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle erfcf$MH() {
        return RuntimeHelper.requireNonNull(constants$145.erfcf$MH,"erfcf");
    }
    public static float erfcf ( float x0) {
        var mh$ = erfcf$MH();
        try {
            return (float)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __erfcf$MH() {
        return RuntimeHelper.requireNonNull(constants$146.__erfcf$MH,"__erfcf");
    }
    public static float __erfcf ( float x0) {
        var mh$ = __erfcf$MH();
        try {
            return (float)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lgammaf$MH() {
        return RuntimeHelper.requireNonNull(constants$146.lgammaf$MH,"lgammaf");
    }
    public static float lgammaf ( float x0) {
        var mh$ = lgammaf$MH();
        try {
            return (float)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __lgammaf$MH() {
        return RuntimeHelper.requireNonNull(constants$146.__lgammaf$MH,"__lgammaf");
    }
    public static float __lgammaf ( float x0) {
        var mh$ = __lgammaf$MH();
        try {
            return (float)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle tgammaf$MH() {
        return RuntimeHelper.requireNonNull(constants$146.tgammaf$MH,"tgammaf");
    }
    public static float tgammaf ( float x0) {
        var mh$ = tgammaf$MH();
        try {
            return (float)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __tgammaf$MH() {
        return RuntimeHelper.requireNonNull(constants$146.__tgammaf$MH,"__tgammaf");
    }
    public static float __tgammaf ( float x0) {
        var mh$ = __tgammaf$MH();
        try {
            return (float)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gammaf$MH() {
        return RuntimeHelper.requireNonNull(constants$146.gammaf$MH,"gammaf");
    }
    public static float gammaf ( float x0) {
        var mh$ = gammaf$MH();
        try {
            return (float)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __gammaf$MH() {
        return RuntimeHelper.requireNonNull(constants$147.__gammaf$MH,"__gammaf");
    }
    public static float __gammaf ( float x0) {
        var mh$ = __gammaf$MH();
        try {
            return (float)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lgammaf_r$MH() {
        return RuntimeHelper.requireNonNull(constants$147.lgammaf_r$MH,"lgammaf_r");
    }
    public static float lgammaf_r ( float x0,  Addressable __signgamp) {
        var mh$ = lgammaf_r$MH();
        try {
            return (float)mh$.invokeExact(x0, __signgamp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __lgammaf_r$MH() {
        return RuntimeHelper.requireNonNull(constants$147.__lgammaf_r$MH,"__lgammaf_r");
    }
    public static float __lgammaf_r ( float x0,  Addressable __signgamp) {
        var mh$ = __lgammaf_r$MH();
        try {
            return (float)mh$.invokeExact(x0, __signgamp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rintf$MH() {
        return RuntimeHelper.requireNonNull(constants$147.rintf$MH,"rintf");
    }
    public static float rintf ( float __x) {
        var mh$ = rintf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __rintf$MH() {
        return RuntimeHelper.requireNonNull(constants$147.__rintf$MH,"__rintf");
    }
    public static float __rintf ( float __x) {
        var mh$ = __rintf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nextafterf$MH() {
        return RuntimeHelper.requireNonNull(constants$147.nextafterf$MH,"nextafterf");
    }
    public static float nextafterf ( float __x,  float __y) {
        var mh$ = nextafterf$MH();
        try {
            return (float)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __nextafterf$MH() {
        return RuntimeHelper.requireNonNull(constants$148.__nextafterf$MH,"__nextafterf");
    }
    public static float __nextafterf ( float __x,  float __y) {
        var mh$ = __nextafterf$MH();
        try {
            return (float)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle remainderf$MH() {
        return RuntimeHelper.requireNonNull(constants$148.remainderf$MH,"remainderf");
    }
    public static float remainderf ( float __x,  float __y) {
        var mh$ = remainderf$MH();
        try {
            return (float)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __remainderf$MH() {
        return RuntimeHelper.requireNonNull(constants$148.__remainderf$MH,"__remainderf");
    }
    public static float __remainderf ( float __x,  float __y) {
        var mh$ = __remainderf$MH();
        try {
            return (float)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle scalbnf$MH() {
        return RuntimeHelper.requireNonNull(constants$148.scalbnf$MH,"scalbnf");
    }
    public static float scalbnf ( float __x,  int __n) {
        var mh$ = scalbnf$MH();
        try {
            return (float)mh$.invokeExact(__x, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __scalbnf$MH() {
        return RuntimeHelper.requireNonNull(constants$148.__scalbnf$MH,"__scalbnf");
    }
    public static float __scalbnf ( float __x,  int __n) {
        var mh$ = __scalbnf$MH();
        try {
            return (float)mh$.invokeExact(__x, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ilogbf$MH() {
        return RuntimeHelper.requireNonNull(constants$148.ilogbf$MH,"ilogbf");
    }
    public static int ilogbf ( float __x) {
        var mh$ = ilogbf$MH();
        try {
            return (int)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __ilogbf$MH() {
        return RuntimeHelper.requireNonNull(constants$149.__ilogbf$MH,"__ilogbf");
    }
    public static int __ilogbf ( float __x) {
        var mh$ = __ilogbf$MH();
        try {
            return (int)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle scalblnf$MH() {
        return RuntimeHelper.requireNonNull(constants$149.scalblnf$MH,"scalblnf");
    }
    public static float scalblnf ( float __x,  long __n) {
        var mh$ = scalblnf$MH();
        try {
            return (float)mh$.invokeExact(__x, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __scalblnf$MH() {
        return RuntimeHelper.requireNonNull(constants$149.__scalblnf$MH,"__scalblnf");
    }
    public static float __scalblnf ( float __x,  long __n) {
        var mh$ = __scalblnf$MH();
        try {
            return (float)mh$.invokeExact(__x, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nearbyintf$MH() {
        return RuntimeHelper.requireNonNull(constants$149.nearbyintf$MH,"nearbyintf");
    }
    public static float nearbyintf ( float __x) {
        var mh$ = nearbyintf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __nearbyintf$MH() {
        return RuntimeHelper.requireNonNull(constants$149.__nearbyintf$MH,"__nearbyintf");
    }
    public static float __nearbyintf ( float __x) {
        var mh$ = __nearbyintf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle roundf$MH() {
        return RuntimeHelper.requireNonNull(constants$149.roundf$MH,"roundf");
    }
    public static float roundf ( float __x) {
        var mh$ = roundf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __roundf$MH() {
        return RuntimeHelper.requireNonNull(constants$150.__roundf$MH,"__roundf");
    }
    public static float __roundf ( float __x) {
        var mh$ = __roundf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle truncf$MH() {
        return RuntimeHelper.requireNonNull(constants$150.truncf$MH,"truncf");
    }
    public static float truncf ( float __x) {
        var mh$ = truncf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __truncf$MH() {
        return RuntimeHelper.requireNonNull(constants$150.__truncf$MH,"__truncf");
    }
    public static float __truncf ( float __x) {
        var mh$ = __truncf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle remquof$MH() {
        return RuntimeHelper.requireNonNull(constants$150.remquof$MH,"remquof");
    }
    public static float remquof ( float __x,  float __y,  Addressable __quo) {
        var mh$ = remquof$MH();
        try {
            return (float)mh$.invokeExact(__x, __y, __quo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __remquof$MH() {
        return RuntimeHelper.requireNonNull(constants$150.__remquof$MH,"__remquof");
    }
    public static float __remquof ( float __x,  float __y,  Addressable __quo) {
        var mh$ = __remquof$MH();
        try {
            return (float)mh$.invokeExact(__x, __y, __quo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lrintf$MH() {
        return RuntimeHelper.requireNonNull(constants$150.lrintf$MH,"lrintf");
    }
    public static long lrintf ( float __x) {
        var mh$ = lrintf$MH();
        try {
            return (long)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __lrintf$MH() {
        return RuntimeHelper.requireNonNull(constants$151.__lrintf$MH,"__lrintf");
    }
    public static long __lrintf ( float __x) {
        var mh$ = __lrintf$MH();
        try {
            return (long)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llrintf$MH() {
        return RuntimeHelper.requireNonNull(constants$151.llrintf$MH,"llrintf");
    }
    public static long llrintf ( float __x) {
        var mh$ = llrintf$MH();
        try {
            return (long)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __llrintf$MH() {
        return RuntimeHelper.requireNonNull(constants$151.__llrintf$MH,"__llrintf");
    }
    public static long __llrintf ( float __x) {
        var mh$ = __llrintf$MH();
        try {
            return (long)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lroundf$MH() {
        return RuntimeHelper.requireNonNull(constants$151.lroundf$MH,"lroundf");
    }
    public static long lroundf ( float __x) {
        var mh$ = lroundf$MH();
        try {
            return (long)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __lroundf$MH() {
        return RuntimeHelper.requireNonNull(constants$151.__lroundf$MH,"__lroundf");
    }
    public static long __lroundf ( float __x) {
        var mh$ = __lroundf$MH();
        try {
            return (long)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llroundf$MH() {
        return RuntimeHelper.requireNonNull(constants$151.llroundf$MH,"llroundf");
    }
    public static long llroundf ( float __x) {
        var mh$ = llroundf$MH();
        try {
            return (long)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __llroundf$MH() {
        return RuntimeHelper.requireNonNull(constants$152.__llroundf$MH,"__llroundf");
    }
    public static long __llroundf ( float __x) {
        var mh$ = __llroundf$MH();
        try {
            return (long)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fdimf$MH() {
        return RuntimeHelper.requireNonNull(constants$152.fdimf$MH,"fdimf");
    }
    public static float fdimf ( float __x,  float __y) {
        var mh$ = fdimf$MH();
        try {
            return (float)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __fdimf$MH() {
        return RuntimeHelper.requireNonNull(constants$152.__fdimf$MH,"__fdimf");
    }
    public static float __fdimf ( float __x,  float __y) {
        var mh$ = __fdimf$MH();
        try {
            return (float)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fmaxf$MH() {
        return RuntimeHelper.requireNonNull(constants$152.fmaxf$MH,"fmaxf");
    }
    public static float fmaxf ( float __x,  float __y) {
        var mh$ = fmaxf$MH();
        try {
            return (float)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __fmaxf$MH() {
        return RuntimeHelper.requireNonNull(constants$152.__fmaxf$MH,"__fmaxf");
    }
    public static float __fmaxf ( float __x,  float __y) {
        var mh$ = __fmaxf$MH();
        try {
            return (float)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fminf$MH() {
        return RuntimeHelper.requireNonNull(constants$152.fminf$MH,"fminf");
    }
    public static float fminf ( float __x,  float __y) {
        var mh$ = fminf$MH();
        try {
            return (float)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __fminf$MH() {
        return RuntimeHelper.requireNonNull(constants$153.__fminf$MH,"__fminf");
    }
    public static float __fminf ( float __x,  float __y) {
        var mh$ = __fminf$MH();
        try {
            return (float)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fmaf$MH() {
        return RuntimeHelper.requireNonNull(constants$153.fmaf$MH,"fmaf");
    }
    public static float fmaf ( float __x,  float __y,  float __z) {
        var mh$ = fmaf$MH();
        try {
            return (float)mh$.invokeExact(__x, __y, __z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __fmaf$MH() {
        return RuntimeHelper.requireNonNull(constants$153.__fmaf$MH,"__fmaf");
    }
    public static float __fmaf ( float __x,  float __y,  float __z) {
        var mh$ = __fmaf$MH();
        try {
            return (float)mh$.invokeExact(__x, __y, __z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle scalbf$MH() {
        return RuntimeHelper.requireNonNull(constants$153.scalbf$MH,"scalbf");
    }
    public static float scalbf ( float __x,  float __n) {
        var mh$ = scalbf$MH();
        try {
            return (float)mh$.invokeExact(__x, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __scalbf$MH() {
        return RuntimeHelper.requireNonNull(constants$153.__scalbf$MH,"__scalbf");
    }
    public static float __scalbf ( float __x,  float __n) {
        var mh$ = __scalbf$MH();
        try {
            return (float)mh$.invokeExact(__x, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MemoryLayout signgam$LAYOUT() {
        return constants$153.signgam$LAYOUT;
    }
    public static VarHandle signgam$VH() {
        return constants$153.signgam$VH;
    }
    public static MemorySegment signgam$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$153.signgam$SEGMENT,"signgam");
    }
    public static int signgam$get() {
        return (int) constants$153.signgam$VH.get(RuntimeHelper.requireNonNull(constants$153.signgam$SEGMENT, "signgam"));
    }
    public static void signgam$set( int x) {
        constants$153.signgam$VH.set(RuntimeHelper.requireNonNull(constants$153.signgam$SEGMENT, "signgam"), x);
    }
    public static MethodHandle yr_scanner_create$MH() {
        return RuntimeHelper.requireNonNull(constants$154.yr_scanner_create$MH,"yr_scanner_create");
    }
    public static int yr_scanner_create ( Addressable rules,  Addressable scanner) {
        var mh$ = yr_scanner_create$MH();
        try {
            return (int)mh$.invokeExact(rules, scanner);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_scanner_destroy$MH() {
        return RuntimeHelper.requireNonNull(constants$154.yr_scanner_destroy$MH,"yr_scanner_destroy");
    }
    public static void yr_scanner_destroy ( Addressable scanner) {
        var mh$ = yr_scanner_destroy$MH();
        try {
            mh$.invokeExact(scanner);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_scanner_set_callback$MH() {
        return RuntimeHelper.requireNonNull(constants$154.yr_scanner_set_callback$MH,"yr_scanner_set_callback");
    }
    public static void yr_scanner_set_callback ( Addressable scanner,  Addressable callback,  Addressable user_data) {
        var mh$ = yr_scanner_set_callback$MH();
        try {
            mh$.invokeExact(scanner, callback, user_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_scanner_set_timeout$MH() {
        return RuntimeHelper.requireNonNull(constants$154.yr_scanner_set_timeout$MH,"yr_scanner_set_timeout");
    }
    public static void yr_scanner_set_timeout ( Addressable scanner,  int timeout) {
        var mh$ = yr_scanner_set_timeout$MH();
        try {
            mh$.invokeExact(scanner, timeout);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_scanner_set_flags$MH() {
        return RuntimeHelper.requireNonNull(constants$154.yr_scanner_set_flags$MH,"yr_scanner_set_flags");
    }
    public static void yr_scanner_set_flags ( Addressable scanner,  int flags) {
        var mh$ = yr_scanner_set_flags$MH();
        try {
            mh$.invokeExact(scanner, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_scanner_define_integer_variable$MH() {
        return RuntimeHelper.requireNonNull(constants$154.yr_scanner_define_integer_variable$MH,"yr_scanner_define_integer_variable");
    }
    public static int yr_scanner_define_integer_variable ( Addressable scanner,  Addressable identifier,  long value) {
        var mh$ = yr_scanner_define_integer_variable$MH();
        try {
            return (int)mh$.invokeExact(scanner, identifier, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_scanner_define_boolean_variable$MH() {
        return RuntimeHelper.requireNonNull(constants$155.yr_scanner_define_boolean_variable$MH,"yr_scanner_define_boolean_variable");
    }
    public static int yr_scanner_define_boolean_variable ( Addressable scanner,  Addressable identifier,  int value) {
        var mh$ = yr_scanner_define_boolean_variable$MH();
        try {
            return (int)mh$.invokeExact(scanner, identifier, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_scanner_define_float_variable$MH() {
        return RuntimeHelper.requireNonNull(constants$155.yr_scanner_define_float_variable$MH,"yr_scanner_define_float_variable");
    }
    public static int yr_scanner_define_float_variable ( Addressable scanner,  Addressable identifier,  double value) {
        var mh$ = yr_scanner_define_float_variable$MH();
        try {
            return (int)mh$.invokeExact(scanner, identifier, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_scanner_define_string_variable$MH() {
        return RuntimeHelper.requireNonNull(constants$155.yr_scanner_define_string_variable$MH,"yr_scanner_define_string_variable");
    }
    public static int yr_scanner_define_string_variable ( Addressable scanner,  Addressable identifier,  Addressable value) {
        var mh$ = yr_scanner_define_string_variable$MH();
        try {
            return (int)mh$.invokeExact(scanner, identifier, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_scanner_scan_mem_blocks$MH() {
        return RuntimeHelper.requireNonNull(constants$155.yr_scanner_scan_mem_blocks$MH,"yr_scanner_scan_mem_blocks");
    }
    public static int yr_scanner_scan_mem_blocks ( Addressable scanner,  Addressable iterator) {
        var mh$ = yr_scanner_scan_mem_blocks$MH();
        try {
            return (int)mh$.invokeExact(scanner, iterator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_scanner_scan_mem$MH() {
        return RuntimeHelper.requireNonNull(constants$155.yr_scanner_scan_mem$MH,"yr_scanner_scan_mem");
    }
    public static int yr_scanner_scan_mem ( Addressable scanner,  Addressable buffer,  long buffer_size) {
        var mh$ = yr_scanner_scan_mem$MH();
        try {
            return (int)mh$.invokeExact(scanner, buffer, buffer_size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_scanner_scan_file$MH() {
        return RuntimeHelper.requireNonNull(constants$155.yr_scanner_scan_file$MH,"yr_scanner_scan_file");
    }
    public static int yr_scanner_scan_file ( Addressable scanner,  Addressable filename) {
        var mh$ = yr_scanner_scan_file$MH();
        try {
            return (int)mh$.invokeExact(scanner, filename);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_scanner_scan_fd$MH() {
        return RuntimeHelper.requireNonNull(constants$156.yr_scanner_scan_fd$MH,"yr_scanner_scan_fd");
    }
    public static int yr_scanner_scan_fd ( Addressable scanner,  int fd) {
        var mh$ = yr_scanner_scan_fd$MH();
        try {
            return (int)mh$.invokeExact(scanner, fd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_scanner_scan_proc$MH() {
        return RuntimeHelper.requireNonNull(constants$156.yr_scanner_scan_proc$MH,"yr_scanner_scan_proc");
    }
    public static int yr_scanner_scan_proc ( Addressable scanner,  int pid) {
        var mh$ = yr_scanner_scan_proc$MH();
        try {
            return (int)mh$.invokeExact(scanner, pid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_scanner_last_error_rule$MH() {
        return RuntimeHelper.requireNonNull(constants$156.yr_scanner_last_error_rule$MH,"yr_scanner_last_error_rule");
    }
    public static MemoryAddress yr_scanner_last_error_rule ( Addressable scanner) {
        var mh$ = yr_scanner_last_error_rule$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(scanner);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_scanner_last_error_string$MH() {
        return RuntimeHelper.requireNonNull(constants$156.yr_scanner_last_error_string$MH,"yr_scanner_last_error_string");
    }
    public static MemoryAddress yr_scanner_last_error_string ( Addressable scanner) {
        var mh$ = yr_scanner_last_error_string$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(scanner);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_scanner_get_profiling_info$MH() {
        return RuntimeHelper.requireNonNull(constants$156.yr_scanner_get_profiling_info$MH,"yr_scanner_get_profiling_info");
    }
    public static MemoryAddress yr_scanner_get_profiling_info ( Addressable scanner) {
        var mh$ = yr_scanner_get_profiling_info$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(scanner);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_scanner_reset_profiling_info$MH() {
        return RuntimeHelper.requireNonNull(constants$156.yr_scanner_reset_profiling_info$MH,"yr_scanner_reset_profiling_info");
    }
    public static void yr_scanner_reset_profiling_info ( Addressable scanner) {
        var mh$ = yr_scanner_reset_profiling_info$MH();
        try {
            mh$.invokeExact(scanner);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_scanner_print_profiling_info$MH() {
        return RuntimeHelper.requireNonNull(constants$157.yr_scanner_print_profiling_info$MH,"yr_scanner_print_profiling_info");
    }
    public static int yr_scanner_print_profiling_info ( Addressable scanner) {
        var mh$ = yr_scanner_print_profiling_info$MH();
        try {
            return (int)mh$.invokeExact(scanner);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_rules_scan_mem_blocks$MH() {
        return RuntimeHelper.requireNonNull(constants$157.yr_rules_scan_mem_blocks$MH,"yr_rules_scan_mem_blocks");
    }
    public static int yr_rules_scan_mem_blocks ( Addressable rules,  Addressable iterator,  int flags,  Addressable callback,  Addressable user_data,  int timeout) {
        var mh$ = yr_rules_scan_mem_blocks$MH();
        try {
            return (int)mh$.invokeExact(rules, iterator, flags, callback, user_data, timeout);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_rules_scan_mem$MH() {
        return RuntimeHelper.requireNonNull(constants$157.yr_rules_scan_mem$MH,"yr_rules_scan_mem");
    }
    public static int yr_rules_scan_mem ( Addressable rules,  Addressable buffer,  long buffer_size,  int flags,  Addressable callback,  Addressable user_data,  int timeout) {
        var mh$ = yr_rules_scan_mem$MH();
        try {
            return (int)mh$.invokeExact(rules, buffer, buffer_size, flags, callback, user_data, timeout);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_rules_scan_file$MH() {
        return RuntimeHelper.requireNonNull(constants$157.yr_rules_scan_file$MH,"yr_rules_scan_file");
    }
    public static int yr_rules_scan_file ( Addressable rules,  Addressable filename,  int flags,  Addressable callback,  Addressable user_data,  int timeout) {
        var mh$ = yr_rules_scan_file$MH();
        try {
            return (int)mh$.invokeExact(rules, filename, flags, callback, user_data, timeout);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_rules_scan_fd$MH() {
        return RuntimeHelper.requireNonNull(constants$157.yr_rules_scan_fd$MH,"yr_rules_scan_fd");
    }
    public static int yr_rules_scan_fd ( Addressable rules,  int fd,  int flags,  Addressable callback,  Addressable user_data,  int timeout) {
        var mh$ = yr_rules_scan_fd$MH();
        try {
            return (int)mh$.invokeExact(rules, fd, flags, callback, user_data, timeout);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_rules_scan_proc$MH() {
        return RuntimeHelper.requireNonNull(constants$157.yr_rules_scan_proc$MH,"yr_rules_scan_proc");
    }
    public static int yr_rules_scan_proc ( Addressable rules,  int pid,  int flags,  Addressable callback,  Addressable user_data,  int timeout) {
        var mh$ = yr_rules_scan_proc$MH();
        try {
            return (int)mh$.invokeExact(rules, pid, flags, callback, user_data, timeout);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_rules_save$MH() {
        return RuntimeHelper.requireNonNull(constants$158.yr_rules_save$MH,"yr_rules_save");
    }
    public static int yr_rules_save ( Addressable rules,  Addressable filename) {
        var mh$ = yr_rules_save$MH();
        try {
            return (int)mh$.invokeExact(rules, filename);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_rules_save_stream$MH() {
        return RuntimeHelper.requireNonNull(constants$158.yr_rules_save_stream$MH,"yr_rules_save_stream");
    }
    public static int yr_rules_save_stream ( Addressable rules,  Addressable stream) {
        var mh$ = yr_rules_save_stream$MH();
        try {
            return (int)mh$.invokeExact(rules, stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_rules_load$MH() {
        return RuntimeHelper.requireNonNull(constants$158.yr_rules_load$MH,"yr_rules_load");
    }
    public static int yr_rules_load ( Addressable filename,  Addressable rules) {
        var mh$ = yr_rules_load$MH();
        try {
            return (int)mh$.invokeExact(filename, rules);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_rules_load_stream$MH() {
        return RuntimeHelper.requireNonNull(constants$158.yr_rules_load_stream$MH,"yr_rules_load_stream");
    }
    public static int yr_rules_load_stream ( Addressable stream,  Addressable rules) {
        var mh$ = yr_rules_load_stream$MH();
        try {
            return (int)mh$.invokeExact(stream, rules);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_rules_destroy$MH() {
        return RuntimeHelper.requireNonNull(constants$158.yr_rules_destroy$MH,"yr_rules_destroy");
    }
    public static int yr_rules_destroy ( Addressable rules) {
        var mh$ = yr_rules_destroy$MH();
        try {
            return (int)mh$.invokeExact(rules);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_rules_define_integer_variable$MH() {
        return RuntimeHelper.requireNonNull(constants$158.yr_rules_define_integer_variable$MH,"yr_rules_define_integer_variable");
    }
    public static int yr_rules_define_integer_variable ( Addressable rules,  Addressable identifier,  long value) {
        var mh$ = yr_rules_define_integer_variable$MH();
        try {
            return (int)mh$.invokeExact(rules, identifier, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_rules_define_boolean_variable$MH() {
        return RuntimeHelper.requireNonNull(constants$159.yr_rules_define_boolean_variable$MH,"yr_rules_define_boolean_variable");
    }
    public static int yr_rules_define_boolean_variable ( Addressable rules,  Addressable identifier,  int value) {
        var mh$ = yr_rules_define_boolean_variable$MH();
        try {
            return (int)mh$.invokeExact(rules, identifier, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_rules_define_float_variable$MH() {
        return RuntimeHelper.requireNonNull(constants$159.yr_rules_define_float_variable$MH,"yr_rules_define_float_variable");
    }
    public static int yr_rules_define_float_variable ( Addressable rules,  Addressable identifier,  double value) {
        var mh$ = yr_rules_define_float_variable$MH();
        try {
            return (int)mh$.invokeExact(rules, identifier, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_rules_define_string_variable$MH() {
        return RuntimeHelper.requireNonNull(constants$159.yr_rules_define_string_variable$MH,"yr_rules_define_string_variable");
    }
    public static int yr_rules_define_string_variable ( Addressable rules,  Addressable identifier,  Addressable value) {
        var mh$ = yr_rules_define_string_variable$MH();
        try {
            return (int)mh$.invokeExact(rules, identifier, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_rules_get_stats$MH() {
        return RuntimeHelper.requireNonNull(constants$159.yr_rules_get_stats$MH,"yr_rules_get_stats");
    }
    public static int yr_rules_get_stats ( Addressable rules,  Addressable stats) {
        var mh$ = yr_rules_get_stats$MH();
        try {
            return (int)mh$.invokeExact(rules, stats);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_rule_disable$MH() {
        return RuntimeHelper.requireNonNull(constants$159.yr_rule_disable$MH,"yr_rule_disable");
    }
    public static void yr_rule_disable ( Addressable rule) {
        var mh$ = yr_rule_disable$MH();
        try {
            mh$.invokeExact(rule);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_rule_enable$MH() {
        return RuntimeHelper.requireNonNull(constants$159.yr_rule_enable$MH,"yr_rule_enable");
    }
    public static void yr_rule_enable ( Addressable rule) {
        var mh$ = yr_rule_enable$MH();
        try {
            mh$.invokeExact(rule);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_rules_from_arena$MH() {
        return RuntimeHelper.requireNonNull(constants$160.yr_rules_from_arena$MH,"yr_rules_from_arena");
    }
    public static int yr_rules_from_arena ( Addressable arena,  Addressable rules) {
        var mh$ = yr_rules_from_arena$MH();
        try {
            return (int)mh$.invokeExact(arena, rules);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_scan_verify_match$MH() {
        return RuntimeHelper.requireNonNull(constants$160.yr_scan_verify_match$MH,"yr_scan_verify_match");
    }
    public static int yr_scan_verify_match ( Addressable context,  Addressable ac_match,  Addressable data,  long data_size,  long data_base,  long offset) {
        var mh$ = yr_scan_verify_match$MH();
        try {
            return (int)mh$.invokeExact(context, ac_match, data, data_size, data_base, offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_execute_code$MH() {
        return RuntimeHelper.requireNonNull(constants$160.yr_execute_code$MH,"yr_execute_code");
    }
    public static int yr_execute_code ( Addressable context) {
        var mh$ = yr_execute_code$MH();
        try {
            return (int)mh$.invokeExact(context);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_object_create$MH() {
        return RuntimeHelper.requireNonNull(constants$160.yr_object_create$MH,"yr_object_create");
    }
    public static int yr_object_create ( byte type,  Addressable identifier,  Addressable parent,  Addressable object) {
        var mh$ = yr_object_create$MH();
        try {
            return (int)mh$.invokeExact(type, identifier, parent, object);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_object_set_canary$MH() {
        return RuntimeHelper.requireNonNull(constants$160.yr_object_set_canary$MH,"yr_object_set_canary");
    }
    public static void yr_object_set_canary ( Addressable object,  int canary) {
        var mh$ = yr_object_set_canary$MH();
        try {
            mh$.invokeExact(object, canary);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_object_function_create$MH() {
        return RuntimeHelper.requireNonNull(constants$160.yr_object_function_create$MH,"yr_object_function_create");
    }
    public static int yr_object_function_create ( Addressable identifier,  Addressable arguments_fmt,  Addressable return_fmt,  Addressable func,  Addressable parent,  Addressable function) {
        var mh$ = yr_object_function_create$MH();
        try {
            return (int)mh$.invokeExact(identifier, arguments_fmt, return_fmt, func, parent, function);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_object_from_external_variable$MH() {
        return RuntimeHelper.requireNonNull(constants$161.yr_object_from_external_variable$MH,"yr_object_from_external_variable");
    }
    public static int yr_object_from_external_variable ( Addressable external,  Addressable object) {
        var mh$ = yr_object_from_external_variable$MH();
        try {
            return (int)mh$.invokeExact(external, object);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_object_destroy$MH() {
        return RuntimeHelper.requireNonNull(constants$161.yr_object_destroy$MH,"yr_object_destroy");
    }
    public static void yr_object_destroy ( Addressable object) {
        var mh$ = yr_object_destroy$MH();
        try {
            mh$.invokeExact(object);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_object_copy$MH() {
        return RuntimeHelper.requireNonNull(constants$161.yr_object_copy$MH,"yr_object_copy");
    }
    public static int yr_object_copy ( Addressable object,  Addressable object_copy) {
        var mh$ = yr_object_copy$MH();
        try {
            return (int)mh$.invokeExact(object, object_copy);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_object_lookup_field$MH() {
        return RuntimeHelper.requireNonNull(constants$161.yr_object_lookup_field$MH,"yr_object_lookup_field");
    }
    public static MemoryAddress yr_object_lookup_field ( Addressable object,  Addressable field_name) {
        var mh$ = yr_object_lookup_field$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(object, field_name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_object_lookup$MH() {
        return RuntimeHelper.requireNonNull(constants$161.yr_object_lookup$MH,"yr_object_lookup");
    }
    public static MemoryAddress yr_object_lookup ( Addressable root,  int flags,  Addressable pattern, Object... x3) {
        var mh$ = yr_object_lookup$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(root, flags, pattern, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_object_has_undefined_value$MH() {
        return RuntimeHelper.requireNonNull(constants$161.yr_object_has_undefined_value$MH,"yr_object_has_undefined_value");
    }
    public static boolean yr_object_has_undefined_value ( Addressable object,  Addressable field, Object... x2) {
        var mh$ = yr_object_has_undefined_value$MH();
        try {
            return (boolean)mh$.invokeExact(object, field, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_object_get_float$MH() {
        return RuntimeHelper.requireNonNull(constants$162.yr_object_get_float$MH,"yr_object_get_float");
    }
    public static double yr_object_get_float ( Addressable object,  Addressable field, Object... x2) {
        var mh$ = yr_object_get_float$MH();
        try {
            return (double)mh$.invokeExact(object, field, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_object_get_integer$MH() {
        return RuntimeHelper.requireNonNull(constants$162.yr_object_get_integer$MH,"yr_object_get_integer");
    }
    public static long yr_object_get_integer ( Addressable object,  Addressable field, Object... x2) {
        var mh$ = yr_object_get_integer$MH();
        try {
            return (long)mh$.invokeExact(object, field, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_object_get_string$MH() {
        return RuntimeHelper.requireNonNull(constants$162.yr_object_get_string$MH,"yr_object_get_string");
    }
    public static MemoryAddress yr_object_get_string ( Addressable object,  Addressable field, Object... x2) {
        var mh$ = yr_object_get_string$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(object, field, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_object_set_integer$MH() {
        return RuntimeHelper.requireNonNull(constants$162.yr_object_set_integer$MH,"yr_object_set_integer");
    }
    public static int yr_object_set_integer ( long value,  Addressable object,  Addressable field, Object... x3) {
        var mh$ = yr_object_set_integer$MH();
        try {
            return (int)mh$.invokeExact(value, object, field, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_object_set_float$MH() {
        return RuntimeHelper.requireNonNull(constants$162.yr_object_set_float$MH,"yr_object_set_float");
    }
    public static int yr_object_set_float ( double value,  Addressable object,  Addressable field, Object... x3) {
        var mh$ = yr_object_set_float$MH();
        try {
            return (int)mh$.invokeExact(value, object, field, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_object_set_string$MH() {
        return RuntimeHelper.requireNonNull(constants$162.yr_object_set_string$MH,"yr_object_set_string");
    }
    public static int yr_object_set_string ( Addressable value,  long len,  Addressable object,  Addressable field, Object... x4) {
        var mh$ = yr_object_set_string$MH();
        try {
            return (int)mh$.invokeExact(value, len, object, field, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_object_array_length$MH() {
        return RuntimeHelper.requireNonNull(constants$163.yr_object_array_length$MH,"yr_object_array_length");
    }
    public static int yr_object_array_length ( Addressable object) {
        var mh$ = yr_object_array_length$MH();
        try {
            return (int)mh$.invokeExact(object);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_object_array_get_item$MH() {
        return RuntimeHelper.requireNonNull(constants$163.yr_object_array_get_item$MH,"yr_object_array_get_item");
    }
    public static MemoryAddress yr_object_array_get_item ( Addressable object,  int flags,  int index) {
        var mh$ = yr_object_array_get_item$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(object, flags, index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_object_array_set_item$MH() {
        return RuntimeHelper.requireNonNull(constants$163.yr_object_array_set_item$MH,"yr_object_array_set_item");
    }
    public static int yr_object_array_set_item ( Addressable object,  Addressable item,  int index) {
        var mh$ = yr_object_array_set_item$MH();
        try {
            return (int)mh$.invokeExact(object, item, index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_object_dict_get_item$MH() {
        return RuntimeHelper.requireNonNull(constants$163.yr_object_dict_get_item$MH,"yr_object_dict_get_item");
    }
    public static MemoryAddress yr_object_dict_get_item ( Addressable object,  int flags,  Addressable key) {
        var mh$ = yr_object_dict_get_item$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(object, flags, key);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_object_dict_set_item$MH() {
        return RuntimeHelper.requireNonNull(constants$163.yr_object_dict_set_item$MH,"yr_object_dict_set_item");
    }
    public static int yr_object_dict_set_item ( Addressable object,  Addressable item,  Addressable key) {
        var mh$ = yr_object_dict_set_item$MH();
        try {
            return (int)mh$.invokeExact(object, item, key);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_object_structure_set_member$MH() {
        return RuntimeHelper.requireNonNull(constants$163.yr_object_structure_set_member$MH,"yr_object_structure_set_member");
    }
    public static int yr_object_structure_set_member ( Addressable object,  Addressable member) {
        var mh$ = yr_object_structure_set_member$MH();
        try {
            return (int)mh$.invokeExact(object, member);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_object_get_root$MH() {
        return RuntimeHelper.requireNonNull(constants$164.yr_object_get_root$MH,"yr_object_get_root");
    }
    public static MemoryAddress yr_object_get_root ( Addressable object) {
        var mh$ = yr_object_get_root$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(object);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_object_print_data$MH() {
        return RuntimeHelper.requireNonNull(constants$164.yr_object_print_data$MH,"yr_object_print_data");
    }
    public static void yr_object_print_data ( Addressable object,  int indent,  int print_identifier) {
        var mh$ = yr_object_print_data$MH();
        try {
            mh$.invokeExact(object, indent, print_identifier);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_modules_initialize$MH() {
        return RuntimeHelper.requireNonNull(constants$166.yr_modules_initialize$MH,"yr_modules_initialize");
    }
    public static int yr_modules_initialize () {
        var mh$ = yr_modules_initialize$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_modules_finalize$MH() {
        return RuntimeHelper.requireNonNull(constants$166.yr_modules_finalize$MH,"yr_modules_finalize");
    }
    public static int yr_modules_finalize () {
        var mh$ = yr_modules_finalize$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_modules_do_declarations$MH() {
        return RuntimeHelper.requireNonNull(constants$166.yr_modules_do_declarations$MH,"yr_modules_do_declarations");
    }
    public static int yr_modules_do_declarations ( Addressable module_name,  Addressable main_structure) {
        var mh$ = yr_modules_do_declarations$MH();
        try {
            return (int)mh$.invokeExact(module_name, main_structure);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_modules_load$MH() {
        return RuntimeHelper.requireNonNull(constants$166.yr_modules_load$MH,"yr_modules_load");
    }
    public static int yr_modules_load ( Addressable module_name,  Addressable context) {
        var mh$ = yr_modules_load$MH();
        try {
            return (int)mh$.invokeExact(module_name, context);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_modules_unload_all$MH() {
        return RuntimeHelper.requireNonNull(constants$166.yr_modules_unload_all$MH,"yr_modules_unload_all");
    }
    public static int yr_modules_unload_all ( Addressable context) {
        var mh$ = yr_modules_unload_all$MH();
        try {
            return (int)mh$.invokeExact(context);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static long _POSIX_C_SOURCE() {
        return 200809L;
    }
    public static int __TIMESIZE() {
        return (int)64L;
    }
    public static long __STDC_IEC_60559_BFP__() {
        return 201404L;
    }
    public static long __STDC_IEC_60559_COMPLEX__() {
        return 201404L;
    }
    public static long __STDC_ISO_10646__() {
        return 201706L;
    }
    public static long _SIGSET_NWORDS() {
        return 16L;
    }
    public static MemoryAddress NULL() {
        return constants$166.NULL$ADDR;
    }
    public static int EOF() {
        return (int)-1L;
    }
    public static MemorySegment P_tmpdir() {
        return constants$167.P_tmpdir$SEGMENT;
    }
    public static int __HAVE_DISTINCT_FLOAT16() {
        return (int)0L;
    }
    public static int __HAVE_DISTINCT_FLOAT128X() {
        return (int)0L;
    }
    public static int __HAVE_FLOAT128_UNLIKE_LDBL() {
        return (int)0L;
    }
    public static long LLONG_MIN() {
        return -9223372036854775808L;
    }
    public static long LLONG_MAX() {
        return 9223372036854775807L;
    }
    public static long ULLONG_MAX() {
        return -1L;
    }
    public static int PTHREAD_DESTRUCTOR_ITERATIONS() {
        return (int)4L;
    }
    public static int SEM_VALUE_MAX() {
        return (int)2147483647L;
    }
    public static long SSIZE_MAX() {
        return 9223372036854775807L;
    }
    public static int BC_BASE_MAX() {
        return (int)99L;
    }
    public static int BC_DIM_MAX() {
        return (int)2048L;
    }
    public static int BC_SCALE_MAX() {
        return (int)99L;
    }
    public static int BC_STRING_MAX() {
        return (int)1000L;
    }
    public static int EXPR_NEST_MAX() {
        return (int)32L;
    }
    public static int LINE_MAX() {
        return (int)2048L;
    }
    public static int RE_DUP_MAX() {
        return (int)32767L;
    }
    public static int SCHAR_MAX() {
        return (int)127L;
    }
    public static int SHRT_MAX() {
        return (int)32767L;
    }
    public static int INT_MAX() {
        return (int)2147483647L;
    }
    public static long LONG_MAX() {
        return 9223372036854775807L;
    }
    public static int SCHAR_MIN() {
        return (int)-128L;
    }
    public static int SHRT_MIN() {
        return (int)-32768L;
    }
    public static int INT_MIN() {
        return (int)-2147483648L;
    }
    public static long LONG_MIN() {
        return -9223372036854775808L;
    }
    public static int UCHAR_MAX() {
        return (int)255L;
    }
    public static int USHRT_MAX() {
        return (int)65535L;
    }
    public static int UINT_MAX() {
        return (int)4294967295L;
    }
    public static long ULONG_MAX() {
        return -1L;
    }
    public static int CHAR_BIT() {
        return (int)8L;
    }
    public static int CHAR_MIN() {
        return (int)-128L;
    }
    public static int CHAR_MAX() {
        return (int)127L;
    }
    public static int __WCLONE() {
        return (int)2147483648L;
    }
    public static int __BYTE_ORDER() {
        return (int)1234L;
    }
    public static int __FLOAT_WORD_ORDER() {
        return (int)1234L;
    }
    public static int LITTLE_ENDIAN() {
        return (int)1234L;
    }
    public static int BIG_ENDIAN() {
        return (int)4321L;
    }
    public static int PDP_ENDIAN() {
        return (int)3412L;
    }
    public static int BYTE_ORDER() {
        return (int)1234L;
    }
    public static int __NFDBITS() {
        return (int)64L;
    }
    public static int FD_SETSIZE() {
        return (int)1024L;
    }
    public static int NFDBITS() {
        return (int)64L;
    }
    public static int __PTHREAD_RWLOCK_ELISION_EXTRA() {
        return (int)0L;
    }
    public static int __WCHAR_MAX() {
        return (int)2147483647L;
    }
    public static int __WCHAR_MIN() {
        return (int)-2147483648L;
    }
    public static int INT8_MIN() {
        return (int)-128L;
    }
    public static int INT16_MIN() {
        return (int)-32768L;
    }
    public static int INT32_MIN() {
        return (int)-2147483648L;
    }
    public static long INT64_MIN() {
        return -9223372036854775808L;
    }
    public static int INT8_MAX() {
        return (int)127L;
    }
    public static int INT16_MAX() {
        return (int)32767L;
    }
    public static int INT32_MAX() {
        return (int)2147483647L;
    }
    public static long INT64_MAX() {
        return 9223372036854775807L;
    }
    public static int UINT8_MAX() {
        return (int)255L;
    }
    public static int UINT16_MAX() {
        return (int)65535L;
    }
    public static int UINT32_MAX() {
        return (int)4294967295L;
    }
    public static long UINT64_MAX() {
        return -1L;
    }
    public static int INT_LEAST8_MIN() {
        return (int)-128L;
    }
    public static int INT_LEAST16_MIN() {
        return (int)-32768L;
    }
    public static int INT_LEAST32_MIN() {
        return (int)-2147483648L;
    }
    public static long INT_LEAST64_MIN() {
        return -9223372036854775808L;
    }
    public static int INT_LEAST8_MAX() {
        return (int)127L;
    }
    public static int INT_LEAST16_MAX() {
        return (int)32767L;
    }
    public static int INT_LEAST32_MAX() {
        return (int)2147483647L;
    }
    public static long INT_LEAST64_MAX() {
        return 9223372036854775807L;
    }
    public static int UINT_LEAST8_MAX() {
        return (int)255L;
    }
    public static int UINT_LEAST16_MAX() {
        return (int)65535L;
    }
    public static int UINT_LEAST32_MAX() {
        return (int)4294967295L;
    }
    public static long UINT_LEAST64_MAX() {
        return -1L;
    }
    public static int INT_FAST8_MIN() {
        return (int)-128L;
    }
    public static long INT_FAST16_MIN() {
        return -9223372036854775808L;
    }
    public static long INT_FAST32_MIN() {
        return -9223372036854775808L;
    }
    public static long INT_FAST64_MIN() {
        return -9223372036854775808L;
    }
    public static int INT_FAST8_MAX() {
        return (int)127L;
    }
    public static long INT_FAST16_MAX() {
        return 9223372036854775807L;
    }
    public static long INT_FAST32_MAX() {
        return 9223372036854775807L;
    }
    public static long INT_FAST64_MAX() {
        return 9223372036854775807L;
    }
    public static int UINT_FAST8_MAX() {
        return (int)255L;
    }
    public static long UINT_FAST16_MAX() {
        return -1L;
    }
    public static long UINT_FAST32_MAX() {
        return -1L;
    }
    public static long UINT_FAST64_MAX() {
        return -1L;
    }
    public static long INTPTR_MIN() {
        return -9223372036854775808L;
    }
    public static long INTPTR_MAX() {
        return 9223372036854775807L;
    }
    public static long UINTPTR_MAX() {
        return -1L;
    }
    public static long INTMAX_MIN() {
        return -9223372036854775808L;
    }
    public static long INTMAX_MAX() {
        return 9223372036854775807L;
    }
    public static long UINTMAX_MAX() {
        return -1L;
    }
    public static long PTRDIFF_MIN() {
        return -9223372036854775808L;
    }
    public static long PTRDIFF_MAX() {
        return 9223372036854775807L;
    }
    public static int SIG_ATOMIC_MIN() {
        return (int)-2147483648L;
    }
    public static int SIG_ATOMIC_MAX() {
        return (int)2147483647L;
    }
    public static long SIZE_MAX() {
        return -1L;
    }
    public static int WCHAR_MIN() {
        return (int)-2147483648L;
    }
    public static int WCHAR_MAX() {
        return (int)2147483647L;
    }
    public static int WINT_MIN() {
        return (int)0L;
    }
    public static int WINT_MAX() {
        return (int)4294967295L;
    }
    public static MemorySegment __PRI64_PREFIX() {
        return constants$167.__PRI64_PREFIX$SEGMENT;
    }
    public static MemorySegment __PRIPTR_PREFIX() {
        return constants$167.__PRIPTR_PREFIX$SEGMENT;
    }
    public static MemorySegment PRId8() {
        return constants$167.PRId8$SEGMENT;
    }
    public static MemorySegment PRId16() {
        return constants$167.PRId16$SEGMENT;
    }
    public static MemorySegment PRId32() {
        return constants$167.PRId32$SEGMENT;
    }
    public static MemorySegment PRId64() {
        return constants$168.PRId64$SEGMENT;
    }
    public static MemorySegment PRIdLEAST8() {
        return constants$168.PRIdLEAST8$SEGMENT;
    }
    public static MemorySegment PRIdLEAST16() {
        return constants$168.PRIdLEAST16$SEGMENT;
    }
    public static MemorySegment PRIdLEAST32() {
        return constants$168.PRIdLEAST32$SEGMENT;
    }
    public static MemorySegment PRIdLEAST64() {
        return constants$168.PRIdLEAST64$SEGMENT;
    }
    public static MemorySegment PRIdFAST8() {
        return constants$168.PRIdFAST8$SEGMENT;
    }
    public static MemorySegment PRIdFAST16() {
        return constants$169.PRIdFAST16$SEGMENT;
    }
    public static MemorySegment PRIdFAST32() {
        return constants$169.PRIdFAST32$SEGMENT;
    }
    public static MemorySegment PRIdFAST64() {
        return constants$169.PRIdFAST64$SEGMENT;
    }
    public static MemorySegment PRIi8() {
        return constants$169.PRIi8$SEGMENT;
    }
    public static MemorySegment PRIi16() {
        return constants$169.PRIi16$SEGMENT;
    }
    public static MemorySegment PRIi32() {
        return constants$169.PRIi32$SEGMENT;
    }
    public static MemorySegment PRIi64() {
        return constants$170.PRIi64$SEGMENT;
    }
    public static MemorySegment PRIiLEAST8() {
        return constants$170.PRIiLEAST8$SEGMENT;
    }
    public static MemorySegment PRIiLEAST16() {
        return constants$170.PRIiLEAST16$SEGMENT;
    }
    public static MemorySegment PRIiLEAST32() {
        return constants$170.PRIiLEAST32$SEGMENT;
    }
    public static MemorySegment PRIiLEAST64() {
        return constants$170.PRIiLEAST64$SEGMENT;
    }
    public static MemorySegment PRIiFAST8() {
        return constants$170.PRIiFAST8$SEGMENT;
    }
    public static MemorySegment PRIiFAST16() {
        return constants$171.PRIiFAST16$SEGMENT;
    }
    public static MemorySegment PRIiFAST32() {
        return constants$171.PRIiFAST32$SEGMENT;
    }
    public static MemorySegment PRIiFAST64() {
        return constants$171.PRIiFAST64$SEGMENT;
    }
    public static MemorySegment PRIo8() {
        return constants$171.PRIo8$SEGMENT;
    }
    public static MemorySegment PRIo16() {
        return constants$171.PRIo16$SEGMENT;
    }
    public static MemorySegment PRIo32() {
        return constants$171.PRIo32$SEGMENT;
    }
    public static MemorySegment PRIo64() {
        return constants$172.PRIo64$SEGMENT;
    }
    public static MemorySegment PRIoLEAST8() {
        return constants$172.PRIoLEAST8$SEGMENT;
    }
    public static MemorySegment PRIoLEAST16() {
        return constants$172.PRIoLEAST16$SEGMENT;
    }
    public static MemorySegment PRIoLEAST32() {
        return constants$172.PRIoLEAST32$SEGMENT;
    }
    public static MemorySegment PRIoLEAST64() {
        return constants$172.PRIoLEAST64$SEGMENT;
    }
    public static MemorySegment PRIoFAST8() {
        return constants$172.PRIoFAST8$SEGMENT;
    }
    public static MemorySegment PRIoFAST16() {
        return constants$173.PRIoFAST16$SEGMENT;
    }
    public static MemorySegment PRIoFAST32() {
        return constants$173.PRIoFAST32$SEGMENT;
    }
    public static MemorySegment PRIoFAST64() {
        return constants$173.PRIoFAST64$SEGMENT;
    }
    public static MemorySegment PRIu8() {
        return constants$173.PRIu8$SEGMENT;
    }
    public static MemorySegment PRIu16() {
        return constants$173.PRIu16$SEGMENT;
    }
    public static MemorySegment PRIu32() {
        return constants$173.PRIu32$SEGMENT;
    }
    public static MemorySegment PRIu64() {
        return constants$174.PRIu64$SEGMENT;
    }
    public static MemorySegment PRIuLEAST8() {
        return constants$174.PRIuLEAST8$SEGMENT;
    }
    public static MemorySegment PRIuLEAST16() {
        return constants$174.PRIuLEAST16$SEGMENT;
    }
    public static MemorySegment PRIuLEAST32() {
        return constants$174.PRIuLEAST32$SEGMENT;
    }
    public static MemorySegment PRIuLEAST64() {
        return constants$174.PRIuLEAST64$SEGMENT;
    }
    public static MemorySegment PRIuFAST8() {
        return constants$174.PRIuFAST8$SEGMENT;
    }
    public static MemorySegment PRIuFAST16() {
        return constants$175.PRIuFAST16$SEGMENT;
    }
    public static MemorySegment PRIuFAST32() {
        return constants$175.PRIuFAST32$SEGMENT;
    }
    public static MemorySegment PRIuFAST64() {
        return constants$175.PRIuFAST64$SEGMENT;
    }
    public static MemorySegment PRIx8() {
        return constants$175.PRIx8$SEGMENT;
    }
    public static MemorySegment PRIx16() {
        return constants$175.PRIx16$SEGMENT;
    }
    public static MemorySegment PRIx32() {
        return constants$175.PRIx32$SEGMENT;
    }
    public static MemorySegment PRIx64() {
        return constants$176.PRIx64$SEGMENT;
    }
    public static MemorySegment PRIxLEAST8() {
        return constants$176.PRIxLEAST8$SEGMENT;
    }
    public static MemorySegment PRIxLEAST16() {
        return constants$176.PRIxLEAST16$SEGMENT;
    }
    public static MemorySegment PRIxLEAST32() {
        return constants$176.PRIxLEAST32$SEGMENT;
    }
    public static MemorySegment PRIxLEAST64() {
        return constants$176.PRIxLEAST64$SEGMENT;
    }
    public static MemorySegment PRIxFAST8() {
        return constants$176.PRIxFAST8$SEGMENT;
    }
    public static MemorySegment PRIxFAST16() {
        return constants$177.PRIxFAST16$SEGMENT;
    }
    public static MemorySegment PRIxFAST32() {
        return constants$177.PRIxFAST32$SEGMENT;
    }
    public static MemorySegment PRIxFAST64() {
        return constants$177.PRIxFAST64$SEGMENT;
    }
    public static MemorySegment PRIX8() {
        return constants$177.PRIX8$SEGMENT;
    }
    public static MemorySegment PRIX16() {
        return constants$177.PRIX16$SEGMENT;
    }
    public static MemorySegment PRIX32() {
        return constants$177.PRIX32$SEGMENT;
    }
    public static MemorySegment PRIX64() {
        return constants$178.PRIX64$SEGMENT;
    }
    public static MemorySegment PRIXLEAST8() {
        return constants$178.PRIXLEAST8$SEGMENT;
    }
    public static MemorySegment PRIXLEAST16() {
        return constants$178.PRIXLEAST16$SEGMENT;
    }
    public static MemorySegment PRIXLEAST32() {
        return constants$178.PRIXLEAST32$SEGMENT;
    }
    public static MemorySegment PRIXLEAST64() {
        return constants$178.PRIXLEAST64$SEGMENT;
    }
    public static MemorySegment PRIXFAST8() {
        return constants$178.PRIXFAST8$SEGMENT;
    }
    public static MemorySegment PRIXFAST16() {
        return constants$179.PRIXFAST16$SEGMENT;
    }
    public static MemorySegment PRIXFAST32() {
        return constants$179.PRIXFAST32$SEGMENT;
    }
    public static MemorySegment PRIXFAST64() {
        return constants$179.PRIXFAST64$SEGMENT;
    }
    public static MemorySegment PRIdMAX() {
        return constants$179.PRIdMAX$SEGMENT;
    }
    public static MemorySegment PRIiMAX() {
        return constants$179.PRIiMAX$SEGMENT;
    }
    public static MemorySegment PRIoMAX() {
        return constants$179.PRIoMAX$SEGMENT;
    }
    public static MemorySegment PRIuMAX() {
        return constants$180.PRIuMAX$SEGMENT;
    }
    public static MemorySegment PRIxMAX() {
        return constants$180.PRIxMAX$SEGMENT;
    }
    public static MemorySegment PRIXMAX() {
        return constants$180.PRIXMAX$SEGMENT;
    }
    public static MemorySegment PRIdPTR() {
        return constants$180.PRIdPTR$SEGMENT;
    }
    public static MemorySegment PRIiPTR() {
        return constants$180.PRIiPTR$SEGMENT;
    }
    public static MemorySegment PRIoPTR() {
        return constants$180.PRIoPTR$SEGMENT;
    }
    public static MemorySegment PRIuPTR() {
        return constants$181.PRIuPTR$SEGMENT;
    }
    public static MemorySegment PRIxPTR() {
        return constants$181.PRIxPTR$SEGMENT;
    }
    public static MemorySegment PRIXPTR() {
        return constants$181.PRIXPTR$SEGMENT;
    }
    public static MemorySegment SCNd8() {
        return constants$181.SCNd8$SEGMENT;
    }
    public static MemorySegment SCNd16() {
        return constants$181.SCNd16$SEGMENT;
    }
    public static MemorySegment SCNd32() {
        return constants$181.SCNd32$SEGMENT;
    }
    public static MemorySegment SCNd64() {
        return constants$182.SCNd64$SEGMENT;
    }
    public static MemorySegment SCNdLEAST8() {
        return constants$182.SCNdLEAST8$SEGMENT;
    }
    public static MemorySegment SCNdLEAST16() {
        return constants$182.SCNdLEAST16$SEGMENT;
    }
    public static MemorySegment SCNdLEAST32() {
        return constants$182.SCNdLEAST32$SEGMENT;
    }
    public static MemorySegment SCNdLEAST64() {
        return constants$182.SCNdLEAST64$SEGMENT;
    }
    public static MemorySegment SCNdFAST8() {
        return constants$182.SCNdFAST8$SEGMENT;
    }
    public static MemorySegment SCNdFAST16() {
        return constants$183.SCNdFAST16$SEGMENT;
    }
    public static MemorySegment SCNdFAST32() {
        return constants$183.SCNdFAST32$SEGMENT;
    }
    public static MemorySegment SCNdFAST64() {
        return constants$183.SCNdFAST64$SEGMENT;
    }
    public static MemorySegment SCNi8() {
        return constants$183.SCNi8$SEGMENT;
    }
    public static MemorySegment SCNi16() {
        return constants$183.SCNi16$SEGMENT;
    }
    public static MemorySegment SCNi32() {
        return constants$183.SCNi32$SEGMENT;
    }
    public static MemorySegment SCNi64() {
        return constants$184.SCNi64$SEGMENT;
    }
    public static MemorySegment SCNiLEAST8() {
        return constants$184.SCNiLEAST8$SEGMENT;
    }
    public static MemorySegment SCNiLEAST16() {
        return constants$184.SCNiLEAST16$SEGMENT;
    }
    public static MemorySegment SCNiLEAST32() {
        return constants$184.SCNiLEAST32$SEGMENT;
    }
    public static MemorySegment SCNiLEAST64() {
        return constants$184.SCNiLEAST64$SEGMENT;
    }
    public static MemorySegment SCNiFAST8() {
        return constants$184.SCNiFAST8$SEGMENT;
    }
    public static MemorySegment SCNiFAST16() {
        return constants$185.SCNiFAST16$SEGMENT;
    }
    public static MemorySegment SCNiFAST32() {
        return constants$185.SCNiFAST32$SEGMENT;
    }
    public static MemorySegment SCNiFAST64() {
        return constants$185.SCNiFAST64$SEGMENT;
    }
    public static MemorySegment SCNu8() {
        return constants$185.SCNu8$SEGMENT;
    }
    public static MemorySegment SCNu16() {
        return constants$185.SCNu16$SEGMENT;
    }
    public static MemorySegment SCNu32() {
        return constants$185.SCNu32$SEGMENT;
    }
    public static MemorySegment SCNu64() {
        return constants$186.SCNu64$SEGMENT;
    }
    public static MemorySegment SCNuLEAST8() {
        return constants$186.SCNuLEAST8$SEGMENT;
    }
    public static MemorySegment SCNuLEAST16() {
        return constants$186.SCNuLEAST16$SEGMENT;
    }
    public static MemorySegment SCNuLEAST32() {
        return constants$186.SCNuLEAST32$SEGMENT;
    }
    public static MemorySegment SCNuLEAST64() {
        return constants$186.SCNuLEAST64$SEGMENT;
    }
    public static MemorySegment SCNuFAST8() {
        return constants$186.SCNuFAST8$SEGMENT;
    }
    public static MemorySegment SCNuFAST16() {
        return constants$187.SCNuFAST16$SEGMENT;
    }
    public static MemorySegment SCNuFAST32() {
        return constants$187.SCNuFAST32$SEGMENT;
    }
    public static MemorySegment SCNuFAST64() {
        return constants$187.SCNuFAST64$SEGMENT;
    }
    public static MemorySegment SCNo8() {
        return constants$187.SCNo8$SEGMENT;
    }
    public static MemorySegment SCNo16() {
        return constants$187.SCNo16$SEGMENT;
    }
    public static MemorySegment SCNo32() {
        return constants$187.SCNo32$SEGMENT;
    }
    public static MemorySegment SCNo64() {
        return constants$188.SCNo64$SEGMENT;
    }
    public static MemorySegment SCNoLEAST8() {
        return constants$188.SCNoLEAST8$SEGMENT;
    }
    public static MemorySegment SCNoLEAST16() {
        return constants$188.SCNoLEAST16$SEGMENT;
    }
    public static MemorySegment SCNoLEAST32() {
        return constants$188.SCNoLEAST32$SEGMENT;
    }
    public static MemorySegment SCNoLEAST64() {
        return constants$188.SCNoLEAST64$SEGMENT;
    }
    public static MemorySegment SCNoFAST8() {
        return constants$188.SCNoFAST8$SEGMENT;
    }
    public static MemorySegment SCNoFAST16() {
        return constants$189.SCNoFAST16$SEGMENT;
    }
    public static MemorySegment SCNoFAST32() {
        return constants$189.SCNoFAST32$SEGMENT;
    }
    public static MemorySegment SCNoFAST64() {
        return constants$189.SCNoFAST64$SEGMENT;
    }
    public static MemorySegment SCNx8() {
        return constants$189.SCNx8$SEGMENT;
    }
    public static MemorySegment SCNx16() {
        return constants$189.SCNx16$SEGMENT;
    }
    public static MemorySegment SCNx32() {
        return constants$189.SCNx32$SEGMENT;
    }
    public static MemorySegment SCNx64() {
        return constants$190.SCNx64$SEGMENT;
    }
    public static MemorySegment SCNxLEAST8() {
        return constants$190.SCNxLEAST8$SEGMENT;
    }
    public static MemorySegment SCNxLEAST16() {
        return constants$190.SCNxLEAST16$SEGMENT;
    }
    public static MemorySegment SCNxLEAST32() {
        return constants$190.SCNxLEAST32$SEGMENT;
    }
    public static MemorySegment SCNxLEAST64() {
        return constants$190.SCNxLEAST64$SEGMENT;
    }
    public static MemorySegment SCNxFAST8() {
        return constants$190.SCNxFAST8$SEGMENT;
    }
    public static MemorySegment SCNxFAST16() {
        return constants$191.SCNxFAST16$SEGMENT;
    }
    public static MemorySegment SCNxFAST32() {
        return constants$191.SCNxFAST32$SEGMENT;
    }
    public static MemorySegment SCNxFAST64() {
        return constants$191.SCNxFAST64$SEGMENT;
    }
    public static MemorySegment SCNdMAX() {
        return constants$191.SCNdMAX$SEGMENT;
    }
    public static MemorySegment SCNiMAX() {
        return constants$191.SCNiMAX$SEGMENT;
    }
    public static MemorySegment SCNoMAX() {
        return constants$191.SCNoMAX$SEGMENT;
    }
    public static MemorySegment SCNuMAX() {
        return constants$192.SCNuMAX$SEGMENT;
    }
    public static MemorySegment SCNxMAX() {
        return constants$192.SCNxMAX$SEGMENT;
    }
    public static MemorySegment SCNdPTR() {
        return constants$192.SCNdPTR$SEGMENT;
    }
    public static MemorySegment SCNiPTR() {
        return constants$192.SCNiPTR$SEGMENT;
    }
    public static MemorySegment SCNoPTR() {
        return constants$192.SCNoPTR$SEGMENT;
    }
    public static MemorySegment SCNuPTR() {
        return constants$192.SCNuPTR$SEGMENT;
    }
    public static MemorySegment SCNxPTR() {
        return constants$193.SCNxPTR$SEGMENT;
    }
    public static int YR_ATOM_QUALITY_WARNING_THRESHOLD() {
        return (int)213L;
    }
    public static long EOL() {
        return -1L;
    }
    public static long YR_BITMASK_SLOT_BITS() {
        return 64L;
    }
    public static long CLOCKS_PER_SEC() {
        return 1000000L;
    }
    public static long __NCPUBITS() {
        return 64L;
    }
    public static MemoryAddress PTHREAD_CANCELED() {
        return constants$193.PTHREAD_CANCELED$ADDR;
    }
    public static int PTHREAD_BARRIER_SERIAL_THREAD() {
        return (int)-1L;
    }
    public static int RE_MAX_RANGE() {
        return (int)32767L;
    }
    public static MemorySegment YR_VERSION() {
        return constants$193.YR_VERSION$SEGMENT;
    }
    public static int YR_VERSION_HEX() {
        return (int)262403L;
    }
    public static double HUGE_VAL() {
        return Double.valueOf("Infinity");
    }
    public static float HUGE_VALF() {
        return Float.valueOf("Infinity");
    }
    public static float INFINITY() {
        return Float.valueOf("Infinity");
    }
    public static float NAN() {
        return Float.valueOf("NaN");
    }
    public static int __GLIBC_FLT_EVAL_METHOD() {
        return (int)0L;
    }
    public static int FP_ILOGB0() {
        return (int)-2147483648L;
    }
    public static int FP_ILOGBNAN() {
        return (int)-2147483648L;
    }
    public static int math_errhandling() {
        return (int)3L;
    }
    public static double M_E() {
        return 2.718281828459045d;
    }
    public static double M_LOG2E() {
        return 1.4426950408889634d;
    }
    public static double M_LOG10E() {
        return 0.4342944819032518d;
    }
    public static double M_LN2() {
        return 0.6931471805599453d;
    }
    public static double M_LN10() {
        return 2.302585092994046d;
    }
    public static double M_PI() {
        return 3.141592653589793d;
    }
    public static double M_PI_2() {
        return 1.5707963267948966d;
    }
    public static double M_PI_4() {
        return 0.7853981633974483d;
    }
    public static double M_1_PI() {
        return 0.3183098861837907d;
    }
    public static double M_2_PI() {
        return 0.6366197723675814d;
    }
    public static double M_2_SQRTPI() {
        return 1.1283791670955126d;
    }
    public static double M_SQRT2() {
        return 1.4142135623730951d;
    }
    public static double M_SQRT1_2() {
        return 0.7071067811865476d;
    }
    public static long YR_UNDEFINED() {
        return -1483400188077313L;
    }
    public static int OP_INT_EQ() {
        return (int)100L;
    }
    public static int OP_INT_NEQ() {
        return (int)101L;
    }
    public static int OP_INT_LT() {
        return (int)102L;
    }
    public static int OP_INT_GT() {
        return (int)103L;
    }
    public static int OP_INT_LE() {
        return (int)104L;
    }
    public static int OP_INT_GE() {
        return (int)105L;
    }
    public static int OP_INT_ADD() {
        return (int)106L;
    }
    public static int OP_INT_SUB() {
        return (int)107L;
    }
    public static int OP_INT_MUL() {
        return (int)108L;
    }
    public static int OP_INT_DIV() {
        return (int)109L;
    }
    public static int OP_INT_MINUS() {
        return (int)110L;
    }
    public static int OP_INT_END() {
        return (int)110L;
    }
    public static int OP_DBL_EQ() {
        return (int)120L;
    }
    public static int OP_DBL_NEQ() {
        return (int)121L;
    }
    public static int OP_DBL_LT() {
        return (int)122L;
    }
    public static int OP_DBL_GT() {
        return (int)123L;
    }
    public static int OP_DBL_LE() {
        return (int)124L;
    }
    public static int OP_DBL_GE() {
        return (int)125L;
    }
    public static int OP_DBL_ADD() {
        return (int)126L;
    }
    public static int OP_DBL_SUB() {
        return (int)127L;
    }
    public static int OP_DBL_MUL() {
        return (int)128L;
    }
    public static int OP_DBL_DIV() {
        return (int)129L;
    }
    public static int OP_DBL_MINUS() {
        return (int)130L;
    }
    public static int OP_DBL_END() {
        return (int)130L;
    }
    public static int OP_STR_EQ() {
        return (int)140L;
    }
    public static int OP_STR_NEQ() {
        return (int)141L;
    }
    public static int OP_STR_LT() {
        return (int)142L;
    }
    public static int OP_STR_GT() {
        return (int)143L;
    }
    public static int OP_STR_LE() {
        return (int)144L;
    }
    public static int OP_STR_GE() {
        return (int)145L;
    }
    public static int OP_STR_END() {
        return (int)145L;
    }
    public static int OP_INT8() {
        return (int)240L;
    }
    public static int OP_INT16() {
        return (int)241L;
    }
    public static int OP_INT32() {
        return (int)242L;
    }
    public static int OP_UINT8() {
        return (int)243L;
    }
    public static int OP_UINT16() {
        return (int)244L;
    }
    public static int OP_UINT32() {
        return (int)245L;
    }
    public static int OP_INT8BE() {
        return (int)246L;
    }
    public static int OP_INT16BE() {
        return (int)247L;
    }
    public static int OP_INT32BE() {
        return (int)248L;
    }
    public static int OP_UINT8BE() {
        return (int)249L;
    }
    public static int OP_UINT16BE() {
        return (int)250L;
    }
    public static int OP_UINT32BE() {
        return (int)251L;
    }
}


